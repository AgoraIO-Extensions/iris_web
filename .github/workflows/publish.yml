name: Publish

on:
  workflow_dispatch:
    inputs:
      package:
        type: choice
        description: 'choose package'
        default: 'iris-web-rtc'
        required: true
        options:
          - iris-web-rtc
          - iris-web-rtm
      cdn:
        description: 'upload to cdn'
        default: true
        type: boolean
      release_type:
        description: 'The release type of CDN'
        default: 'staging'
        type: string

jobs:
  release-it:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup
        uses: ./.github/actions/setup

      - name: Setup Dependencies and Build
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        run: |
          pnpm install
          pnpm run build
          RTC_PACKAGE_PATH=$(ls packages/rtc/dist | awk -F/ '{print $NF}')
          echo "RTC_PACKAGE_PATH=$RTC_PACKAGE_PATH" >> $GITHUB_ENV
          RTC_FAKE_PACKAGE_PATH=$(ls packages/fake/rtc/dist | awk -F/ '{print $NF}')
          echo "RTC_FAKE_PACKAGE_PATH=$RTC_FAKE_PACKAGE_PATH" >> $GITHUB_ENV

      - name: Setup NPM auth token
        run: |
          npm set "//registry.npmjs.org/:_authToken" ${{ secrets.NPM_TOKEN }}

      - name: Config Git
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Get Package Info
        if: ${{ inputs.package == 'iris-web-rtc' }}
        run: |
          version=$(node -p "require('./packages/rtc/package.json').version")
          echo "version=${version}" >> $GITHUB_ENV

      - name: Get Package Info
        if: ${{ inputs.package == 'iris-web-rtm' }}
        run: |
          version=$(node -p "require('./packages/rtm/package.json').version")
          echo "version=${version}" >> $GITHUB_ENV

      - name: Update CHANGELOG.md and Create Release
        run: |
          pnpm release ${{ env.version }} --ci --npm.allowSameVersion

      - name: Prepare CDN Publish iris-web-rtc
        if: ${{ inputs.cdn }}
        run: |
          GITHUB_RELEASE_DOWNLOAD_PREFIX=https://github.com/AgoraIO-Extensions/iris_web/releases/download
          GITHUB_RELEASE_RTC_PACKAGE_DOWNLOAD_URL="${GITHUB_RELEASE_DOWNLOAD_PREFIX}/v${{ env.version }}/${{ env.RTC_PACKAGE_PATH }}"
          echo "GITHUB_RELEASE_RTC_PACKAGE_DOWNLOAD_URL=${GITHUB_RELEASE_RTC_PACKAGE_DOWNLOAD_URL}" >> $GITHUB_ENV

      - name: CDN Publish iris-web-rtc
        if: ${{ inputs.cdn }}
        env:
          UPLOAD_CDN_INTERNAL_JENKINS_HOOK: ${{ secrets.UPLOAD_CDN_INTERNAL_JENKINS_HOOK }}
        uses: AgoraIO-Extensions/actions/.github/actions/upload_cdn_internal@main
        with:
          upload_cdn_internal_jenkins_hook: ${{ env.UPLOAD_CDN_INTERNAL_JENKINS_HOOK }}
          url: ${{ env.GITHUB_RELEASE_RTC_PACKAGE_DOWNLOAD_URL }}
          release_type: ${{ inputs.release_type }}

      - name: Prepare CDN Publish iris-web-rtc
        if: ${{ inputs.cdn }}
        run: |
          GITHUB_RELEASE_DOWNLOAD_PREFIX=https://github.com/AgoraIO-Extensions/iris_web/releases/download
          GITHUB_RELEASE_RTC_FAKE_PACKAGE_DOWNLOAD_URL="${GITHUB_RELEASE_DOWNLOAD_PREFIX}/v${{ env.version }}/${{ env.RTC_FAKE_PACKAGE_PATH }}"
          echo "GITHUB_RELEASE_RTC_FAKE_PACKAGE_DOWNLOAD_URL=${GITHUB_RELEASE_RTC_FAKE_PACKAGE_DOWNLOAD_URL}" >> $GITHUB_ENV

      - name: CDN Publish iris-web-rtc-fake
        if: ${{ inputs.cdn }}
        env:
          UPLOAD_CDN_INTERNAL_JENKINS_HOOK: ${{ secrets.UPLOAD_CDN_INTERNAL_JENKINS_HOOK }}
        uses: AgoraIO-Extensions/actions/.github/actions/upload_cdn_internal@main
        with:
          upload_cdn_internal_jenkins_hook: ${{ env.UPLOAD_CDN_INTERNAL_JENKINS_HOOK }}
          url: ${{ env.GITHUB_RELEASE_RTC_FAKE_PACKAGE_DOWNLOAD_URL }}
          release_type: ${{ inputs.release_type }}
