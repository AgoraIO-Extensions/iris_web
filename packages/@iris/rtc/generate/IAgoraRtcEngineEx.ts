/// Generated by terra, DO NOT MODIFY BY HAND.

import { CallApiReturnType } from 'iris-web-core';

import {
  AudioVolumeInfo,
  CLIENT_ROLE_CHANGE_FAILED_REASON,
  CLIENT_ROLE_TYPE,
  CONNECTION_CHANGED_REASON_TYPE,
  CONNECTION_STATE_TYPE,
  ChannelMediaRelayConfiguration,
  ClientRoleOptions,
  DataStreamConfig,
  ENCRYPTION_ERROR_TYPE,
  EncryptionConfig,
  LICENSE_ERROR_TYPE,
  LOCAL_AUDIO_STREAM_ERROR,
  LOCAL_AUDIO_STREAM_STATE,
  LiveTranscoding,
  LocalAudioStats,
  MEDIA_TRACE_EVENT,
  NETWORK_TYPE,
  REMOTE_AUDIO_STATE,
  REMOTE_AUDIO_STATE_REASON,
  REMOTE_VIDEO_STATE,
  REMOTE_VIDEO_STATE_REASON,
  RtcStats,
  SIMULCAST_STREAM_MODE,
  SimulcastStreamConfig,
  SpatialAudioParams,
  UPLOAD_ERROR_REASON,
  USER_OFFLINE_REASON_TYPE,
  UserInfo,
  VIDEO_MIRROR_MODE_TYPE,
  VIDEO_STREAM_TYPE,
  VideoCanvas,
  VideoEncoderConfiguration,
  VideoRenderingTracingInfo,
  VideoSubscriptionOptions,
  WLACC_MESSAGE_REASON,
  WLACC_SUGGEST_ACTION,
  WatermarkOptions,
  WlAccStats,
} from './AgoraBase';
import {
  ContentInspectConfig,
  RENDER_MODE_TYPE,
  VIDEO_SOURCE_TYPE,
} from './AgoraMediaBase';
import {
  ChannelMediaOptions,
  LeaveChannelOptions,
  RemoteAudioStats,
  RemoteVideoStats,
  STREAM_FALLBACK_OPTIONS,
} from './IAgoraRtcEngine';

export class RtcConnection {
  channelId?: string;

  localUid?: number;
}

export interface IRtcEngineEventHandlerEx {
  onJoinChannelSuccess(connection: RtcConnection, elapsed: number): void;

  onRejoinChannelSuccess(connection: RtcConnection, elapsed: number): void;

  onAudioQuality(
    connection: RtcConnection,
    remoteUid: number,
    quality: number,
    delay: number,
    lost: number
  ): void;

  onAudioVolumeIndication(
    connection: RtcConnection,
    speakers: AudioVolumeInfo,
    speakerNumber: number,
    totalVolume: number
  ): void;

  onLeaveChannel(connection: RtcConnection, stats: RtcStats): void;

  onRtcStats(connection: RtcConnection, stats: RtcStats): void;

  onNetworkQuality(
    connection: RtcConnection,
    remoteUid: number,
    txQuality: number,
    rxQuality: number
  ): void;

  onIntraRequestReceived(connection: RtcConnection): void;

  onFirstRemoteVideoDecoded(
    connection: RtcConnection,
    remoteUid: number,
    width: number,
    height: number,
    elapsed: number
  ): void;

  onVideoSizeChanged(
    connection: RtcConnection,
    sourceType: VIDEO_SOURCE_TYPE,
    uid: number,
    width: number,
    height: number,
    rotation: number
  ): void;

  onRemoteVideoStateChanged(
    connection: RtcConnection,
    remoteUid: number,
    state: REMOTE_VIDEO_STATE,
    reason: REMOTE_VIDEO_STATE_REASON,
    elapsed: number
  ): void;

  onFirstRemoteVideoFrame(
    connection: RtcConnection,
    remoteUid: number,
    width: number,
    height: number,
    elapsed: number
  ): void;

  onUserJoined(
    connection: RtcConnection,
    remoteUid: number,
    elapsed: number
  ): void;

  onUserOffline(
    connection: RtcConnection,
    remoteUid: number,
    reason: USER_OFFLINE_REASON_TYPE
  ): void;

  onUserMuteAudio(
    connection: RtcConnection,
    remoteUid: number,
    muted: boolean
  ): void;

  onUserMuteVideo(
    connection: RtcConnection,
    remoteUid: number,
    muted: boolean
  ): void;

  onUserEnableVideo(
    connection: RtcConnection,
    remoteUid: number,
    enabled: boolean
  ): void;

  onUserEnableLocalVideo(
    connection: RtcConnection,
    remoteUid: number,
    enabled: boolean
  ): void;

  onUserStateChanged(
    connection: RtcConnection,
    remoteUid: number,
    state: number
  ): void;

  onLocalAudioStats(connection: RtcConnection, stats: LocalAudioStats): void;

  onRemoteAudioStats(connection: RtcConnection, stats: RemoteAudioStats): void;

  onRemoteVideoStats(connection: RtcConnection, stats: RemoteVideoStats): void;

  onConnectionLost(connection: RtcConnection): void;

  onConnectionInterrupted(connection: RtcConnection): void;

  onConnectionBanned(connection: RtcConnection): void;

  onStreamMessage(
    connection: RtcConnection,
    remoteUid: number,
    streamId: number,
    data: string,
    length: number,
    sentTs: number
  ): void;

  onStreamMessageError(
    connection: RtcConnection,
    remoteUid: number,
    streamId: number,
    code: number,
    missed: number,
    cached: number
  ): void;

  onRequestToken(connection: RtcConnection): void;

  onLicenseValidationFailure(
    connection: RtcConnection,
    reason: LICENSE_ERROR_TYPE
  ): void;

  onTokenPrivilegeWillExpire(connection: RtcConnection, token: string): void;

  onFirstLocalAudioFramePublished(
    connection: RtcConnection,
    elapsed: number
  ): void;

  onFirstRemoteAudioFrame(
    connection: RtcConnection,
    userId: number,
    elapsed: number
  ): void;

  onFirstRemoteAudioDecoded(
    connection: RtcConnection,
    uid: number,
    elapsed: number
  ): void;

  onLocalAudioStateChanged(
    connection: RtcConnection,
    state: LOCAL_AUDIO_STREAM_STATE,
    error: LOCAL_AUDIO_STREAM_ERROR
  ): void;

  onRemoteAudioStateChanged(
    connection: RtcConnection,
    remoteUid: number,
    state: REMOTE_AUDIO_STATE,
    reason: REMOTE_AUDIO_STATE_REASON,
    elapsed: number
  ): void;

  onActiveSpeaker(connection: RtcConnection, uid: number): void;

  onClientRoleChanged(
    connection: RtcConnection,
    oldRole: CLIENT_ROLE_TYPE,
    newRole: CLIENT_ROLE_TYPE,
    newRoleOptions: ClientRoleOptions
  ): void;

  onClientRoleChangeFailed(
    connection: RtcConnection,
    reason: CLIENT_ROLE_CHANGE_FAILED_REASON,
    currentRole: CLIENT_ROLE_TYPE
  ): void;

  onRemoteAudioTransportStats(
    connection: RtcConnection,
    remoteUid: number,
    delay: number,
    lost: number,
    rxKBitRate: number
  ): void;

  onRemoteVideoTransportStats(
    connection: RtcConnection,
    remoteUid: number,
    delay: number,
    lost: number,
    rxKBitRate: number
  ): void;

  onConnectionStateChanged(
    connection: RtcConnection,
    state: CONNECTION_STATE_TYPE,
    reason: CONNECTION_CHANGED_REASON_TYPE
  ): void;

  onWlAccMessage(
    connection: RtcConnection,
    reason: WLACC_MESSAGE_REASON,
    action: WLACC_SUGGEST_ACTION,
    wlAccMsg: string
  ): void;

  onWlAccStats(
    connection: RtcConnection,
    currentStats: WlAccStats,
    averageStats: WlAccStats
  ): void;

  onNetworkTypeChanged(connection: RtcConnection, type: NETWORK_TYPE): void;

  onEncryptionError(
    connection: RtcConnection,
    errorType: ENCRYPTION_ERROR_TYPE
  ): void;

  onUploadLogResult(
    connection: RtcConnection,
    requestId: string,
    success: boolean,
    reason: UPLOAD_ERROR_REASON
  ): void;

  onUserAccountUpdated(
    connection: RtcConnection,
    remoteUid: number,
    userAccount: string
  ): void;

  onSnapshotTaken(
    connection: RtcConnection,
    uid: number,
    filePath: string,
    width: number,
    height: number,
    errCode: number
  ): void;

  onVideoRenderingTracingResult(
    connection: RtcConnection,
    uid: number,
    currentEvent: MEDIA_TRACE_EVENT,
    tracingInfo: VideoRenderingTracingInfo
  ): void;
}

export interface IRtcEngineEx {
  joinChannelEx(
    token: string,
    connection: RtcConnection,
    options: ChannelMediaOptions
  ): CallApiReturnType;

  leaveChannelEx(connection: RtcConnection): CallApiReturnType;

  leaveChannelEx2(
    connection: RtcConnection,
    options: LeaveChannelOptions
  ): CallApiReturnType;

  updateChannelMediaOptionsEx(
    options: ChannelMediaOptions,
    connection: RtcConnection
  ): CallApiReturnType;

  setVideoEncoderConfigurationEx(
    config: VideoEncoderConfiguration,
    connection: RtcConnection
  ): CallApiReturnType;

  setupRemoteVideoEx(
    canvas: VideoCanvas,
    connection: RtcConnection
  ): CallApiReturnType;

  muteRemoteAudioStreamEx(
    uid: number,
    mute: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  muteRemoteVideoStreamEx(
    uid: number,
    mute: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  setRemoteVideoStreamTypeEx(
    uid: number,
    streamType: VIDEO_STREAM_TYPE,
    connection: RtcConnection
  ): CallApiReturnType;

  muteLocalAudioStreamEx(
    mute: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  muteLocalVideoStreamEx(
    mute: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  muteAllRemoteAudioStreamsEx(
    mute: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  muteAllRemoteVideoStreamsEx(
    mute: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  setSubscribeAudioBlocklistEx(
    uidList: number,
    uidNumber: number,
    connection: RtcConnection
  ): CallApiReturnType;

  setSubscribeAudioAllowlistEx(
    uidList: number,
    uidNumber: number,
    connection: RtcConnection
  ): CallApiReturnType;

  setSubscribeVideoBlocklistEx(
    uidList: number,
    uidNumber: number,
    connection: RtcConnection
  ): CallApiReturnType;

  setSubscribeVideoAllowlistEx(
    uidList: number,
    uidNumber: number,
    connection: RtcConnection
  ): CallApiReturnType;

  setRemoteVideoSubscriptionOptionsEx(
    uid: number,
    options: VideoSubscriptionOptions,
    connection: RtcConnection
  ): CallApiReturnType;

  setRemoteVoicePositionEx(
    uid: number,
    pan: number,
    gain: number,
    connection: RtcConnection
  ): CallApiReturnType;

  setRemoteUserSpatialAudioParamsEx(
    uid: number,
    params: SpatialAudioParams,
    connection: RtcConnection
  ): CallApiReturnType;

  setRemoteRenderModeEx(
    uid: number,
    renderMode: RENDER_MODE_TYPE,
    mirrorMode: VIDEO_MIRROR_MODE_TYPE,
    connection: RtcConnection
  ): CallApiReturnType;

  enableLoopbackRecordingEx(
    connection: RtcConnection,
    enabled: boolean,
    deviceName: string
  ): CallApiReturnType;

  adjustRecordingSignalVolumeEx(
    volume: number,
    connection: RtcConnection
  ): CallApiReturnType;

  muteRecordingSignalEx(
    mute: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  adjustUserPlaybackSignalVolumeEx(
    uid: number,
    volume: number,
    connection: RtcConnection
  ): CallApiReturnType;

  getConnectionStateEx(connection: RtcConnection): CallApiReturnType;

  enableEncryptionEx(
    connection: RtcConnection,
    enabled: boolean,
    config: EncryptionConfig
  ): CallApiReturnType;

  createDataStreamEx(
    streamId: number,
    reliable: boolean,
    ordered: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  createDataStreamEx2(
    streamId: number,
    config: DataStreamConfig,
    connection: RtcConnection
  ): CallApiReturnType;

  sendStreamMessageEx(
    streamId: number,
    data: string,
    length: number,
    connection: RtcConnection
  ): CallApiReturnType;

  addVideoWatermarkEx(
    watermarkUrl: string,
    options: WatermarkOptions,
    connection: RtcConnection
  ): CallApiReturnType;

  clearVideoWatermarkEx(connection: RtcConnection): CallApiReturnType;

  sendCustomReportMessageEx(
    id: string,
    category: string,
    event: string,
    label: string,
    value: number,
    connection: RtcConnection
  ): CallApiReturnType;

  enableAudioVolumeIndicationEx(
    interval: number,
    smooth: number,
    reportVad: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  startRtmpStreamWithoutTranscodingEx(
    url: string,
    connection: RtcConnection
  ): CallApiReturnType;

  startRtmpStreamWithTranscodingEx(
    url: string,
    transcoding: LiveTranscoding,
    connection: RtcConnection
  ): CallApiReturnType;

  updateRtmpTranscodingEx(
    transcoding: LiveTranscoding,
    connection: RtcConnection
  ): CallApiReturnType;

  stopRtmpStreamEx(url: string, connection: RtcConnection): CallApiReturnType;

  startOrUpdateChannelMediaRelayEx(
    configuration: ChannelMediaRelayConfiguration,
    connection: RtcConnection
  ): CallApiReturnType;

  startChannelMediaRelayEx(
    configuration: ChannelMediaRelayConfiguration,
    connection: RtcConnection
  ): CallApiReturnType;

  updateChannelMediaRelayEx(
    configuration: ChannelMediaRelayConfiguration,
    connection: RtcConnection
  ): CallApiReturnType;

  stopChannelMediaRelayEx(connection: RtcConnection): CallApiReturnType;

  pauseAllChannelMediaRelayEx(connection: RtcConnection): CallApiReturnType;

  resumeAllChannelMediaRelayEx(connection: RtcConnection): CallApiReturnType;

  getUserInfoByUserAccountEx(
    userAccount: string,
    userInfo: UserInfo,
    connection: RtcConnection
  ): CallApiReturnType;

  getUserInfoByUidEx(
    uid: number,
    userInfo: UserInfo,
    connection: RtcConnection
  ): CallApiReturnType;

  enableDualStreamModeEx(
    enabled: boolean,
    streamConfig: SimulcastStreamConfig,
    connection: RtcConnection
  ): CallApiReturnType;

  setDualStreamModeEx(
    mode: SIMULCAST_STREAM_MODE,
    streamConfig: SimulcastStreamConfig,
    connection: RtcConnection
  ): CallApiReturnType;

  setHighPriorityUserListEx(
    uidList: number,
    uidNum: number,
    option: STREAM_FALLBACK_OPTIONS,
    connection: RtcConnection
  ): CallApiReturnType;

  takeSnapshotEx(
    connection: RtcConnection,
    uid: number,
    filePath: string
  ): CallApiReturnType;

  enableContentInspectEx(
    enabled: boolean,
    config: ContentInspectConfig,
    connection: RtcConnection
  ): CallApiReturnType;

  startMediaRenderingTracingEx(connection: RtcConnection): CallApiReturnType;
}
