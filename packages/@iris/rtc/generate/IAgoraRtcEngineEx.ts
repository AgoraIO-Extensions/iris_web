/// Generated by terra, DO NOT MODIFY BY HAND.

import { CallApiReturnType } from 'iris-web-core';

import {
  ChannelMediaRelayConfiguration,
  DataStreamConfig,
  EncryptionConfig,
  LiveTranscoding,
  SIMULCAST_STREAM_MODE,
  SimulcastStreamConfig,
  SpatialAudioParams,
  UserInfo,
  VIDEO_MIRROR_MODE_TYPE,
  VIDEO_STREAM_TYPE,
  VideoCanvas,
  VideoEncoderConfiguration,
  VideoSubscriptionOptions,
  WatermarkOptions,
} from './AgoraBase';
import { ContentInspectConfig, RENDER_MODE_TYPE } from './AgoraMediaBase';
import {
  ChannelMediaOptions,
  LeaveChannelOptions,
  STREAM_FALLBACK_OPTIONS,
} from './IAgoraRtcEngine';

export class RtcConnection {
  channelId?: string;

  localUid?: number;
}

export interface IRtcEngineEx {
  joinChannelEx(
    token: string,
    connection: RtcConnection,
    options: ChannelMediaOptions
  ): CallApiReturnType;

  leaveChannelEx(connection: RtcConnection): CallApiReturnType;

  leaveChannelEx2(
    connection: RtcConnection,
    options: LeaveChannelOptions
  ): CallApiReturnType;

  updateChannelMediaOptionsEx(
    options: ChannelMediaOptions,
    connection: RtcConnection
  ): CallApiReturnType;

  setVideoEncoderConfigurationEx(
    config: VideoEncoderConfiguration,
    connection: RtcConnection
  ): CallApiReturnType;

  setupRemoteVideoEx(
    canvas: VideoCanvas,
    connection: RtcConnection
  ): CallApiReturnType;

  muteRemoteAudioStreamEx(
    uid: number,
    mute: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  muteRemoteVideoStreamEx(
    uid: number,
    mute: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  setRemoteVideoStreamTypeEx(
    uid: number,
    streamType: VIDEO_STREAM_TYPE,
    connection: RtcConnection
  ): CallApiReturnType;

  muteLocalAudioStreamEx(
    mute: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  muteLocalVideoStreamEx(
    mute: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  muteAllRemoteAudioStreamsEx(
    mute: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  muteAllRemoteVideoStreamsEx(
    mute: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  setSubscribeAudioBlocklistEx(
    uidList: number[],
    uidNumber: number,
    connection: RtcConnection
  ): CallApiReturnType;

  setSubscribeAudioAllowlistEx(
    uidList: number[],
    uidNumber: number,
    connection: RtcConnection
  ): CallApiReturnType;

  setSubscribeVideoBlocklistEx(
    uidList: number[],
    uidNumber: number,
    connection: RtcConnection
  ): CallApiReturnType;

  setSubscribeVideoAllowlistEx(
    uidList: number[],
    uidNumber: number,
    connection: RtcConnection
  ): CallApiReturnType;

  setRemoteVideoSubscriptionOptionsEx(
    uid: number,
    options: VideoSubscriptionOptions,
    connection: RtcConnection
  ): CallApiReturnType;

  setRemoteVoicePositionEx(
    uid: number,
    pan: number,
    gain: number,
    connection: RtcConnection
  ): CallApiReturnType;

  setRemoteUserSpatialAudioParamsEx(
    uid: number,
    params: SpatialAudioParams,
    connection: RtcConnection
  ): CallApiReturnType;

  setRemoteRenderModeEx(
    uid: number,
    renderMode: RENDER_MODE_TYPE,
    mirrorMode: VIDEO_MIRROR_MODE_TYPE,
    connection: RtcConnection
  ): CallApiReturnType;

  enableLoopbackRecordingEx(
    connection: RtcConnection,
    enabled: boolean,
    deviceName: string
  ): CallApiReturnType;

  adjustRecordingSignalVolumeEx(
    volume: number,
    connection: RtcConnection
  ): CallApiReturnType;

  muteRecordingSignalEx(
    mute: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  adjustUserPlaybackSignalVolumeEx(
    uid: number,
    volume: number,
    connection: RtcConnection
  ): CallApiReturnType;

  getConnectionStateEx(connection: RtcConnection): CallApiReturnType;

  enableEncryptionEx(
    connection: RtcConnection,
    enabled: boolean,
    config: EncryptionConfig
  ): CallApiReturnType;

  createDataStreamEx(
    reliable: boolean,
    ordered: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  createDataStreamEx2(
    config: DataStreamConfig,
    connection: RtcConnection
  ): CallApiReturnType;

  sendStreamMessageEx(
    streamId: number,
    data: Uint8Array,
    length: number,
    connection: RtcConnection
  ): CallApiReturnType;

  addVideoWatermarkEx(
    watermarkUrl: string,
    options: WatermarkOptions,
    connection: RtcConnection
  ): CallApiReturnType;

  clearVideoWatermarkEx(connection: RtcConnection): CallApiReturnType;

  sendCustomReportMessageEx(
    id: string,
    category: string,
    event: string,
    label: string,
    value: number,
    connection: RtcConnection
  ): CallApiReturnType;

  enableAudioVolumeIndicationEx(
    interval: number,
    smooth: number,
    reportVad: boolean,
    connection: RtcConnection
  ): CallApiReturnType;

  startRtmpStreamWithoutTranscodingEx(
    url: string,
    connection: RtcConnection
  ): CallApiReturnType;

  startRtmpStreamWithTranscodingEx(
    url: string,
    transcoding: LiveTranscoding,
    connection: RtcConnection
  ): CallApiReturnType;

  updateRtmpTranscodingEx(
    transcoding: LiveTranscoding,
    connection: RtcConnection
  ): CallApiReturnType;

  stopRtmpStreamEx(url: string, connection: RtcConnection): CallApiReturnType;

  startOrUpdateChannelMediaRelayEx(
    configuration: ChannelMediaRelayConfiguration,
    connection: RtcConnection
  ): CallApiReturnType;

  startChannelMediaRelayEx(
    configuration: ChannelMediaRelayConfiguration,
    connection: RtcConnection
  ): CallApiReturnType;

  updateChannelMediaRelayEx(
    configuration: ChannelMediaRelayConfiguration,
    connection: RtcConnection
  ): CallApiReturnType;

  stopChannelMediaRelayEx(connection: RtcConnection): CallApiReturnType;

  pauseAllChannelMediaRelayEx(connection: RtcConnection): CallApiReturnType;

  resumeAllChannelMediaRelayEx(connection: RtcConnection): CallApiReturnType;

  getUserInfoByUserAccountEx(
    userAccount: string,
    userInfo: UserInfo,
    connection: RtcConnection
  ): CallApiReturnType;

  getUserInfoByUidEx(
    uid: number,
    userInfo: UserInfo,
    connection: RtcConnection
  ): CallApiReturnType;

  enableDualStreamModeEx(
    enabled: boolean,
    streamConfig: SimulcastStreamConfig,
    connection: RtcConnection
  ): CallApiReturnType;

  setDualStreamModeEx(
    mode: SIMULCAST_STREAM_MODE,
    streamConfig: SimulcastStreamConfig,
    connection: RtcConnection
  ): CallApiReturnType;

  setHighPriorityUserListEx(
    uidList: number[],
    uidNum: number,
    option: STREAM_FALLBACK_OPTIONS,
    connection: RtcConnection
  ): CallApiReturnType;

  takeSnapshotEx(
    connection: RtcConnection,
    uid: number,
    filePath: string
  ): CallApiReturnType;

  enableContentInspectEx(
    enabled: boolean,
    config: ContentInspectConfig,
    connection: RtcConnection
  ): CallApiReturnType;

  startMediaRenderingTracingEx(connection: RtcConnection): CallApiReturnType;
}
