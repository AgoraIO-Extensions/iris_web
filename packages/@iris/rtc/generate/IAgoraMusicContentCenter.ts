/// Generated by terra, DO NOT MODIFY BY HAND.

import { CallApiReturnType } from 'iris-web-core';

export enum PreloadState {
  kPreloadStateCompleted = 0,
  kPreloadStateFailed = 1,
  kPreloadStatePreloading = 2,
  kPreloadStateRemoved = 3,
}

export enum MusicContentCenterStateReason {
  kMusicContentCenterReasonOk = 0,
  kMusicContentCenterReasonError = 1,
  kMusicContentCenterReasonGateway = 2,
  kMusicContentCenterReasonPermissionAndResource = 3,
  kMusicContentCenterReasonInternalDataParse = 4,
  kMusicContentCenterReasonMusicLoading = 5,
  kMusicContentCenterReasonMusicDecryption = 6,
  kMusicContentCenterReasonHttpInternalError = 7,
}

export class MusicChartInfo {
  chartName?: string;

  id?: number;
}

export enum MUSIC_CACHE_STATUS_TYPE {
  MUSIC_CACHE_STATUS_TYPE_CACHED = 0,
  MUSIC_CACHE_STATUS_TYPE_CACHING = 1,
}

export class MusicCacheInfo {
  songCode?: number;

  status?: MUSIC_CACHE_STATUS_TYPE;
}

export interface MusicChartCollection {
  getCount(): CallApiReturnType;

  get_46f8ab7(index: number): CallApiReturnType;
}

export class MvProperty {
  resolution?: string;

  bandwidth?: string;
}

export class ClimaxSegment {
  startTimeMs?: number;

  endTimeMs?: number;
}

export class Music {
  songCode?: number;

  name?: string;

  singer?: string;

  poster?: string;

  releaseTime?: string;

  durationS?: number;

  type?: number;

  pitchType?: number;

  lyricCount?: number;

  lyricList?: number[];

  climaxSegmentCount?: number;

  climaxSegmentList?: ClimaxSegment[];

  mvPropertyCount?: number;

  mvPropertyList?: MvProperty[];
}

export interface MusicCollection {
  getCount(): CallApiReturnType;

  getTotal(): CallApiReturnType;

  getPage(): CallApiReturnType;

  getPageSize(): CallApiReturnType;

  getMusic_8fcdcef(index: number): CallApiReturnType;
}

export interface IMusicContentCenterEventHandler {
  onMusicChartsResult_fb18135(
    requestId: string,
    result: MusicChartInfo[],
    reason: MusicContentCenterStateReason
  ): void;

  onMusicCollectionResult_c30c2e6(
    requestId: string,
    result: MusicCollection,
    reason: MusicContentCenterStateReason
  ): void;

  onLyricResult_9ad9c90(
    requestId: string,
    songCode: number,
    lyricUrl: string,
    reason: MusicContentCenterStateReason
  ): void;

  onSongSimpleInfoResult_9ad9c90(
    requestId: string,
    songCode: number,
    simpleInfo: string,
    reason: MusicContentCenterStateReason
  ): void;

  onPreLoadEvent_20170bc(
    requestId: string,
    songCode: number,
    percent: number,
    lyricUrl: string,
    state: PreloadState,
    reason: MusicContentCenterStateReason
  ): void;
}

export class MusicContentCenterConfiguration {
  appId?: string;

  token?: string;

  mccUid?: number;

  maxCacheSize?: number;

  mccDomain?: string;
}

export interface IMusicPlayer {}

export interface IMusicContentCenter {
  initialize_df70304(
    configuration: MusicContentCenterConfiguration
  ): CallApiReturnType;

  renewToken_3a2037f(token: string): CallApiReturnType;

  release(): CallApiReturnType;

  registerEventHandler_ae49451(
    eventHandler: IMusicContentCenterEventHandler
  ): CallApiReturnType;

  unregisterEventHandler(): CallApiReturnType;

  createMusicPlayer(): CallApiReturnType;

  getMusicCharts_66d4ecd(requestId: string): CallApiReturnType;

  getMusicCollectionByMusicChartId_8cd0b4d(
    requestId: string,
    musicChartId: number,
    page: number,
    pageSize: number,
    jsonOption: string
  ): CallApiReturnType;

  searchMusic_3f8cf09(
    requestId: string,
    keyWord: string,
    page: number,
    pageSize: number,
    jsonOption: string
  ): CallApiReturnType;

  preload_bd5a5a3(songCode: number, jsonOption: string): CallApiReturnType;

  preload_d3baeab(requestId: string, songCode: number): CallApiReturnType;

  removeCache_f631116(songCode: number): CallApiReturnType;

  getCaches_c4f9978(
    cacheInfo: MusicCacheInfo[],
    cacheInfoSize: number
  ): CallApiReturnType;

  isPreloaded_f631116(songCode: number): CallApiReturnType;

  getLyric_5ab5efd(
    requestId: string,
    songCode: number,
    LyricType: number
  ): CallApiReturnType;

  getSongSimpleInfo_d3baeab(
    requestId: string,
    songCode: number
  ): CallApiReturnType;

  getInternalSongCode_3a3d1e7(
    songCode: number,
    jsonOption: string,
    internalSongCode: number
  ): CallApiReturnType;
}
