/// Generated by terra, DO NOT MODIFY BY HAND.

import { CallApiReturnType } from 'iris-web-core';

import {
  AUDIENCE_LATENCY_LEVEL_TYPE,
  AUDIO_AINS_MODE,
  AUDIO_EFFECT_PRESET,
  AUDIO_PROFILE_TYPE,
  AUDIO_RECORDING_QUALITY_TYPE,
  AUDIO_SAMPLE_RATE_TYPE,
  AUDIO_SCENARIO_TYPE,
  AUDIO_SESSION_OPERATION_RESTRICTION,
  AudioEncodedFrameObserverConfig,
  AudioRecordingConfiguration,
  AudioVolumeInfo,
  BeautyOptions,
  CAPTURE_BRIGHTNESS_LEVEL_TYPE,
  CHANNEL_PROFILE_TYPE,
  CLIENT_ROLE_CHANGE_FAILED_REASON,
  CLIENT_ROLE_TYPE,
  CONNECTION_CHANGED_REASON_TYPE,
  CONNECTION_STATE_TYPE,
  ChannelMediaRelayConfiguration,
  ClientRoleOptions,
  CodecCapInfo,
  ColorEnhanceOptions,
  DataStreamConfig,
  DeviceInfo,
  DownlinkNetworkInfo,
  ENCRYPTION_ERROR_TYPE,
  ERROR_CODE_TYPE,
  EchoTestConfiguration,
  EncryptionConfig,
  HEADPHONE_EQUALIZER_PRESET,
  IAudioEncodedFrameObserver,
  LICENSE_ERROR_TYPE,
  LOCAL_AUDIO_STREAM_ERROR,
  LOCAL_AUDIO_STREAM_STATE,
  LOCAL_VIDEO_STREAM_ERROR,
  LOCAL_VIDEO_STREAM_STATE,
  LastmileProbeConfig,
  LastmileProbeResult,
  LiveTranscoding,
  LocalAccessPointConfiguration,
  LocalAudioStats,
  LocalTranscoderConfiguration,
  LowlightEnhanceOptions,
  MEDIA_TRACE_EVENT,
  NETWORK_TYPE,
  PERMISSION_TYPE,
  QUALITY_ADAPT_INDICATION,
  REMOTE_AUDIO_STATE,
  REMOTE_AUDIO_STATE_REASON,
  REMOTE_VIDEO_STATE,
  REMOTE_VIDEO_STATE_REASON,
  RTMP_STREAMING_EVENT,
  RTMP_STREAM_PUBLISH_ERROR_TYPE,
  RTMP_STREAM_PUBLISH_STATE,
  RecorderStreamInfo,
  Rectangle,
  RtcImage,
  RtcStats,
  SCREEN_SCENARIO_TYPE,
  SIMULCAST_STREAM_MODE,
  STREAM_PUBLISH_STATE,
  STREAM_SUBSCRIBE_STATE,
  ScreenCaptureParameters,
  ScreenCaptureParameters2,
  SegmentationProperty,
  SenderOptions,
  SimulcastStreamConfig,
  SpatialAudioParams,
  THREAD_PRIORITY_TYPE,
  TranscodingVideoStream,
  UPLOAD_ERROR_REASON,
  USER_OFFLINE_REASON_TYPE,
  UplinkNetworkInfo,
  UserInfo,
  VIDEO_APPLICATION_SCENARIO_TYPE,
  VIDEO_CODEC_TYPE,
  VIDEO_CONTENT_HINT,
  VIDEO_MIRROR_MODE_TYPE,
  VIDEO_ORIENTATION,
  VIDEO_STREAM_TYPE,
  VIDEO_TRANSCODER_ERROR,
  VOICE_BEAUTIFIER_PRESET,
  VOICE_CONVERSION_PRESET,
  VideoCanvas,
  VideoDenoiserOptions,
  VideoEncoderConfiguration,
  VideoFormat,
  VideoRenderingTracingInfo,
  VideoSubscriptionOptions,
  VirtualBackgroundSource,
  WLACC_MESSAGE_REASON,
  WLACC_SUGGEST_ACTION,
  WatermarkOptions,
  WlAccStats,
} from './AgoraBase';
import {
  CONTENT_INSPECT_RESULT,
  ContentInspectConfig,
  IAudioSpectrumObserver,
  MEDIA_SOURCE_TYPE,
  RAW_AUDIO_FRAME_OP_MODE_TYPE,
  RENDER_MODE_TYPE,
  VIDEO_SOURCE_TYPE,
} from './AgoraMediaBase';
import { LOG_LEVEL, LogConfig } from './IAgoraLog';
import { AUDIO_MIXING_DUAL_MONO_MODE } from './IAgoraMediaEngine';
import { IMediaPlayer } from './IAgoraMediaPlayer';
import { IMediaRecorder } from './IAgoraMediaRecorder';
import {
  AgoraRhythmPlayerConfig,
  RHYTHM_PLAYER_ERROR_TYPE,
  RHYTHM_PLAYER_STATE_TYPE,
} from './IAgoraRhythmPlayer';

export enum MEDIA_DEVICE_TYPE {
  UNKNOWN_AUDIO_DEVICE = -1,
  AUDIO_PLAYOUT_DEVICE = 0,
  AUDIO_RECORDING_DEVICE = 1,
  VIDEO_RENDER_DEVICE = 2,
  VIDEO_CAPTURE_DEVICE = 3,
  AUDIO_APPLICATION_PLAYOUT_DEVICE = 4,
  AUDIO_VIRTUAL_PLAYOUT_DEVICE = 5,
  AUDIO_VIRTUAL_RECORDING_DEVICE = 6,
}

export enum AUDIO_MIXING_STATE_TYPE {
  AUDIO_MIXING_STATE_PLAYING = 710,
  AUDIO_MIXING_STATE_PAUSED = 711,
  AUDIO_MIXING_STATE_STOPPED = 713,
  AUDIO_MIXING_STATE_FAILED = 714,
}

export enum AUDIO_MIXING_REASON_TYPE {
  AUDIO_MIXING_REASON_CAN_NOT_OPEN = 701,
  AUDIO_MIXING_REASON_TOO_FREQUENT_CALL = 702,
  AUDIO_MIXING_REASON_INTERRUPTED_EOF = 703,
  AUDIO_MIXING_REASON_ONE_LOOP_COMPLETED = 721,
  AUDIO_MIXING_REASON_ALL_LOOPS_COMPLETED = 723,
  AUDIO_MIXING_REASON_STOPPED_BY_USER = 724,
  AUDIO_MIXING_REASON_OK = 0,
}

export enum INJECT_STREAM_STATUS {
  INJECT_STREAM_STATUS_START_SUCCESS = 0,
  INJECT_STREAM_STATUS_START_ALREADY_EXISTS = 1,
  INJECT_STREAM_STATUS_START_UNAUTHORIZED = 2,
  INJECT_STREAM_STATUS_START_TIMEDOUT = 3,
  INJECT_STREAM_STATUS_START_FAILED = 4,
  INJECT_STREAM_STATUS_STOP_SUCCESS = 5,
  INJECT_STREAM_STATUS_STOP_NOT_FOUND = 6,
  INJECT_STREAM_STATUS_STOP_UNAUTHORIZED = 7,
  INJECT_STREAM_STATUS_STOP_TIMEDOUT = 8,
  INJECT_STREAM_STATUS_STOP_FAILED = 9,
  INJECT_STREAM_STATUS_BROKEN = 10,
}

export enum AUDIO_EQUALIZATION_BAND_FREQUENCY {
  AUDIO_EQUALIZATION_BAND_31 = 0,
  AUDIO_EQUALIZATION_BAND_62 = 1,
  AUDIO_EQUALIZATION_BAND_125 = 2,
  AUDIO_EQUALIZATION_BAND_250 = 3,
  AUDIO_EQUALIZATION_BAND_500 = 4,
  AUDIO_EQUALIZATION_BAND_1K = 5,
  AUDIO_EQUALIZATION_BAND_2K = 6,
  AUDIO_EQUALIZATION_BAND_4K = 7,
  AUDIO_EQUALIZATION_BAND_8K = 8,
  AUDIO_EQUALIZATION_BAND_16K = 9,
}

export enum AUDIO_REVERB_TYPE {
  AUDIO_REVERB_DRY_LEVEL = 0,
  AUDIO_REVERB_WET_LEVEL = 1,
  AUDIO_REVERB_ROOM_SIZE = 2,
  AUDIO_REVERB_WET_DELAY = 3,
  AUDIO_REVERB_STRENGTH = 4,
}

export enum STREAM_FALLBACK_OPTIONS {
  STREAM_FALLBACK_OPTION_DISABLED = 0,
  STREAM_FALLBACK_OPTION_VIDEO_STREAM_LOW = 1,
  STREAM_FALLBACK_OPTION_AUDIO_ONLY = 2,
}

export enum PRIORITY_TYPE {
  PRIORITY_HIGH = 50,
  PRIORITY_NORMAL = 100,
}

export class LocalVideoStats {
  uid?: number;

  sentBitrate?: number;

  sentFrameRate?: number;

  captureFrameRate?: number;

  captureFrameWidth?: number;

  captureFrameHeight?: number;

  regulatedCaptureFrameRate?: number;

  regulatedCaptureFrameWidth?: number;

  regulatedCaptureFrameHeight?: number;

  encoderOutputFrameRate?: number;

  encodedFrameWidth?: number;

  encodedFrameHeight?: number;

  rendererOutputFrameRate?: number;

  targetBitrate?: number;

  targetFrameRate?: number;

  qualityAdaptIndication?: QUALITY_ADAPT_INDICATION;

  encodedBitrate?: number;

  encodedFrameCount?: number;

  codecType?: VIDEO_CODEC_TYPE;

  txPacketLossRate?: number;

  captureBrightnessLevel?: CAPTURE_BRIGHTNESS_LEVEL_TYPE;

  dualStreamEnabled?: boolean;

  hwEncoderAccelerating?: number;
}

export class RemoteAudioStats {
  uid?: number;

  quality?: number;

  networkTransportDelay?: number;

  jitterBufferDelay?: number;

  audioLossRate?: number;

  numChannels?: number;

  receivedSampleRate?: number;

  receivedBitrate?: number;

  totalFrozenTime?: number;

  frozenRate?: number;

  mosValue?: number;

  frozenRateByCustomPlcCount?: number;

  plcCount?: number;

  totalActiveTime?: number;

  publishDuration?: number;

  qoeQuality?: number;

  qualityChangedReason?: number;

  rxAudioBytes?: number;
}

export class RemoteVideoStats {
  uid?: number;

  delay?: number;

  e2eDelay?: number;

  width?: number;

  height?: number;

  receivedBitrate?: number;

  decoderOutputFrameRate?: number;

  rendererOutputFrameRate?: number;

  frameLossRate?: number;

  packetLossRate?: number;

  rxStreamType?: VIDEO_STREAM_TYPE;

  totalFrozenTime?: number;

  frozenRate?: number;

  avSyncTimeMs?: number;

  totalActiveTime?: number;

  publishDuration?: number;

  mosValue?: number;

  rxVideoBytes?: number;
}

export class Region {
  uid?: number;

  x?: number;

  y?: number;

  width?: number;

  height?: number;

  zOrder?: number;

  alpha?: number;

  renderMode?: RENDER_MODE_TYPE;
}

export class VideoCompositingLayout {
  canvasWidth?: number;

  canvasHeight?: number;

  backgroundColor?: string;

  regions?: Region[];

  regionCount?: number;

  appData?: string;

  appDataLength?: number;
}

export class InjectStreamConfig {
  width?: number;

  height?: number;

  videoGop?: number;

  videoFramerate?: number;

  videoBitrate?: number;

  audioSampleRate?: AUDIO_SAMPLE_RATE_TYPE;

  audioBitrate?: number;

  audioChannels?: number;
}

export enum RTMP_STREAM_LIFE_CYCLE_TYPE {
  RTMP_STREAM_LIFE_CYCLE_BIND2CHANNEL = 1,
  RTMP_STREAM_LIFE_CYCLE_BIND2OWNER = 2,
}

export class PublisherConfiguration {
  width?: number;

  height?: number;

  framerate?: number;

  bitrate?: number;

  defaultLayout?: number;

  lifecycle?: number;

  owner?: boolean;

  injectStreamWidth?: number;

  injectStreamHeight?: number;

  injectStreamUrl?: string;

  publishUrl?: string;

  rawStreamUrl?: string;

  extraInfo?: string;
}

export enum CAMERA_DIRECTION {
  CAMERA_REAR = 0,
  CAMERA_FRONT = 1,
}

export enum CLOUD_PROXY_TYPE {
  NONE_PROXY = 0,
  UDP_PROXY = 1,
  TCP_PROXY = 2,
}

export class CameraCapturerConfiguration {
  cameraDirection?: CAMERA_DIRECTION;

  deviceId?: string;

  format?: VideoFormat;

  followEncodeDimensionRatio?: boolean;
}

export class ScreenCaptureConfiguration {
  isCaptureWindow?: boolean;

  displayId?: number;

  screenRect?: Rectangle;

  windowId?: any;

  params?: ScreenCaptureParameters;

  regionRect?: Rectangle;
}

export class SIZE {
  width?: number;

  height?: number;
}

export class ThumbImageBuffer {
  buffer?: string;

  length?: number;

  width?: number;

  height?: number;
}

export enum ScreenCaptureSourceType {
  ScreenCaptureSourceType_Unknown = -1,
  ScreenCaptureSourceType_Window = 0,
  ScreenCaptureSourceType_Screen = 1,
  ScreenCaptureSourceType_Custom = 2,
}

export class ScreenCaptureSourceInfo {
  type?: ScreenCaptureSourceType;

  sourceId?: any;

  sourceName?: string;

  thumbImage?: ThumbImageBuffer;

  iconImage?: ThumbImageBuffer;

  processPath?: string;

  sourceTitle?: string;

  primaryMonitor?: boolean;

  isOccluded?: boolean;

  position?: Rectangle;

  minimizeWindow?: boolean;

  sourceDisplayId?: any;
}

export class AdvancedAudioOptions {
  audioProcessingChannels?: number;
}

export class ImageTrackOptions {
  imageUrl?: string;

  fps?: number;

  mirrorMode?: VIDEO_MIRROR_MODE_TYPE;
}

export class ChannelMediaOptions {
  publishCameraTrack?: boolean;

  publishSecondaryCameraTrack?: boolean;

  publishThirdCameraTrack?: boolean;

  publishFourthCameraTrack?: boolean;

  publishMicrophoneTrack?: boolean;

  publishScreenCaptureVideo?: boolean;

  publishScreenCaptureAudio?: boolean;

  publishScreenTrack?: boolean;

  publishSecondaryScreenTrack?: boolean;

  publishThirdScreenTrack?: boolean;

  publishFourthScreenTrack?: boolean;

  publishCustomAudioTrack?: boolean;

  publishCustomAudioTrackId?: number;

  publishCustomVideoTrack?: boolean;

  publishEncodedVideoTrack?: boolean;

  publishMediaPlayerAudioTrack?: boolean;

  publishMediaPlayerVideoTrack?: boolean;

  publishTranscodedVideoTrack?: boolean;

  autoSubscribeAudio?: boolean;

  autoSubscribeVideo?: boolean;

  enableAudioRecordingOrPlayout?: boolean;

  publishMediaPlayerId?: number;

  clientRoleType?: CLIENT_ROLE_TYPE;

  audienceLatencyLevel?: AUDIENCE_LATENCY_LEVEL_TYPE;

  defaultVideoStreamType?: VIDEO_STREAM_TYPE;

  channelProfile?: CHANNEL_PROFILE_TYPE;

  audioDelayMs?: number;

  mediaPlayerAudioDelayMs?: number;

  token?: string;

  enableBuiltInMediaEncryption?: boolean;

  publishRhythmPlayerTrack?: boolean;

  isInteractiveAudience?: boolean;

  customVideoTrackId?: number;

  isAudioFilterable?: boolean;
}

export enum PROXY_TYPE {
  NONE_PROXY_TYPE = 0,
  UDP_PROXY_TYPE = 1,
  TCP_PROXY_TYPE = 2,
  LOCAL_PROXY_TYPE = 3,
  TCP_PROXY_AUTO_FALLBACK_TYPE = 4,
  HTTP_PROXY_TYPE = 5,
  HTTPS_PROXY_TYPE = 6,
}

export enum FeatureType {
  VIDEO_VIRTUAL_BACKGROUND = 1,
  VIDEO_BEAUTY_EFFECT = 2,
}

export class LeaveChannelOptions {
  stopAudioMixing?: boolean;

  stopAllEffect?: boolean;

  stopMicrophoneRecording?: boolean;
}

export interface IRtcEngineEventHandler {
  onJoinChannelSuccess(channel: string, uid: number, elapsed: number): void;

  onRejoinChannelSuccess(channel: string, uid: number, elapsed: number): void;

  onProxyConnected(
    channel: string,
    uid: number,
    proxyType: PROXY_TYPE,
    localProxyIp: string,
    elapsed: number
  ): void;

  onError(err: ERROR_CODE_TYPE, msg: string): void;

  onAudioQuality(
    uid: number,
    quality: number,
    delay: number,
    lost: number
  ): void;

  onLastmileProbeResult(result: LastmileProbeResult): void;

  onAudioVolumeIndication(
    speakers: AudioVolumeInfo[],
    speakerNumber: number,
    totalVolume: number
  ): void;

  onLeaveChannel(stats: RtcStats): void;

  onRtcStats(stats: RtcStats): void;

  onAudioDeviceStateChanged(
    deviceId: string,
    deviceType: number,
    deviceState: number
  ): void;

  onAudioMixingPositionChanged(position: number): void;

  onAudioMixingFinished(): void;

  onAudioEffectFinished(soundId: number): void;

  onVideoDeviceStateChanged(
    deviceId: string,
    deviceType: number,
    deviceState: number
  ): void;

  onNetworkQuality(uid: number, txQuality: number, rxQuality: number): void;

  onIntraRequestReceived(): void;

  onUplinkNetworkInfoUpdated(info: UplinkNetworkInfo): void;

  onDownlinkNetworkInfoUpdated(info: DownlinkNetworkInfo): void;

  onLastmileQuality(quality: number): void;

  onFirstLocalVideoFrame(
    source: VIDEO_SOURCE_TYPE,
    width: number,
    height: number,
    elapsed: number
  ): void;

  onFirstLocalVideoFramePublished(
    source: VIDEO_SOURCE_TYPE,
    elapsed: number
  ): void;

  onFirstRemoteVideoDecoded(
    uid: number,
    width: number,
    height: number,
    elapsed: number
  ): void;

  onVideoSizeChanged(
    sourceType: VIDEO_SOURCE_TYPE,
    uid: number,
    width: number,
    height: number,
    rotation: number
  ): void;

  onLocalVideoStateChanged(
    source: VIDEO_SOURCE_TYPE,
    state: LOCAL_VIDEO_STREAM_STATE,
    error: LOCAL_VIDEO_STREAM_ERROR
  ): void;

  onRemoteVideoStateChanged(
    uid: number,
    state: REMOTE_VIDEO_STATE,
    reason: REMOTE_VIDEO_STATE_REASON,
    elapsed: number
  ): void;

  onFirstRemoteVideoFrame(
    userId: number,
    width: number,
    height: number,
    elapsed: number
  ): void;

  onUserJoined(uid: number, elapsed: number): void;

  onUserOffline(uid: number, reason: USER_OFFLINE_REASON_TYPE): void;

  onUserMuteAudio(uid: number, muted: boolean): void;

  onUserMuteVideo(userId: number, muted: boolean): void;

  onUserEnableVideo(uid: number, enabled: boolean): void;

  onUserStateChanged(uid: number, state: number): void;

  onUserEnableLocalVideo(uid: number, enabled: boolean): void;

  onLocalAudioStats(stats: LocalAudioStats): void;

  onRemoteAudioStats(stats: RemoteAudioStats): void;

  onLocalVideoStats(source: VIDEO_SOURCE_TYPE, stats: LocalVideoStats): void;

  onRemoteVideoStats(stats: RemoteVideoStats): void;

  onCameraReady(): void;

  onCameraFocusAreaChanged(
    x: number,
    y: number,
    width: number,
    height: number
  ): void;

  onCameraExposureAreaChanged(
    x: number,
    y: number,
    width: number,
    height: number
  ): void;

  onFacePositionChanged(
    imageWidth: number,
    imageHeight: number,
    vecRectangle: Rectangle[],
    vecDistance: number[],
    numFaces: number
  ): void;

  onVideoStopped(): void;

  onAudioMixingStateChanged(
    state: AUDIO_MIXING_STATE_TYPE,
    reason: AUDIO_MIXING_REASON_TYPE
  ): void;

  onRhythmPlayerStateChanged(
    state: RHYTHM_PLAYER_STATE_TYPE,
    errorCode: RHYTHM_PLAYER_ERROR_TYPE
  ): void;

  onConnectionLost(): void;

  onConnectionInterrupted(): void;

  onConnectionBanned(): void;

  onStreamMessage(
    userId: number,
    streamId: number,
    data: string,
    length: number,
    sentTs: number
  ): void;

  onStreamMessageError(
    userId: number,
    streamId: number,
    code: number,
    missed: number,
    cached: number
  ): void;

  onRequestToken(): void;

  onTokenPrivilegeWillExpire(token: string): void;

  onLicenseValidationFailure(error: LICENSE_ERROR_TYPE): void;

  onFirstLocalAudioFramePublished(elapsed: number): void;

  onFirstRemoteAudioFrame(uid: number, elapsed: number): void;

  onFirstRemoteAudioDecoded(uid: number, elapsed: number): void;

  onLocalAudioStateChanged(
    state: LOCAL_AUDIO_STREAM_STATE,
    error: LOCAL_AUDIO_STREAM_ERROR
  ): void;

  onRemoteAudioStateChanged(
    uid: number,
    state: REMOTE_AUDIO_STATE,
    reason: REMOTE_AUDIO_STATE_REASON,
    elapsed: number
  ): void;

  onActiveSpeaker(userId: number): void;

  onContentInspectResult(result: CONTENT_INSPECT_RESULT): void;

  onSnapshotTaken(
    uid: number,
    filePath: string,
    width: number,
    height: number,
    errCode: number
  ): void;

  onClientRoleChanged(
    oldRole: CLIENT_ROLE_TYPE,
    newRole: CLIENT_ROLE_TYPE,
    newRoleOptions: ClientRoleOptions
  ): void;

  onClientRoleChangeFailed(
    reason: CLIENT_ROLE_CHANGE_FAILED_REASON,
    currentRole: CLIENT_ROLE_TYPE
  ): void;

  onAudioDeviceVolumeChanged(
    deviceType: MEDIA_DEVICE_TYPE,
    volume: number,
    muted: boolean
  ): void;

  onRtmpStreamingStateChanged(
    url: string,
    state: RTMP_STREAM_PUBLISH_STATE,
    errCode: RTMP_STREAM_PUBLISH_ERROR_TYPE
  ): void;

  onRtmpStreamingEvent(url: string, eventCode: RTMP_STREAMING_EVENT): void;

  onTranscodingUpdated(): void;

  onAudioRoutingChanged(routing: number): void;

  onChannelMediaRelayStateChanged(state: number, code: number): void;

  onChannelMediaRelayEvent(code: number): void;

  onLocalPublishFallbackToAudioOnly(isFallbackOrRecover: boolean): void;

  onRemoteSubscribeFallbackToAudioOnly(
    uid: number,
    isFallbackOrRecover: boolean
  ): void;

  onRemoteAudioTransportStats(
    uid: number,
    delay: number,
    lost: number,
    rxKBitRate: number
  ): void;

  onRemoteVideoTransportStats(
    uid: number,
    delay: number,
    lost: number,
    rxKBitRate: number
  ): void;

  onConnectionStateChanged(
    state: CONNECTION_STATE_TYPE,
    reason: CONNECTION_CHANGED_REASON_TYPE
  ): void;

  onWlAccMessage(
    reason: WLACC_MESSAGE_REASON,
    action: WLACC_SUGGEST_ACTION,
    wlAccMsg: string
  ): void;

  onWlAccStats(currentStats: WlAccStats, averageStats: WlAccStats): void;

  onNetworkTypeChanged(type: NETWORK_TYPE): void;

  onEncryptionError(errorType: ENCRYPTION_ERROR_TYPE): void;

  onPermissionError(permissionType: PERMISSION_TYPE): void;

  onLocalUserRegistered(uid: number, userAccount: string): void;

  onUserInfoUpdated(uid: number, info: UserInfo): void;

  onUploadLogResult(
    requestId: string,
    success: boolean,
    reason: UPLOAD_ERROR_REASON
  ): void;

  onAudioSubscribeStateChanged(
    channel: string,
    uid: number,
    oldState: STREAM_SUBSCRIBE_STATE,
    newState: STREAM_SUBSCRIBE_STATE,
    elapseSinceLastState: number
  ): void;

  onVideoSubscribeStateChanged(
    channel: string,
    uid: number,
    oldState: STREAM_SUBSCRIBE_STATE,
    newState: STREAM_SUBSCRIBE_STATE,
    elapseSinceLastState: number
  ): void;

  onAudioPublishStateChanged(
    channel: string,
    oldState: STREAM_PUBLISH_STATE,
    newState: STREAM_PUBLISH_STATE,
    elapseSinceLastState: number
  ): void;

  onVideoPublishStateChanged(
    source: VIDEO_SOURCE_TYPE,
    channel: string,
    oldState: STREAM_PUBLISH_STATE,
    newState: STREAM_PUBLISH_STATE,
    elapseSinceLastState: number
  ): void;

  onExtensionEvent(
    provider: string,
    extension: string,
    key: string,
    value: string
  ): void;

  onExtensionStarted(provider: string, extension: string): void;

  onExtensionStopped(provider: string, extension: string): void;

  onExtensionError(
    provider: string,
    extension: string,
    error: number,
    message: string
  ): void;

  onUserAccountUpdated(uid: number, userAccount: string): void;

  onLocalVideoTranscoderError(
    stream: TranscodingVideoStream,
    error: VIDEO_TRANSCODER_ERROR
  ): void;

  onVideoRenderingTracingResult(
    uid: number,
    currentEvent: MEDIA_TRACE_EVENT,
    tracingInfo: VideoRenderingTracingInfo
  ): void;
}

export interface IVideoDeviceManager {
  enumerateVideoDevices(): CallApiReturnType;

  setDevice(deviceIdUTF8: string): CallApiReturnType;

  getDevice(): CallApiReturnType;

  numberOfCapabilities(deviceIdUTF8: string): CallApiReturnType;

  getCapability(
    deviceIdUTF8: string,
    deviceCapabilityNumber: number,
    capability: VideoFormat
  ): CallApiReturnType;

  startDeviceTest(hwnd: any): CallApiReturnType;

  stopDeviceTest(): CallApiReturnType;

  release(): CallApiReturnType;
}

export class RtcEngineContext {
  appId?: string;

  channelProfile?: CHANNEL_PROFILE_TYPE;

  license?: string;

  audioScenario?: AUDIO_SCENARIO_TYPE;

  areaCode?: number;

  logConfig?: LogConfig;

  threadPriority?: THREAD_PRIORITY_TYPE;

  useExternalEglContext?: boolean;

  domainLimit?: boolean;

  autoRegisterAgoraExtensions?: boolean;
}

export enum METADATA_TYPE {
  UNKNOWN_METADATA = -1,
  VIDEO_METADATA = 0,
}

export enum MAX_METADATA_SIZE_TYPE {
  INVALID_METADATA_SIZE_IN_BYTE = -1,
  DEFAULT_METADATA_SIZE_IN_BYTE = 512,
  MAX_METADATA_SIZE_IN_BYTE = 1024,
}

export class Metadata {
  uid?: number;

  size?: number;

  buffer?: Uint8Array;

  timeStampMs?: number;
}

export interface IMetadataObserver {
  onMetadataReceived(metadata: Metadata): void;
}

export enum DIRECT_CDN_STREAMING_ERROR {
  DIRECT_CDN_STREAMING_ERROR_OK = 0,
  DIRECT_CDN_STREAMING_ERROR_FAILED = 1,
  DIRECT_CDN_STREAMING_ERROR_AUDIO_PUBLICATION = 2,
  DIRECT_CDN_STREAMING_ERROR_VIDEO_PUBLICATION = 3,
  DIRECT_CDN_STREAMING_ERROR_NET_CONNECT = 4,
  DIRECT_CDN_STREAMING_ERROR_BAD_NAME = 5,
}

export enum DIRECT_CDN_STREAMING_STATE {
  DIRECT_CDN_STREAMING_STATE_IDLE = 0,
  DIRECT_CDN_STREAMING_STATE_RUNNING = 1,
  DIRECT_CDN_STREAMING_STATE_STOPPED = 2,
  DIRECT_CDN_STREAMING_STATE_FAILED = 3,
  DIRECT_CDN_STREAMING_STATE_RECOVERING = 4,
}

export class DirectCdnStreamingStats {
  videoWidth?: number;

  videoHeight?: number;

  fps?: number;

  videoBitrate?: number;

  audioBitrate?: number;
}

export interface IDirectCdnStreamingEventHandler {
  onDirectCdnStreamingStateChanged(
    state: DIRECT_CDN_STREAMING_STATE,
    error: DIRECT_CDN_STREAMING_ERROR,
    message: string
  ): void;

  onDirectCdnStreamingStats(stats: DirectCdnStreamingStats): void;
}

export class DirectCdnStreamingMediaOptions {
  publishCameraTrack?: boolean;

  publishMicrophoneTrack?: boolean;

  publishCustomAudioTrack?: boolean;

  publishCustomVideoTrack?: boolean;

  publishMediaPlayerAudioTrack?: boolean;

  publishMediaPlayerId?: number;

  customVideoTrackId?: number;
}

export class ExtensionInfo {
  mediaSourceType?: MEDIA_SOURCE_TYPE;

  remoteUid?: number;

  channelId?: string;

  localUid?: number;
}

export interface IRtcEngine {
  release(sync: boolean): CallApiReturnType;

  initialize(context: RtcEngineContext): CallApiReturnType;

  getVersion(): CallApiReturnType;

  getErrorDescription(code: number): CallApiReturnType;

  queryCodecCapability(
    codecInfo: CodecCapInfo[],
    size: number
  ): CallApiReturnType;

  preloadChannel(
    token: string,
    channelId: string,
    uid: number
  ): CallApiReturnType;

  preloadChannel2(
    token: string,
    channelId: string,
    userAccount: string
  ): CallApiReturnType;

  updatePreloadChannelToken(token: string): CallApiReturnType;

  joinChannel(
    token: string,
    channelId: string,
    info: string,
    uid: number
  ): CallApiReturnType;

  joinChannel2(
    token: string,
    channelId: string,
    uid: number,
    options: ChannelMediaOptions
  ): CallApiReturnType;

  updateChannelMediaOptions(options: ChannelMediaOptions): CallApiReturnType;

  leaveChannel(): CallApiReturnType;

  leaveChannel2(options: LeaveChannelOptions): CallApiReturnType;

  renewToken(token: string): CallApiReturnType;

  setChannelProfile(profile: CHANNEL_PROFILE_TYPE): CallApiReturnType;

  setClientRole(role: CLIENT_ROLE_TYPE): CallApiReturnType;

  setClientRole2(
    role: CLIENT_ROLE_TYPE,
    options: ClientRoleOptions
  ): CallApiReturnType;

  startEchoTest(): CallApiReturnType;

  startEchoTest2(intervalInSeconds: number): CallApiReturnType;

  startEchoTest3(config: EchoTestConfiguration): CallApiReturnType;

  stopEchoTest(): CallApiReturnType;

  enableMultiCamera(
    enabled: boolean,
    config: CameraCapturerConfiguration
  ): CallApiReturnType;

  enableVideo(): CallApiReturnType;

  disableVideo(): CallApiReturnType;

  startPreview(): CallApiReturnType;

  startPreview2(sourceType: VIDEO_SOURCE_TYPE): CallApiReturnType;

  stopPreview(): CallApiReturnType;

  stopPreview2(sourceType: VIDEO_SOURCE_TYPE): CallApiReturnType;

  startLastmileProbeTest(config: LastmileProbeConfig): CallApiReturnType;

  stopLastmileProbeTest(): CallApiReturnType;

  setVideoEncoderConfiguration(
    config: VideoEncoderConfiguration
  ): CallApiReturnType;

  setBeautyEffectOptions(
    enabled: boolean,
    options: BeautyOptions,
    type: MEDIA_SOURCE_TYPE
  ): CallApiReturnType;

  setLowlightEnhanceOptions(
    enabled: boolean,
    options: LowlightEnhanceOptions,
    type: MEDIA_SOURCE_TYPE
  ): CallApiReturnType;

  setVideoDenoiserOptions(
    enabled: boolean,
    options: VideoDenoiserOptions,
    type: MEDIA_SOURCE_TYPE
  ): CallApiReturnType;

  setColorEnhanceOptions(
    enabled: boolean,
    options: ColorEnhanceOptions,
    type: MEDIA_SOURCE_TYPE
  ): CallApiReturnType;

  enableVirtualBackground(
    enabled: boolean,
    backgroundSource: VirtualBackgroundSource,
    segproperty: SegmentationProperty,
    type: MEDIA_SOURCE_TYPE
  ): CallApiReturnType;

  setupRemoteVideo(canvas: VideoCanvas): CallApiReturnType;

  setupLocalVideo(canvas: VideoCanvas): CallApiReturnType;

  setVideoScenario(
    scenarioType: VIDEO_APPLICATION_SCENARIO_TYPE
  ): CallApiReturnType;

  enableAudio(): CallApiReturnType;

  disableAudio(): CallApiReturnType;

  setAudioProfile(
    profile: AUDIO_PROFILE_TYPE,
    scenario: AUDIO_SCENARIO_TYPE
  ): CallApiReturnType;

  setAudioProfile2(profile: AUDIO_PROFILE_TYPE): CallApiReturnType;

  setAudioScenario(scenario: AUDIO_SCENARIO_TYPE): CallApiReturnType;

  enableLocalAudio(enabled: boolean): CallApiReturnType;

  muteLocalAudioStream(mute: boolean): CallApiReturnType;

  muteAllRemoteAudioStreams(mute: boolean): CallApiReturnType;

  setDefaultMuteAllRemoteAudioStreams(mute: boolean): CallApiReturnType;

  muteRemoteAudioStream(uid: number, mute: boolean): CallApiReturnType;

  muteLocalVideoStream(mute: boolean): CallApiReturnType;

  enableLocalVideo(enabled: boolean): CallApiReturnType;

  muteAllRemoteVideoStreams(mute: boolean): CallApiReturnType;

  setDefaultMuteAllRemoteVideoStreams(mute: boolean): CallApiReturnType;

  muteRemoteVideoStream(uid: number, mute: boolean): CallApiReturnType;

  setRemoteVideoStreamType(
    uid: number,
    streamType: VIDEO_STREAM_TYPE
  ): CallApiReturnType;

  setRemoteVideoSubscriptionOptions(
    uid: number,
    options: VideoSubscriptionOptions
  ): CallApiReturnType;

  setRemoteDefaultVideoStreamType(
    streamType: VIDEO_STREAM_TYPE
  ): CallApiReturnType;

  setSubscribeAudioBlocklist(
    uidList: number,
    uidNumber: number
  ): CallApiReturnType;

  setSubscribeAudioAllowlist(
    uidList: number,
    uidNumber: number
  ): CallApiReturnType;

  setSubscribeVideoBlocklist(
    uidList: number,
    uidNumber: number
  ): CallApiReturnType;

  setSubscribeVideoAllowlist(
    uidList: number,
    uidNumber: number
  ): CallApiReturnType;

  enableAudioVolumeIndication(
    interval: number,
    smooth: number,
    reportVad: boolean
  ): CallApiReturnType;

  startAudioRecording(
    filePath: string,
    quality: AUDIO_RECORDING_QUALITY_TYPE
  ): CallApiReturnType;

  startAudioRecording2(
    filePath: string,
    sampleRate: number,
    quality: AUDIO_RECORDING_QUALITY_TYPE
  ): CallApiReturnType;

  startAudioRecording3(config: AudioRecordingConfiguration): CallApiReturnType;

  registerAudioEncodedFrameObserver(
    config: AudioEncodedFrameObserverConfig,
    observer: IAudioEncodedFrameObserver
  ): CallApiReturnType;

  stopAudioRecording(): CallApiReturnType;

  createMediaPlayer(): CallApiReturnType;

  destroyMediaPlayer(media_player: IMediaPlayer): CallApiReturnType;

  createMediaRecorder(info: RecorderStreamInfo): CallApiReturnType;

  destroyMediaRecorder(mediaRecorder: IMediaRecorder): CallApiReturnType;

  startAudioMixing(
    filePath: string,
    loopback: boolean,
    cycle: number
  ): CallApiReturnType;

  startAudioMixing2(
    filePath: string,
    loopback: boolean,
    cycle: number,
    startPos: number
  ): CallApiReturnType;

  stopAudioMixing(): CallApiReturnType;

  pauseAudioMixing(): CallApiReturnType;

  resumeAudioMixing(): CallApiReturnType;

  selectAudioTrack(index: number): CallApiReturnType;

  getAudioTrackCount(): CallApiReturnType;

  adjustAudioMixingVolume(volume: number): CallApiReturnType;

  adjustAudioMixingPublishVolume(volume: number): CallApiReturnType;

  getAudioMixingPublishVolume(): CallApiReturnType;

  adjustAudioMixingPlayoutVolume(volume: number): CallApiReturnType;

  getAudioMixingPlayoutVolume(): CallApiReturnType;

  getAudioMixingDuration(): CallApiReturnType;

  getAudioMixingCurrentPosition(): CallApiReturnType;

  setAudioMixingPosition(pos: number): CallApiReturnType;

  setAudioMixingDualMonoMode(
    mode: AUDIO_MIXING_DUAL_MONO_MODE
  ): CallApiReturnType;

  setAudioMixingPitch(pitch: number): CallApiReturnType;

  getEffectsVolume(): CallApiReturnType;

  setEffectsVolume(volume: number): CallApiReturnType;

  preloadEffect(
    soundId: number,
    filePath: string,
    startPos: number
  ): CallApiReturnType;

  playEffect(
    soundId: number,
    filePath: string,
    loopCount: number,
    pitch: number,
    pan: number,
    gain: number,
    publish: boolean,
    startPos: number
  ): CallApiReturnType;

  playAllEffects(
    loopCount: number,
    pitch: number,
    pan: number,
    gain: number,
    publish: boolean
  ): CallApiReturnType;

  getVolumeOfEffect(soundId: number): CallApiReturnType;

  setVolumeOfEffect(soundId: number, volume: number): CallApiReturnType;

  pauseEffect(soundId: number): CallApiReturnType;

  pauseAllEffects(): CallApiReturnType;

  resumeEffect(soundId: number): CallApiReturnType;

  resumeAllEffects(): CallApiReturnType;

  stopEffect(soundId: number): CallApiReturnType;

  stopAllEffects(): CallApiReturnType;

  unloadEffect(soundId: number): CallApiReturnType;

  unloadAllEffects(): CallApiReturnType;

  getEffectDuration(filePath: string): CallApiReturnType;

  setEffectPosition(soundId: number, pos: number): CallApiReturnType;

  getEffectCurrentPosition(soundId: number): CallApiReturnType;

  enableSoundPositionIndication(enabled: boolean): CallApiReturnType;

  setRemoteVoicePosition(
    uid: number,
    pan: number,
    gain: number
  ): CallApiReturnType;

  enableSpatialAudio(enabled: boolean): CallApiReturnType;

  setRemoteUserSpatialAudioParams(
    uid: number,
    params: SpatialAudioParams
  ): CallApiReturnType;

  setVoiceBeautifierPreset(preset: VOICE_BEAUTIFIER_PRESET): CallApiReturnType;

  setAudioEffectPreset(preset: AUDIO_EFFECT_PRESET): CallApiReturnType;

  setVoiceConversionPreset(preset: VOICE_CONVERSION_PRESET): CallApiReturnType;

  setAudioEffectParameters(
    preset: AUDIO_EFFECT_PRESET,
    param1: number,
    param2: number
  ): CallApiReturnType;

  setVoiceBeautifierParameters(
    preset: VOICE_BEAUTIFIER_PRESET,
    param1: number,
    param2: number
  ): CallApiReturnType;

  setVoiceConversionParameters(
    preset: VOICE_CONVERSION_PRESET,
    param1: number,
    param2: number
  ): CallApiReturnType;

  setLocalVoicePitch(pitch: number): CallApiReturnType;

  setLocalVoiceFormant(formantRatio: number): CallApiReturnType;

  setLocalVoiceEqualization(
    bandFrequency: AUDIO_EQUALIZATION_BAND_FREQUENCY,
    bandGain: number
  ): CallApiReturnType;

  setLocalVoiceReverb(
    reverbKey: AUDIO_REVERB_TYPE,
    value: number
  ): CallApiReturnType;

  setHeadphoneEQPreset(preset: HEADPHONE_EQUALIZER_PRESET): CallApiReturnType;

  setHeadphoneEQParameters(
    lowGain: number,
    highGain: number
  ): CallApiReturnType;

  setLogFile(filePath: string): CallApiReturnType;

  setLogFilter(filter: number): CallApiReturnType;

  setLogLevel(level: LOG_LEVEL): CallApiReturnType;

  setLogFileSize(fileSizeInKBytes: number): CallApiReturnType;

  uploadLogFile(requestId: string): CallApiReturnType;

  setLocalRenderMode(
    renderMode: RENDER_MODE_TYPE,
    mirrorMode: VIDEO_MIRROR_MODE_TYPE
  ): CallApiReturnType;

  setRemoteRenderMode(
    uid: number,
    renderMode: RENDER_MODE_TYPE,
    mirrorMode: VIDEO_MIRROR_MODE_TYPE
  ): CallApiReturnType;

  setLocalRenderMode2(renderMode: RENDER_MODE_TYPE): CallApiReturnType;

  setLocalVideoMirrorMode(
    mirrorMode: VIDEO_MIRROR_MODE_TYPE
  ): CallApiReturnType;

  enableDualStreamMode(enabled: boolean): CallApiReturnType;

  enableDualStreamMode2(
    enabled: boolean,
    streamConfig: SimulcastStreamConfig
  ): CallApiReturnType;

  setDualStreamMode(mode: SIMULCAST_STREAM_MODE): CallApiReturnType;

  setDualStreamMode2(
    mode: SIMULCAST_STREAM_MODE,
    streamConfig: SimulcastStreamConfig
  ): CallApiReturnType;

  enableCustomAudioLocalPlayback(
    trackId: number,
    enabled: boolean
  ): CallApiReturnType;

  setRecordingAudioFrameParameters(
    sampleRate: number,
    channel: number,
    mode: RAW_AUDIO_FRAME_OP_MODE_TYPE,
    samplesPerCall: number
  ): CallApiReturnType;

  setPlaybackAudioFrameParameters(
    sampleRate: number,
    channel: number,
    mode: RAW_AUDIO_FRAME_OP_MODE_TYPE,
    samplesPerCall: number
  ): CallApiReturnType;

  setMixedAudioFrameParameters(
    sampleRate: number,
    channel: number,
    samplesPerCall: number
  ): CallApiReturnType;

  setEarMonitoringAudioFrameParameters(
    sampleRate: number,
    channel: number,
    mode: RAW_AUDIO_FRAME_OP_MODE_TYPE,
    samplesPerCall: number
  ): CallApiReturnType;

  setPlaybackAudioFrameBeforeMixingParameters(
    sampleRate: number,
    channel: number
  ): CallApiReturnType;

  enableAudioSpectrumMonitor(intervalInMS: number): CallApiReturnType;

  disableAudioSpectrumMonitor(): CallApiReturnType;

  registerAudioSpectrumObserver(
    observer: IAudioSpectrumObserver
  ): CallApiReturnType;

  unregisterAudioSpectrumObserver(
    observer: IAudioSpectrumObserver
  ): CallApiReturnType;

  adjustRecordingSignalVolume(volume: number): CallApiReturnType;

  muteRecordingSignal(mute: boolean): CallApiReturnType;

  adjustPlaybackSignalVolume(volume: number): CallApiReturnType;

  adjustUserPlaybackSignalVolume(
    uid: number,
    volume: number
  ): CallApiReturnType;

  setLocalPublishFallbackOption(
    option: STREAM_FALLBACK_OPTIONS
  ): CallApiReturnType;

  setRemoteSubscribeFallbackOption(
    option: STREAM_FALLBACK_OPTIONS
  ): CallApiReturnType;

  setHighPriorityUserList(
    uidList: number,
    uidNum: number,
    option: STREAM_FALLBACK_OPTIONS
  ): CallApiReturnType;

  enableLoopbackRecording(
    enabled: boolean,
    deviceName: string
  ): CallApiReturnType;

  adjustLoopbackSignalVolume(volume: number): CallApiReturnType;

  getLoopbackRecordingVolume(): CallApiReturnType;

  enableInEarMonitoring(
    enabled: boolean,
    includeAudioFilters: number
  ): CallApiReturnType;

  setInEarMonitoringVolume(volume: number): CallApiReturnType;

  loadExtensionProvider(
    path: string,
    unload_after_use: boolean
  ): CallApiReturnType;

  setExtensionProviderProperty(
    provider: string,
    key: string,
    value: string
  ): CallApiReturnType;

  registerExtension(
    provider: string,
    extension: string,
    type: MEDIA_SOURCE_TYPE
  ): CallApiReturnType;

  enableExtension(
    provider: string,
    extension: string,
    enable: boolean,
    type: MEDIA_SOURCE_TYPE
  ): CallApiReturnType;

  enableExtension2(
    provider: string,
    extension: string,
    extensionInfo: ExtensionInfo,
    enable: boolean
  ): CallApiReturnType;

  setExtensionProperty(
    provider: string,
    extension: string,
    key: string,
    value: string,
    type: MEDIA_SOURCE_TYPE
  ): CallApiReturnType;

  getExtensionProperty(
    provider: string,
    extension: string,
    key: string,
    value: string,
    buf_len: number,
    type: MEDIA_SOURCE_TYPE
  ): CallApiReturnType;

  setExtensionProperty2(
    provider: string,
    extension: string,
    extensionInfo: ExtensionInfo,
    key: string,
    value: string
  ): CallApiReturnType;

  getExtensionProperty2(
    provider: string,
    extension: string,
    extensionInfo: ExtensionInfo,
    key: string,
    value: string,
    buf_len: number
  ): CallApiReturnType;

  setCameraCapturerConfiguration(
    config: CameraCapturerConfiguration
  ): CallApiReturnType;

  createCustomVideoTrack(): CallApiReturnType;

  createCustomEncodedVideoTrack(
    sender_option: SenderOptions
  ): CallApiReturnType;

  destroyCustomVideoTrack(video_track_id: number): CallApiReturnType;

  destroyCustomEncodedVideoTrack(video_track_id: number): CallApiReturnType;

  switchCamera(): CallApiReturnType;

  isCameraZoomSupported(): CallApiReturnType;

  isCameraFaceDetectSupported(): CallApiReturnType;

  isCameraTorchSupported(): CallApiReturnType;

  isCameraFocusSupported(): CallApiReturnType;

  isCameraAutoFocusFaceModeSupported(): CallApiReturnType;

  setCameraZoomFactor(factor: number): CallApiReturnType;

  enableFaceDetection(enabled: boolean): CallApiReturnType;

  getCameraMaxZoomFactor(): CallApiReturnType;

  setCameraFocusPositionInPreview(
    positionX: number,
    positionY: number
  ): CallApiReturnType;

  setCameraTorchOn(isOn: boolean): CallApiReturnType;

  setCameraAutoFocusFaceModeEnabled(enabled: boolean): CallApiReturnType;

  isCameraExposurePositionSupported(): CallApiReturnType;

  setCameraExposurePosition(
    positionXinView: number,
    positionYinView: number
  ): CallApiReturnType;

  isCameraExposureSupported(): CallApiReturnType;

  setCameraExposureFactor(factor: number): CallApiReturnType;

  isCameraAutoExposureFaceModeSupported(): CallApiReturnType;

  setCameraAutoExposureFaceModeEnabled(enabled: boolean): CallApiReturnType;

  setDefaultAudioRouteToSpeakerphone(
    defaultToSpeaker: boolean
  ): CallApiReturnType;

  setEnableSpeakerphone(speakerOn: boolean): CallApiReturnType;

  isSpeakerphoneEnabled(): CallApiReturnType;

  setRouteInCommunicationMode(route: number): CallApiReturnType;

  getScreenCaptureSources(
    thumbSize: SIZE,
    iconSize: SIZE,
    includeScreen: boolean
  ): CallApiReturnType;

  setAudioSessionOperationRestriction(
    restriction: AUDIO_SESSION_OPERATION_RESTRICTION
  ): CallApiReturnType;

  startScreenCaptureByDisplayId(
    displayId: number,
    regionRect: Rectangle,
    captureParams: ScreenCaptureParameters
  ): CallApiReturnType;

  startScreenCaptureByScreenRect(
    screenRect: Rectangle,
    regionRect: Rectangle,
    captureParams: ScreenCaptureParameters
  ): CallApiReturnType;

  getAudioDeviceInfo(deviceInfo: DeviceInfo): CallApiReturnType;

  startScreenCaptureByWindowId(
    windowId: any,
    regionRect: Rectangle,
    captureParams: ScreenCaptureParameters
  ): CallApiReturnType;

  setScreenCaptureContentHint(
    contentHint: VIDEO_CONTENT_HINT
  ): CallApiReturnType;

  updateScreenCaptureRegion(regionRect: Rectangle): CallApiReturnType;

  updateScreenCaptureParameters(
    captureParams: ScreenCaptureParameters
  ): CallApiReturnType;

  startScreenCapture(
    captureParams: ScreenCaptureParameters2
  ): CallApiReturnType;

  updateScreenCapture(
    captureParams: ScreenCaptureParameters2
  ): CallApiReturnType;

  queryScreenCaptureCapability(): CallApiReturnType;

  setScreenCaptureScenario(
    screenScenario: SCREEN_SCENARIO_TYPE
  ): CallApiReturnType;

  stopScreenCapture(): CallApiReturnType;

  getCallId(callId: string): CallApiReturnType;

  rate(callId: string, rating: number, description: string): CallApiReturnType;

  complain(callId: string, description: string): CallApiReturnType;

  startRtmpStreamWithoutTranscoding(url: string): CallApiReturnType;

  startRtmpStreamWithTranscoding(
    url: string,
    transcoding: LiveTranscoding
  ): CallApiReturnType;

  updateRtmpTranscoding(transcoding: LiveTranscoding): CallApiReturnType;

  stopRtmpStream(url: string): CallApiReturnType;

  startLocalVideoTranscoder(
    config: LocalTranscoderConfiguration
  ): CallApiReturnType;

  updateLocalTranscoderConfiguration(
    config: LocalTranscoderConfiguration
  ): CallApiReturnType;

  stopLocalVideoTranscoder(): CallApiReturnType;

  startCameraCapture(
    sourceType: VIDEO_SOURCE_TYPE,
    config: CameraCapturerConfiguration
  ): CallApiReturnType;

  stopCameraCapture(sourceType: VIDEO_SOURCE_TYPE): CallApiReturnType;

  setCameraDeviceOrientation(
    type: VIDEO_SOURCE_TYPE,
    orientation: VIDEO_ORIENTATION
  ): CallApiReturnType;

  setScreenCaptureOrientation(
    type: VIDEO_SOURCE_TYPE,
    orientation: VIDEO_ORIENTATION
  ): CallApiReturnType;

  startScreenCapture2(
    sourceType: VIDEO_SOURCE_TYPE,
    config: ScreenCaptureConfiguration
  ): CallApiReturnType;

  stopScreenCapture2(sourceType: VIDEO_SOURCE_TYPE): CallApiReturnType;

  getConnectionState(): CallApiReturnType;

  registerEventHandler(eventHandler: IRtcEngineEventHandler): CallApiReturnType;

  unregisterEventHandler(
    eventHandler: IRtcEngineEventHandler
  ): CallApiReturnType;

  setRemoteUserPriority(
    uid: number,
    userPriority: PRIORITY_TYPE
  ): CallApiReturnType;

  setEncryptionMode(encryptionMode: string): CallApiReturnType;

  setEncryptionSecret(secret: string): CallApiReturnType;

  enableEncryption(
    enabled: boolean,
    config: EncryptionConfig
  ): CallApiReturnType;

  createDataStream(
    streamId: number[],
    reliable: boolean,
    ordered: boolean
  ): CallApiReturnType;

  createDataStream2(
    streamId: number[],
    config: DataStreamConfig
  ): CallApiReturnType;

  sendStreamMessage(
    streamId: number,
    data: string,
    length: number
  ): CallApiReturnType;

  addVideoWatermark(watermark: RtcImage): CallApiReturnType;

  addVideoWatermark2(
    watermarkUrl: string,
    options: WatermarkOptions
  ): CallApiReturnType;

  clearVideoWatermarks(): CallApiReturnType;

  pauseAudio(): CallApiReturnType;

  resumeAudio(): CallApiReturnType;

  enableWebSdkInteroperability(enabled: boolean): CallApiReturnType;

  sendCustomReportMessage(
    id: string,
    category: string,
    event: string,
    label: string,
    value: number
  ): CallApiReturnType;

  registerMediaMetadataObserver(
    observer: IMetadataObserver,
    type: METADATA_TYPE
  ): CallApiReturnType;

  unregisterMediaMetadataObserver(
    observer: IMetadataObserver,
    type: METADATA_TYPE
  ): CallApiReturnType;

  startAudioFrameDump(
    channel_id: string,
    user_id: number,
    location: string,
    uuid: string,
    passwd: string,
    duration_ms: number,
    auto_upload: boolean
  ): CallApiReturnType;

  stopAudioFrameDump(
    channel_id: string,
    user_id: number,
    location: string
  ): CallApiReturnType;

  setAINSMode(enabled: boolean, mode: AUDIO_AINS_MODE): CallApiReturnType;

  registerLocalUserAccount(
    appId: string,
    userAccount: string
  ): CallApiReturnType;

  joinChannelWithUserAccount(
    token: string,
    channelId: string,
    userAccount: string
  ): CallApiReturnType;

  joinChannelWithUserAccount2(
    token: string,
    channelId: string,
    userAccount: string,
    options: ChannelMediaOptions
  ): CallApiReturnType;

  joinChannelWithUserAccountEx(
    token: string,
    channelId: string,
    userAccount: string,
    options: ChannelMediaOptions
  ): CallApiReturnType;

  getUserInfoByUserAccount(
    userAccount: string,
    userInfo: UserInfo[]
  ): CallApiReturnType;

  getUserInfoByUid(uid: number, userInfo: UserInfo[]): CallApiReturnType;

  startOrUpdateChannelMediaRelay(
    configuration: ChannelMediaRelayConfiguration
  ): CallApiReturnType;

  startChannelMediaRelay(
    configuration: ChannelMediaRelayConfiguration
  ): CallApiReturnType;

  updateChannelMediaRelay(
    configuration: ChannelMediaRelayConfiguration
  ): CallApiReturnType;

  stopChannelMediaRelay(): CallApiReturnType;

  pauseAllChannelMediaRelay(): CallApiReturnType;

  resumeAllChannelMediaRelay(): CallApiReturnType;

  setDirectCdnStreamingAudioConfiguration(
    profile: AUDIO_PROFILE_TYPE
  ): CallApiReturnType;

  setDirectCdnStreamingVideoConfiguration(
    config: VideoEncoderConfiguration
  ): CallApiReturnType;

  startDirectCdnStreaming(
    eventHandler: IDirectCdnStreamingEventHandler,
    publishUrl: string,
    options: DirectCdnStreamingMediaOptions
  ): CallApiReturnType;

  stopDirectCdnStreaming(): CallApiReturnType;

  updateDirectCdnStreamingMediaOptions(
    options: DirectCdnStreamingMediaOptions
  ): CallApiReturnType;

  startRhythmPlayer(
    sound1: string,
    sound2: string,
    config: AgoraRhythmPlayerConfig
  ): CallApiReturnType;

  stopRhythmPlayer(): CallApiReturnType;

  configRhythmPlayer(config: AgoraRhythmPlayerConfig): CallApiReturnType;

  takeSnapshot(uid: number, filePath: string): CallApiReturnType;

  enableContentInspect(
    enabled: boolean,
    config: ContentInspectConfig
  ): CallApiReturnType;

  adjustCustomAudioPublishVolume(
    trackId: number,
    volume: number
  ): CallApiReturnType;

  adjustCustomAudioPlayoutVolume(
    trackId: number,
    volume: number
  ): CallApiReturnType;

  setCloudProxy(proxyType: CLOUD_PROXY_TYPE): CallApiReturnType;

  setLocalAccessPoint(config: LocalAccessPointConfiguration): CallApiReturnType;

  setAdvancedAudioOptions(
    options: AdvancedAudioOptions,
    sourceType: number
  ): CallApiReturnType;

  setAVSyncSource(channelId: string, uid: number): CallApiReturnType;

  enableVideoImageSource(
    enable: boolean,
    options: ImageTrackOptions
  ): CallApiReturnType;

  getCurrentMonotonicTimeInMs(): CallApiReturnType;

  enableWirelessAccelerate(enabled: boolean): CallApiReturnType;

  getNetworkType(): CallApiReturnType;

  setParameters(parameters: string): CallApiReturnType;

  startMediaRenderingTracing(): CallApiReturnType;

  enableInstantMediaRendering(): CallApiReturnType;

  getNtpWallTimeInMs(): CallApiReturnType;

  isFeatureAvailableOnDevice(type: FeatureType): CallApiReturnType;
}

export enum QUALITY_REPORT_FORMAT_TYPE {
  QUALITY_REPORT_JSON = 0,
  QUALITY_REPORT_HTML = 1,
}

export enum MEDIA_DEVICE_STATE_TYPE {
  MEDIA_DEVICE_STATE_IDLE = 0,
  MEDIA_DEVICE_STATE_ACTIVE = 1,
  MEDIA_DEVICE_STATE_DISABLED = 2,
  MEDIA_DEVICE_STATE_NOT_PRESENT = 4,
  MEDIA_DEVICE_STATE_UNPLUGGED = 8,
}

export enum VIDEO_PROFILE_TYPE {
  VIDEO_PROFILE_LANDSCAPE_120P = 0,
  VIDEO_PROFILE_LANDSCAPE_120P_3 = 2,
  VIDEO_PROFILE_LANDSCAPE_180P = 10,
  VIDEO_PROFILE_LANDSCAPE_180P_3 = 12,
  VIDEO_PROFILE_LANDSCAPE_180P_4 = 13,
  VIDEO_PROFILE_LANDSCAPE_240P = 20,
  VIDEO_PROFILE_LANDSCAPE_240P_3 = 22,
  VIDEO_PROFILE_LANDSCAPE_240P_4 = 23,
  VIDEO_PROFILE_LANDSCAPE_360P = 30,
  VIDEO_PROFILE_LANDSCAPE_360P_3 = 32,
  VIDEO_PROFILE_LANDSCAPE_360P_4 = 33,
  VIDEO_PROFILE_LANDSCAPE_360P_6 = 35,
  VIDEO_PROFILE_LANDSCAPE_360P_7 = 36,
  VIDEO_PROFILE_LANDSCAPE_360P_8 = 37,
  VIDEO_PROFILE_LANDSCAPE_360P_9 = 38,
  VIDEO_PROFILE_LANDSCAPE_360P_10 = 39,
  VIDEO_PROFILE_LANDSCAPE_360P_11 = 100,
  VIDEO_PROFILE_LANDSCAPE_480P = 40,
  VIDEO_PROFILE_LANDSCAPE_480P_3 = 42,
  VIDEO_PROFILE_LANDSCAPE_480P_4 = 43,
  VIDEO_PROFILE_LANDSCAPE_480P_6 = 45,
  VIDEO_PROFILE_LANDSCAPE_480P_8 = 47,
  VIDEO_PROFILE_LANDSCAPE_480P_9 = 48,
  VIDEO_PROFILE_LANDSCAPE_480P_10 = 49,
  VIDEO_PROFILE_LANDSCAPE_720P = 50,
  VIDEO_PROFILE_LANDSCAPE_720P_3 = 52,
  VIDEO_PROFILE_LANDSCAPE_720P_5 = 54,
  VIDEO_PROFILE_LANDSCAPE_720P_6 = 55,
  VIDEO_PROFILE_LANDSCAPE_1080P = 60,
  VIDEO_PROFILE_LANDSCAPE_1080P_3 = 62,
  VIDEO_PROFILE_LANDSCAPE_1080P_5 = 64,
  VIDEO_PROFILE_LANDSCAPE_1440P = 66,
  VIDEO_PROFILE_LANDSCAPE_1440P_2 = 67,
  VIDEO_PROFILE_LANDSCAPE_4K = 70,
  VIDEO_PROFILE_LANDSCAPE_4K_3 = 72,
  VIDEO_PROFILE_PORTRAIT_120P = 1000,
  VIDEO_PROFILE_PORTRAIT_120P_3 = 1002,
  VIDEO_PROFILE_PORTRAIT_180P = 1010,
  VIDEO_PROFILE_PORTRAIT_180P_3 = 1012,
  VIDEO_PROFILE_PORTRAIT_180P_4 = 1013,
  VIDEO_PROFILE_PORTRAIT_240P = 1020,
  VIDEO_PROFILE_PORTRAIT_240P_3 = 1022,
  VIDEO_PROFILE_PORTRAIT_240P_4 = 1023,
  VIDEO_PROFILE_PORTRAIT_360P = 1030,
  VIDEO_PROFILE_PORTRAIT_360P_3 = 1032,
  VIDEO_PROFILE_PORTRAIT_360P_4 = 1033,
  VIDEO_PROFILE_PORTRAIT_360P_6 = 1035,
  VIDEO_PROFILE_PORTRAIT_360P_7 = 1036,
  VIDEO_PROFILE_PORTRAIT_360P_8 = 1037,
  VIDEO_PROFILE_PORTRAIT_360P_9 = 1038,
  VIDEO_PROFILE_PORTRAIT_360P_10 = 1039,
  VIDEO_PROFILE_PORTRAIT_360P_11 = 1100,
  VIDEO_PROFILE_PORTRAIT_480P = 1040,
  VIDEO_PROFILE_PORTRAIT_480P_3 = 1042,
  VIDEO_PROFILE_PORTRAIT_480P_4 = 1043,
  VIDEO_PROFILE_PORTRAIT_480P_6 = 1045,
  VIDEO_PROFILE_PORTRAIT_480P_8 = 1047,
  VIDEO_PROFILE_PORTRAIT_480P_9 = 1048,
  VIDEO_PROFILE_PORTRAIT_480P_10 = 1049,
  VIDEO_PROFILE_PORTRAIT_720P = 1050,
  VIDEO_PROFILE_PORTRAIT_720P_3 = 1052,
  VIDEO_PROFILE_PORTRAIT_720P_5 = 1054,
  VIDEO_PROFILE_PORTRAIT_720P_6 = 1055,
  VIDEO_PROFILE_PORTRAIT_1080P = 1060,
  VIDEO_PROFILE_PORTRAIT_1080P_3 = 1062,
  VIDEO_PROFILE_PORTRAIT_1080P_5 = 1064,
  VIDEO_PROFILE_PORTRAIT_1440P = 1066,
  VIDEO_PROFILE_PORTRAIT_1440P_2 = 1067,
  VIDEO_PROFILE_PORTRAIT_4K = 1070,
  VIDEO_PROFILE_PORTRAIT_4K_3 = 1072,
  VIDEO_PROFILE_DEFAULT = 30,
}
