/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  AudioFrame,
  AudioPcmFrame,
  AudioSpectrumData,
  ERROR_CODE_TYPE,
  EncodedVideoFrameInfo,
  RecorderErrorCode,
  RecorderInfo,
  RecorderState,
  UserAudioSpectrumInfo,
  VIDEO_SOURCE_TYPE,
  VideoFrame,
} from '@iris/native-rtc';
import { ApiParam } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { AgoraConsole } from '../util/AgoraConsole';

export class IAudioPcmFrameSink {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onFrame(frame: AudioPcmFrame): void {
    AgoraConsole.warn(
      'AudioPcmFrameSink_onFrame not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IAudioFrameObserverBase {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onRecordAudioFrame(channelId: string, audioFrame: AudioFrame): void {
    AgoraConsole.warn('AudioFrameObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPlaybackAudioFrame(channelId: string, audioFrame: AudioFrame): void {
    AgoraConsole.warn('AudioFrameObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onMixedAudioFrame(channelId: string, audioFrame: AudioFrame): void {
    AgoraConsole.warn('AudioFrameObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onEarMonitoringAudioFrame(audioFrame: AudioFrame): void {
    AgoraConsole.warn('AudioFrameObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPlaybackAudioFrameBeforeMixing2(
    channelId: string,
    userId: string,
    audioFrame: AudioFrame
  ): void {
    AgoraConsole.warn('AudioFrameObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IAudioFrameObserver extends IAudioFrameObserverBase {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    super(engine);
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onPlaybackAudioFrameBeforeMixing(
    channelId: string,
    uid: number,
    audioFrame: AudioFrame
  ): void {
    AgoraConsole.warn(
      'AudioFrameObserver_onPlaybackAudioFrameBeforeMixing not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRecordAudioFrame(channelId: string, audioFrame: AudioFrame): void {
    AgoraConsole.warn('AudioFrameObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPlaybackAudioFrame(channelId: string, audioFrame: AudioFrame): void {
    AgoraConsole.warn('AudioFrameObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onMixedAudioFrame(channelId: string, audioFrame: AudioFrame): void {
    AgoraConsole.warn('AudioFrameObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onEarMonitoringAudioFrame(audioFrame: AudioFrame): void {
    AgoraConsole.warn('AudioFrameObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPlaybackAudioFrameBeforeMixing2(
    channelId: string,
    userId: string,
    audioFrame: AudioFrame
  ): void {
    AgoraConsole.warn('AudioFrameObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IAudioSpectrumObserver {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onLocalAudioSpectrum(data: AudioSpectrumData): void {
    AgoraConsole.warn(
      'AudioSpectrumObserver_onLocalAudioSpectrum not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteAudioSpectrum(
    spectrums: UserAudioSpectrumInfo[],
    spectrumNumber: number
  ): void {
    AgoraConsole.warn(
      'AudioSpectrumObserver_onRemoteAudioSpectrum not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IVideoEncodedFrameObserver {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onEncodedVideoFrameReceived(
    uid: number,
    imageBuffer: Uint8Array,
    length: number,
    videoEncodedFrameInfo: EncodedVideoFrameInfo
  ): void {
    AgoraConsole.warn(
      'VideoEncodedFrameObserver_onEncodedVideoFrameReceived not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IVideoFrameObserver {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onCaptureVideoFrame(
    sourceType: VIDEO_SOURCE_TYPE,
    videoFrame: VideoFrame
  ): void {
    AgoraConsole.warn(
      'VideoFrameObserver_onCaptureVideoFrame not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPreEncodeVideoFrame(
    sourceType: VIDEO_SOURCE_TYPE,
    videoFrame: VideoFrame
  ): void {
    AgoraConsole.warn(
      'VideoFrameObserver_onPreEncodeVideoFrame not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onMediaPlayerVideoFrame(videoFrame: VideoFrame, mediaPlayerId: number): void {
    AgoraConsole.warn(
      'VideoFrameObserver_onMediaPlayerVideoFrame not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRenderVideoFrame(
    channelId: string,
    remoteUid: number,
    videoFrame: VideoFrame
  ): void {
    AgoraConsole.warn(
      'VideoFrameObserver_onRenderVideoFrame not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onTranscodedVideoFrame(videoFrame: VideoFrame): void {
    AgoraConsole.warn(
      'VideoFrameObserver_onTranscodedVideoFrame not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getVideoFrameProcessMode(): void {
    AgoraConsole.warn('VideoFrameObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getVideoFormatPreference(): void {
    AgoraConsole.warn('VideoFrameObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getRotationApplied(): void {
    AgoraConsole.warn('VideoFrameObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getMirrorApplied(): void {
    AgoraConsole.warn('VideoFrameObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getObservedFramePosition(): void {
    AgoraConsole.warn('VideoFrameObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IMediaRecorderObserver {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onRecorderStateChanged(
    channelId: string,
    uid: number,
    state: RecorderState,
    error: RecorderErrorCode
  ): void {
    AgoraConsole.warn(
      'MediaRecorderObserver_onRecorderStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRecorderInfoUpdated(
    channelId: string,
    uid: number,
    info: RecorderInfo
  ): void {
    AgoraConsole.warn(
      'MediaRecorderObserver_onRecorderInfoUpdated not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}
