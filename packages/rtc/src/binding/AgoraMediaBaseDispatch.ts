/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  AudioFrame,
  AudioPcmFrame,
  AudioSpectrumData,
  EncodedVideoFrameInfo,
  RecorderErrorCode,
  RecorderInfo,
  RecorderState,
  UserAudioSpectrumInfo,
  VIDEO_SOURCE_TYPE,
  VideoFrame,
} from '@iris/native-rtc-binding';
import { EventParam } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { AgoraConsole } from '../util/AgoraConsole';

export class IAudioPcmFrameSink {
  classPrefix: string = 'AudioPcmFrameSink_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: EventParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onFrame(frame: AudioPcmFrame[]): void {
    let _obj = {
      frame,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onFrame');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(`onFrame eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }
}

export class IAudioFrameObserverBase {
  classPrefix: string = 'AudioFrameObserverBase_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: EventParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onRecordAudioFrame(channelId: string, audioFrame: AudioFrame): void {
    let _obj = {
      channelId,
      audioFrame,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onRecordAudioFrame');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onRecordAudioFrame eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onPlaybackAudioFrame(channelId: string, audioFrame: AudioFrame): void {
    let _obj = {
      channelId,
      audioFrame,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onPlaybackAudioFrame');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onPlaybackAudioFrame eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onMixedAudioFrame(channelId: string, audioFrame: AudioFrame): void {
    let _obj = {
      channelId,
      audioFrame,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onMixedAudioFrame');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onMixedAudioFrame eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onEarMonitoringAudioFrame(audioFrame: AudioFrame): void {
    let _obj = {
      audioFrame,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onEarMonitoringAudioFrame');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onEarMonitoringAudioFrame eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }
}

export class IAudioFrameObserver extends IAudioFrameObserverBase {
  classPrefix: string = 'AudioFrameObserver_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    super(engine);
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: EventParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onPlaybackAudioFrameBeforeMixing(
    channelId: string,
    uid: number,
    audioFrame: AudioFrame
  ): void {
    let _obj = {
      channelId,
      uid,
      audioFrame,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onPlaybackAudioFrameBeforeMixing');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onPlaybackAudioFrameBeforeMixing eventParam ${JSON.stringify(
        eventParam
      )}`
    );
    this.notifyEvent(eventParam);
  }
}

export class IAudioSpectrumObserver {
  classPrefix: string = 'AudioSpectrumObserver_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: EventParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onLocalAudioSpectrum(data: AudioSpectrumData): void {
    let _obj = {
      data,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onLocalAudioSpectrum');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onLocalAudioSpectrum eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onRemoteAudioSpectrum(
    spectrums: UserAudioSpectrumInfo[],
    spectrumNumber: number
  ): void {
    let _obj = {
      spectrums,
      spectrumNumber,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onRemoteAudioSpectrum');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onRemoteAudioSpectrum eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }
}

export class IVideoEncodedFrameObserver {
  classPrefix: string = 'VideoEncodedFrameObserver_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: EventParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onEncodedVideoFrameReceived(
    uid: number,
    imageBuffer: Uint8Array,
    length: number,
    videoEncodedFrameInfo: EncodedVideoFrameInfo
  ): void {
    let _obj = {
      uid,
      imageBuffer,
      length,
      videoEncodedFrameInfo,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onEncodedVideoFrameReceived');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onEncodedVideoFrameReceived eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }
}

export class IVideoFrameObserver {
  classPrefix: string = 'VideoFrameObserver_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: EventParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onCaptureVideoFrame(
    sourceType: VIDEO_SOURCE_TYPE,
    videoFrame: VideoFrame
  ): void {
    let _obj = {
      sourceType,
      videoFrame,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onCaptureVideoFrame');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onCaptureVideoFrame eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onPreEncodeVideoFrame(
    sourceType: VIDEO_SOURCE_TYPE,
    videoFrame: VideoFrame
  ): void {
    let _obj = {
      sourceType,
      videoFrame,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onPreEncodeVideoFrame');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onPreEncodeVideoFrame eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onMediaPlayerVideoFrame(videoFrame: VideoFrame, mediaPlayerId: number): void {
    let _obj = {
      videoFrame,
      mediaPlayerId,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onMediaPlayerVideoFrame');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onMediaPlayerVideoFrame eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onRenderVideoFrame(
    channelId: string,
    remoteUid: number,
    videoFrame: VideoFrame
  ): void {
    let _obj = {
      channelId,
      remoteUid,
      videoFrame,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onRenderVideoFrame');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onRenderVideoFrame eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onTranscodedVideoFrame(videoFrame: VideoFrame): void {
    let _obj = {
      videoFrame,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onTranscodedVideoFrame');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onTranscodedVideoFrame eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }
}

export class IMediaRecorderObserver {
  classPrefix: string = 'MediaRecorderObserver_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: EventParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onRecorderStateChanged(
    channelId: string,
    uid: number,
    state: RecorderState,
    error: RecorderErrorCode
  ): void {
    let _obj = {
      channelId,
      uid,
      state,
      error,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onRecorderStateChanged');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onRecorderStateChanged eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onRecorderInfoUpdated(
    channelId: string,
    uid: number,
    info: RecorderInfo
  ): void {
    let _obj = {
      channelId,
      uid,
      info,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onRecorderInfoUpdated');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onRecorderInfoUpdated eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }
}
