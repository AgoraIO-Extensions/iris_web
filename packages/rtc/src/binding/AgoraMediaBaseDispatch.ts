/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  AudioFrame,
  AudioPcmFrame,
  AudioSpectrumData,
  ERROR_CODE_TYPE,
  EncodedVideoFrameInfo,
  IVideoFrameMetaInfo,
  RecorderInfo,
  RecorderReasonCode,
  RecorderState,
  UserAudioSpectrumInfo,
  VIDEO_SOURCE_TYPE,
  VideoFrame,
} from '@iris/native-rtc';
import { ApiParam, CallApiReturnType } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { AgoraConsole } from '../util/AgoraConsole';

export class IVideoFrameMetaInfoDispatch implements IVideoFrameMetaInfo {
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }
  // @ts-ignore
  getMetaInfoStr_c81192f(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'VideoFrameMetaInfo_getMetaInfoStr_c81192f not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IAudioPcmFrameSink {
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onFrame_95f515a(frame: AudioPcmFrame): void {
    AgoraConsole.warn(
      'AudioPcmFrameSink_onFrame_95f515a not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IAudioFrameObserverBase {
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onRecordAudioFrame_4c8de15(channelId: string, audioFrame: AudioFrame): void {
    AgoraConsole.warn(
      'AudioFrameObserver_onRecordAudioFrame_4c8de15 not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPlaybackAudioFrame_4c8de15(
    channelId: string,
    audioFrame: AudioFrame
  ): void {
    AgoraConsole.warn(
      'AudioFrameObserver_onPlaybackAudioFrame_4c8de15 not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onMixedAudioFrame_4c8de15(channelId: string, audioFrame: AudioFrame): void {
    AgoraConsole.warn(
      'AudioFrameObserver_onMixedAudioFrame_4c8de15 not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onEarMonitoringAudioFrame_5405a47(audioFrame: AudioFrame): void {
    AgoraConsole.warn(
      'AudioFrameObserver_onEarMonitoringAudioFrame_5405a47 not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPlaybackAudioFrameBeforeMixing_9215cc7(
    channelId: string,
    userId: string,
    audioFrame: AudioFrame
  ): void {
    AgoraConsole.warn(
      'AudioFrameObserver_onPlaybackAudioFrameBeforeMixing_9215cc7 not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getObservedAudioFramePosition(): void {
    AgoraConsole.warn(
      'AudioFrameObserver_getObservedAudioFramePosition not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getPlaybackAudioParams(): void {
    AgoraConsole.warn(
      'AudioFrameObserver_getPlaybackAudioParams not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getRecordAudioParams(): void {
    AgoraConsole.warn(
      'AudioFrameObserver_getRecordAudioParams not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getMixedAudioParams(): void {
    AgoraConsole.warn(
      'AudioFrameObserver_getMixedAudioParams not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getEarMonitoringAudioParams(): void {
    AgoraConsole.warn(
      'AudioFrameObserver_getEarMonitoringAudioParams not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IAudioFrameObserver extends IAudioFrameObserverBase {
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    super(engine);
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onPlaybackAudioFrameBeforeMixing_85ec0fc(
    channelId: string,
    uid: number,
    audioFrame: AudioFrame
  ): void {
    AgoraConsole.warn(
      'AudioFrameObserver_onPlaybackAudioFrameBeforeMixing_85ec0fc not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRecordAudioFrame_4c8de15(channelId: string, audioFrame: AudioFrame): void {
    AgoraConsole.warn(
      'AudioFrameObserver_onRecordAudioFrame_4c8de15 not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPlaybackAudioFrame_4c8de15(
    channelId: string,
    audioFrame: AudioFrame
  ): void {
    AgoraConsole.warn(
      'AudioFrameObserver_onPlaybackAudioFrame_4c8de15 not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onMixedAudioFrame_4c8de15(channelId: string, audioFrame: AudioFrame): void {
    AgoraConsole.warn(
      'AudioFrameObserver_onMixedAudioFrame_4c8de15 not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onEarMonitoringAudioFrame_5405a47(audioFrame: AudioFrame): void {
    AgoraConsole.warn(
      'AudioFrameObserver_onEarMonitoringAudioFrame_5405a47 not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPlaybackAudioFrameBeforeMixing_9215cc7(
    channelId: string,
    userId: string,
    audioFrame: AudioFrame
  ): void {
    AgoraConsole.warn(
      'AudioFrameObserver_onPlaybackAudioFrameBeforeMixing_9215cc7 not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getObservedAudioFramePosition(): void {
    AgoraConsole.warn(
      'AudioFrameObserver_getObservedAudioFramePosition not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getPlaybackAudioParams(): void {
    AgoraConsole.warn(
      'AudioFrameObserver_getPlaybackAudioParams not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getRecordAudioParams(): void {
    AgoraConsole.warn(
      'AudioFrameObserver_getRecordAudioParams not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getMixedAudioParams(): void {
    AgoraConsole.warn(
      'AudioFrameObserver_getMixedAudioParams not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getEarMonitoringAudioParams(): void {
    AgoraConsole.warn(
      'AudioFrameObserver_getEarMonitoringAudioParams not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IAudioSpectrumObserver {
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onLocalAudioSpectrum_5822fed(data: AudioSpectrumData): void {
    AgoraConsole.warn(
      'AudioSpectrumObserver_onLocalAudioSpectrum_5822fed not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteAudioSpectrum_8ea2cde(
    spectrums: UserAudioSpectrumInfo[],
    spectrumNumber: number
  ): void {
    AgoraConsole.warn(
      'AudioSpectrumObserver_onRemoteAudioSpectrum_8ea2cde not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IVideoEncodedFrameObserver {
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onEncodedVideoFrameReceived_6922697(
    uid: number,
    imageBuffer: Uint8Array,
    length: number,
    videoEncodedFrameInfo: EncodedVideoFrameInfo
  ): void {
    AgoraConsole.warn(
      'VideoEncodedFrameObserver_onEncodedVideoFrameReceived_6922697 not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IVideoFrameObserver {
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onCaptureVideoFrame_1673590(
    sourceType: VIDEO_SOURCE_TYPE,
    videoFrame: VideoFrame
  ): void {
    AgoraConsole.warn(
      'VideoFrameObserver_onCaptureVideoFrame_1673590 not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPreEncodeVideoFrame_1673590(
    sourceType: VIDEO_SOURCE_TYPE,
    videoFrame: VideoFrame
  ): void {
    AgoraConsole.warn(
      'VideoFrameObserver_onPreEncodeVideoFrame_1673590 not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onMediaPlayerVideoFrame_e648e2c(
    videoFrame: VideoFrame,
    mediaPlayerId: number
  ): void {
    AgoraConsole.warn(
      'VideoFrameObserver_onMediaPlayerVideoFrame_e648e2c not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRenderVideoFrame_43dcf82(
    channelId: string,
    remoteUid: number,
    videoFrame: VideoFrame
  ): void {
    AgoraConsole.warn(
      'VideoFrameObserver_onRenderVideoFrame_43dcf82 not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onTranscodedVideoFrame_27754d8(videoFrame: VideoFrame): void {
    AgoraConsole.warn(
      'VideoFrameObserver_onTranscodedVideoFrame_27754d8 not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getVideoFrameProcessMode(): void {
    AgoraConsole.warn(
      'VideoFrameObserver_getVideoFrameProcessMode not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getVideoFormatPreference(): void {
    AgoraConsole.warn(
      'VideoFrameObserver_getVideoFormatPreference not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getRotationApplied(): void {
    AgoraConsole.warn(
      'VideoFrameObserver_getRotationApplied not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getMirrorApplied(): void {
    AgoraConsole.warn(
      'VideoFrameObserver_getMirrorApplied not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getObservedFramePosition(): void {
    AgoraConsole.warn(
      'VideoFrameObserver_getObservedFramePosition not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IMediaRecorderObserver {
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onRecorderStateChanged_c38849f(
    channelId: string,
    uid: number,
    state: RecorderState,
    reason: RecorderReasonCode
  ): void {
    AgoraConsole.warn(
      'MediaRecorderObserver_onRecorderStateChanged_c38849f not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRecorderInfoUpdated_64fa74a(
    channelId: string,
    uid: number,
    info: RecorderInfo
  ): void {
    AgoraConsole.warn(
      'MediaRecorderObserver_onRecorderInfoUpdated_64fa74a not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}
