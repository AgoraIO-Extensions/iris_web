/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  AudioFrame,
  AudioPcmFrame,
  AudioSpectrumData,
  ERROR_CODE_TYPE,
  EncodedVideoFrameInfo,
  RecorderErrorCode,
  RecorderInfo,
  RecorderState,
  UserAudioSpectrumInfo,
  VIDEO_SOURCE_TYPE,
  VideoFrame,
} from '@iris/native-rtc-binding';
import { ApiParam } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { AgoraConsole } from '../util/AgoraConsole';

export class IAudioPcmFrameSink {
  classPrefix: string = 'AudioPcmFrameSink_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onFrame(frame: AudioPcmFrame[]): void {
    AgoraConsole.warn('onFrame not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IAudioFrameObserverBase {
  classPrefix: string = 'AudioFrameObserverBase_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onRecordAudioFrame(channelId: string, audioFrame: AudioFrame): void {
    AgoraConsole.warn('onRecordAudioFrame not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPlaybackAudioFrame(channelId: string, audioFrame: AudioFrame): void {
    AgoraConsole.warn('onPlaybackAudioFrame not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onMixedAudioFrame(channelId: string, audioFrame: AudioFrame): void {
    AgoraConsole.warn('onMixedAudioFrame not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onEarMonitoringAudioFrame(audioFrame: AudioFrame): void {
    AgoraConsole.warn(
      'onEarMonitoringAudioFrame not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IAudioFrameObserver extends IAudioFrameObserverBase {
  classPrefix: string = 'AudioFrameObserver_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    super(engine);
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onPlaybackAudioFrameBeforeMixing(
    channelId: string,
    uid: number,
    audioFrame: AudioFrame
  ): void {
    AgoraConsole.warn(
      'onPlaybackAudioFrameBeforeMixing not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IAudioSpectrumObserver {
  classPrefix: string = 'AudioSpectrumObserver_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onLocalAudioSpectrum(data: AudioSpectrumData): void {
    AgoraConsole.warn('onLocalAudioSpectrum not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteAudioSpectrum(
    spectrums: UserAudioSpectrumInfo[],
    spectrumNumber: number
  ): void {
    AgoraConsole.warn('onRemoteAudioSpectrum not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IVideoEncodedFrameObserver {
  classPrefix: string = 'VideoEncodedFrameObserver_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onEncodedVideoFrameReceived(
    uid: number,
    imageBuffer: Uint8Array,
    length: number,
    videoEncodedFrameInfo: EncodedVideoFrameInfo
  ): void {
    AgoraConsole.warn(
      'onEncodedVideoFrameReceived not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IVideoFrameObserver {
  classPrefix: string = 'VideoFrameObserver_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onCaptureVideoFrame(
    sourceType: VIDEO_SOURCE_TYPE,
    videoFrame: VideoFrame
  ): void {
    AgoraConsole.warn('onCaptureVideoFrame not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPreEncodeVideoFrame(
    sourceType: VIDEO_SOURCE_TYPE,
    videoFrame: VideoFrame
  ): void {
    AgoraConsole.warn('onPreEncodeVideoFrame not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onMediaPlayerVideoFrame(videoFrame: VideoFrame, mediaPlayerId: number): void {
    AgoraConsole.warn(
      'onMediaPlayerVideoFrame not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRenderVideoFrame(
    channelId: string,
    remoteUid: number,
    videoFrame: VideoFrame
  ): void {
    AgoraConsole.warn('onRenderVideoFrame not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onTranscodedVideoFrame(videoFrame: VideoFrame): void {
    AgoraConsole.warn('onTranscodedVideoFrame not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IMediaRecorderObserver {
  classPrefix: string = 'MediaRecorderObserver_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onRecorderStateChanged(
    channelId: string,
    uid: number,
    state: RecorderState,
    error: RecorderErrorCode
  ): void {
    AgoraConsole.warn('onRecorderStateChanged not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRecorderInfoUpdated(
    channelId: string,
    uid: number,
    info: RecorderInfo
  ): void {
    AgoraConsole.warn('onRecorderInfoUpdated not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}
