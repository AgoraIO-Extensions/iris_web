/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  BaseSpatialAudioEngineImpl,
  IBaseSpatialAudioEngine,
  ILocalSpatialAudioEngine,
} from '@iris/rtc';
import { ApiParam, CallApiReturnType } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { LocalSpatialAudioEngineImpl } from '../impl/LocalSpatialAudioEngineImpl';

export class IBaseSpatialAudioEngineDispatch {
  private _impl: IBaseSpatialAudioEngine;

  constructor(engine: IrisRtcEngine) {
    this._impl = new BaseSpatialAudioEngineImpl(engine);
  }
  release(): CallApiReturnType {
    return this._impl.release();
  }

  setMaxAudioRecvCount(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let maxCount = obj.maxCount;
    if (maxCount === undefined) throw 'maxCount is undefined';

    return this._impl.setMaxAudioRecvCount(maxCount);
  }

  setAudioRecvRange(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let range = obj.range;
    if (range === undefined) throw 'range is undefined';

    return this._impl.setAudioRecvRange(range);
  }

  setDistanceUnit(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let unit = obj.unit;
    if (unit === undefined) throw 'unit is undefined';

    return this._impl.setDistanceUnit(unit);
  }

  updateSelfPosition(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let position = obj.position;
    if (position === undefined) throw 'position is undefined';
    let axisForward = obj.axisForward;
    if (axisForward === undefined) throw 'axisForward is undefined';
    let axisRight = obj.axisRight;
    if (axisRight === undefined) throw 'axisRight is undefined';
    let axisUp = obj.axisUp;
    if (axisUp === undefined) throw 'axisUp is undefined';

    return this._impl.updateSelfPosition(
      position,
      axisForward,
      axisRight,
      axisUp
    );
  }

  updateSelfPositionEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let position = obj.position;
    if (position === undefined) throw 'position is undefined';
    let axisForward = obj.axisForward;
    if (axisForward === undefined) throw 'axisForward is undefined';
    let axisRight = obj.axisRight;
    if (axisRight === undefined) throw 'axisRight is undefined';
    let axisUp = obj.axisUp;
    if (axisUp === undefined) throw 'axisUp is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.updateSelfPositionEx(
      position,
      axisForward,
      axisRight,
      axisUp,
      connection
    );
  }

  updatePlayerPositionInfo(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let playerId = obj.playerId;
    if (playerId === undefined) throw 'playerId is undefined';
    let positionInfo = obj.positionInfo;
    if (positionInfo === undefined) throw 'positionInfo is undefined';

    return this._impl.updatePlayerPositionInfo(playerId, positionInfo);
  }

  setParameters(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let params = obj.params;
    if (params === undefined) throw 'params is undefined';

    return this._impl.setParameters(params);
  }

  muteLocalAudioStream(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';

    return this._impl.muteLocalAudioStream(mute);
  }

  muteAllRemoteAudioStreams(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';

    return this._impl.muteAllRemoteAudioStreams(mute);
  }

  setZones(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let zones = obj.zones;
    if (zones === undefined) throw 'zones is undefined';
    let zoneCount = obj.zoneCount;
    if (zoneCount === undefined) throw 'zoneCount is undefined';

    return this._impl.setZones(zones, zoneCount);
  }

  setPlayerAttenuation(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let playerId = obj.playerId;
    if (playerId === undefined) throw 'playerId is undefined';
    let attenuation = obj.attenuation;
    if (attenuation === undefined) throw 'attenuation is undefined';
    let forceSet = obj.forceSet;
    if (forceSet === undefined) throw 'forceSet is undefined';

    return this._impl.setPlayerAttenuation(playerId, attenuation, forceSet);
  }

  muteRemoteAudioStream(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';

    return this._impl.muteRemoteAudioStream(uid, mute);
  }
}
export class ILocalSpatialAudioEngineDispatch {
  private _impl: ILocalSpatialAudioEngine;

  constructor(engine: IrisRtcEngine) {
    this._impl = new LocalSpatialAudioEngineImpl(engine);
  }
  initialize(): CallApiReturnType {
    return this._impl.initialize();
  }

  updateRemotePosition(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let posInfo = obj.posInfo;
    if (posInfo === undefined) throw 'posInfo is undefined';

    return this._impl.updateRemotePosition(uid, posInfo);
  }

  updateRemotePositionEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let posInfo = obj.posInfo;
    if (posInfo === undefined) throw 'posInfo is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.updateRemotePositionEx(uid, posInfo, connection);
  }

  removeRemotePosition(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';

    return this._impl.removeRemotePosition(uid);
  }

  removeRemotePositionEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.removeRemotePositionEx(uid, connection);
  }

  clearRemotePositions(): CallApiReturnType {
    return this._impl.clearRemotePositions();
  }

  clearRemotePositionsEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.clearRemotePositionsEx(connection);
  }

  setRemoteAudioAttenuation(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let attenuation = obj.attenuation;
    if (attenuation === undefined) throw 'attenuation is undefined';
    let forceSet = obj.forceSet;
    if (forceSet === undefined) throw 'forceSet is undefined';

    return this._impl.setRemoteAudioAttenuation(uid, attenuation, forceSet);
  }
}
