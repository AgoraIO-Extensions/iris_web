/// Generated by terra, DO NOT MODIFY BY HAND.

import { ERROR_CODE_TYPE, IRtcEngineEx } from '@iris/native-rtc';
import { ApiParam, CallApiReturnType } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { callApiBufferExtension } from '../extensions/CallApiBufferExtensions';
import { IRtcEngineExImpl } from '../impl/IAgoraRtcEngineExImpl';
import { AgoraConsole } from '../util/AgoraConsole';

import { IRtcEngineDispatch } from './IAgoraRtcEngineDispatch';

export class IRtcEngineExDispatch extends IRtcEngineDispatch
  implements IRtcEngineEx {
  // @ts-ignore
  _impl: IRtcEngineExImpl;
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    super(engine);
    this._impl = new IRtcEngineExImpl(engine);
    this._engine = engine;
  }
  // @ts-ignore
  joinChannelEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) {
      AgoraConsole.error('token is undefined');
      throw 'token is undefined';
    }
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }
    let options = obj.options;
    if (options === undefined) {
      AgoraConsole.error('options is undefined');
      throw 'options is undefined';
    }

    return this._impl.joinChannelEx(token, connection, options);
  }

  // @ts-ignore
  leaveChannelEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }

    return this._impl.leaveChannelEx(connection);
  }

  // @ts-ignore
  leaveChannelEx2(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }
    let options = obj.options;
    if (options === undefined) {
      AgoraConsole.error('options is undefined');
      throw 'options is undefined';
    }

    return this._impl.leaveChannelEx2(connection, options);
  }

  // @ts-ignore
  updateChannelMediaOptionsEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let options = obj.options;
    if (options === undefined) {
      AgoraConsole.error('options is undefined');
      throw 'options is undefined';
    }
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }

    return this._impl.updateChannelMediaOptionsEx(options, connection);
  }

  // @ts-ignore
  setVideoEncoderConfigurationEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_setVideoEncoderConfigurationEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setupRemoteVideoEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let canvas = obj.canvas;
    if (canvas === undefined) {
      AgoraConsole.error('canvas is undefined');
      throw 'canvas is undefined';
    }
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }

    return this._impl.setupRemoteVideoEx(canvas, connection);
  }

  // @ts-ignore
  muteRemoteAudioStreamEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) {
      AgoraConsole.error('uid is undefined');
      throw 'uid is undefined';
    }
    let mute = obj.mute;
    if (mute === undefined) {
      AgoraConsole.error('mute is undefined');
      throw 'mute is undefined';
    }
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }

    return this._impl.muteRemoteAudioStreamEx(uid, mute, connection);
  }

  // @ts-ignore
  muteRemoteVideoStreamEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) {
      AgoraConsole.error('uid is undefined');
      throw 'uid is undefined';
    }
    let mute = obj.mute;
    if (mute === undefined) {
      AgoraConsole.error('mute is undefined');
      throw 'mute is undefined';
    }
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }

    return this._impl.muteRemoteVideoStreamEx(uid, mute, connection);
  }

  // @ts-ignore
  setRemoteVideoStreamTypeEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_setRemoteVideoStreamTypeEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  muteLocalAudioStreamEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) {
      AgoraConsole.error('mute is undefined');
      throw 'mute is undefined';
    }
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }

    return this._impl.muteLocalAudioStreamEx(mute, connection);
  }

  // @ts-ignore
  muteLocalVideoStreamEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) {
      AgoraConsole.error('mute is undefined');
      throw 'mute is undefined';
    }
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }

    return this._impl.muteLocalVideoStreamEx(mute, connection);
  }

  // @ts-ignore
  muteAllRemoteAudioStreamsEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) {
      AgoraConsole.error('mute is undefined');
      throw 'mute is undefined';
    }
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }

    return this._impl.muteAllRemoteAudioStreamsEx(mute, connection);
  }

  // @ts-ignore
  muteAllRemoteVideoStreamsEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) {
      AgoraConsole.error('mute is undefined');
      throw 'mute is undefined';
    }
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }

    return this._impl.muteAllRemoteVideoStreamsEx(mute, connection);
  }

  // @ts-ignore
  setSubscribeAudioBlocklistEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_setSubscribeAudioBlocklistEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setSubscribeAudioAllowlistEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_setSubscribeAudioAllowlistEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setSubscribeVideoBlocklistEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_setSubscribeVideoBlocklistEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setSubscribeVideoAllowlistEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_setSubscribeVideoAllowlistEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRemoteVideoSubscriptionOptionsEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_setRemoteVideoSubscriptionOptionsEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRemoteVoicePositionEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_setRemoteVoicePositionEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRemoteUserSpatialAudioParamsEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_setRemoteUserSpatialAudioParamsEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRemoteRenderModeEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) {
      AgoraConsole.error('uid is undefined');
      throw 'uid is undefined';
    }
    let renderMode = obj.renderMode;
    if (renderMode === undefined) {
      AgoraConsole.error('renderMode is undefined');
      throw 'renderMode is undefined';
    }
    let mirrorMode = obj.mirrorMode;
    if (mirrorMode === undefined) {
      AgoraConsole.error('mirrorMode is undefined');
      throw 'mirrorMode is undefined';
    }
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }

    return this._impl.setRemoteRenderModeEx(
      uid,
      renderMode,
      mirrorMode,
      connection
    );
  }

  // @ts-ignore
  enableLoopbackRecordingEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_enableLoopbackRecordingEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  adjustRecordingSignalVolumeEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) {
      AgoraConsole.error('volume is undefined');
      throw 'volume is undefined';
    }
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }

    return this._impl.adjustRecordingSignalVolumeEx(volume, connection);
  }

  // @ts-ignore
  muteRecordingSignalEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_muteRecordingSignalEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  adjustUserPlaybackSignalVolumeEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) {
      AgoraConsole.error('uid is undefined');
      throw 'uid is undefined';
    }
    let volume = obj.volume;
    if (volume === undefined) {
      AgoraConsole.error('volume is undefined');
      throw 'volume is undefined';
    }
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }

    return this._impl.adjustUserPlaybackSignalVolumeEx(uid, volume, connection);
  }

  // @ts-ignore
  getConnectionStateEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_getConnectionStateEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableEncryptionEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_enableEncryptionEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  createDataStreamEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_createDataStreamEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  createDataStreamEx2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_createDataStreamEx2 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  sendStreamMessageEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    obj = callApiBufferExtension(apiParam.event, obj, apiParam.buffer);
    let streamId = obj.streamId;
    if (streamId === undefined) {
      AgoraConsole.error('streamId is undefined');
      throw 'streamId is undefined';
    }
    let data = obj.data;
    if (data === undefined) {
      AgoraConsole.error('data is undefined');
      throw 'data is undefined';
    }
    let length = obj.length;
    if (length === undefined) {
      AgoraConsole.error('length is undefined');
      throw 'length is undefined';
    }
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }

    return this._impl.sendStreamMessageEx(streamId, data, length, connection);
  }

  // @ts-ignore
  addVideoWatermarkEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_addVideoWatermarkEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  clearVideoWatermarkEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_clearVideoWatermarkEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  sendCustomReportMessageEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_sendCustomReportMessageEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableAudioVolumeIndicationEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let interval = obj.interval;
    if (interval === undefined) {
      AgoraConsole.error('interval is undefined');
      throw 'interval is undefined';
    }
    let smooth = obj.smooth;
    if (smooth === undefined) {
      AgoraConsole.error('smooth is undefined');
      throw 'smooth is undefined';
    }
    let reportVad = obj.reportVad;
    if (reportVad === undefined) {
      AgoraConsole.error('reportVad is undefined');
      throw 'reportVad is undefined';
    }
    let connection = obj.connection;
    if (connection === undefined) {
      AgoraConsole.error('connection is undefined');
      throw 'connection is undefined';
    }

    return this._impl.enableAudioVolumeIndicationEx(
      interval,
      smooth,
      reportVad,
      connection
    );
  }

  // @ts-ignore
  startRtmpStreamWithoutTranscodingEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_startRtmpStreamWithoutTranscodingEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startRtmpStreamWithTranscodingEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_startRtmpStreamWithTranscodingEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  updateRtmpTranscodingEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_updateRtmpTranscodingEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopRtmpStreamEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_stopRtmpStreamEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startOrUpdateChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_startOrUpdateChannelMediaRelayEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_startChannelMediaRelayEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  updateChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_updateChannelMediaRelayEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_stopChannelMediaRelayEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  pauseAllChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_pauseAllChannelMediaRelayEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  resumeAllChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_resumeAllChannelMediaRelayEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getUserInfoByUserAccountEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_getUserInfoByUserAccountEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getUserInfoByUidEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_getUserInfoByUidEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableDualStreamModeEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_enableDualStreamModeEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setDualStreamModeEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_setDualStreamModeEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setHighPriorityUserListEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_setHighPriorityUserListEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  takeSnapshotEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_takeSnapshotEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableContentInspectEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_enableContentInspectEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startMediaRenderingTracingEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngineEx_startMediaRenderingTracingEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}
