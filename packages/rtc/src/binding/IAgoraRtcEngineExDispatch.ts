/// Generated by terra, DO NOT MODIFY BY HAND.

import { ApiParam, CallApiReturnType, EventParam } from 'iris-web-core';

import {
  AudioVolumeInfo,
  CLIENT_ROLE_CHANGE_FAILED_REASON,
  CLIENT_ROLE_TYPE,
  CONNECTION_CHANGED_REASON_TYPE,
  CONNECTION_STATE_TYPE,
  ClientRoleOptions,
  ENCRYPTION_ERROR_TYPE,
  IRtcEngineEx,
  LICENSE_ERROR_TYPE,
  LOCAL_AUDIO_STREAM_ERROR,
  LOCAL_AUDIO_STREAM_STATE,
  LocalAudioStats,
  MEDIA_TRACE_EVENT,
  NETWORK_TYPE,
  REMOTE_AUDIO_STATE,
  REMOTE_AUDIO_STATE_REASON,
  REMOTE_VIDEO_STATE,
  REMOTE_VIDEO_STATE_REASON,
  RemoteAudioStats,
  RemoteVideoStats,
  RtcConnection,
  RtcStats,
  UPLOAD_ERROR_REASON,
  USER_OFFLINE_REASON_TYPE,
  VIDEO_SOURCE_TYPE,
  VideoRenderingTracingInfo,
  WLACC_MESSAGE_REASON,
  WLACC_SUGGEST_ACTION,
  WlAccStats,
} from 'iris-web-rtc';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { IRtcEngineExImpl } from '../impl/IAgoraRtcEngineExImpl';

export class IRtcEngineEventHandlerEx {
  classPrefix: string = 'IRtcEngineEventHandlerEx_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  private eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  private notifyEvent(param: EventParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onJoinChannelSuccess(connection: RtcConnection, elapsed: number): void {
    let obj = {
      connection,
      elapsed,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onJoinChannelSuccess');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onJoinChannelSuccess eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onRejoinChannelSuccess(connection: RtcConnection, elapsed: number): void {
    let obj = {
      connection,
      elapsed,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onRejoinChannelSuccess');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onRejoinChannelSuccess eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onAudioQuality(
    connection: RtcConnection,
    remoteUid: number,
    quality: number,
    delay: number,
    lost: number
  ): void {
    let obj = {
      connection,
      remoteUid,
      quality,
      delay,
      lost,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onAudioQuality');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onAudioQuality eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onAudioVolumeIndication(
    connection: RtcConnection,
    speakers: AudioVolumeInfo,
    speakerNumber: number,
    totalVolume: number
  ): void {
    let obj = {
      connection,
      speakers,
      speakerNumber,
      totalVolume,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onAudioVolumeIndication');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onAudioVolumeIndication eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onLeaveChannel(connection: RtcConnection, stats: RtcStats): void {
    let obj = {
      connection,
      stats,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onLeaveChannel');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onLeaveChannel eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onRtcStats(connection: RtcConnection, stats: RtcStats): void {
    let obj = {
      connection,
      stats,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onRtcStats');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onRtcStats eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onNetworkQuality(
    connection: RtcConnection,
    remoteUid: number,
    txQuality: number,
    rxQuality: number
  ): void {
    let obj = {
      connection,
      remoteUid,
      txQuality,
      rxQuality,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onNetworkQuality');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onNetworkQuality eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onIntraRequestReceived(connection: RtcConnection): void {
    let obj = {
      connection,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onIntraRequestReceived');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onIntraRequestReceived eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onFirstRemoteVideoDecoded(
    connection: RtcConnection,
    remoteUid: number,
    width: number,
    height: number,
    elapsed: number
  ): void {
    let obj = {
      connection,
      remoteUid,
      width,
      height,
      elapsed,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onFirstRemoteVideoDecoded');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onFirstRemoteVideoDecoded eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onVideoSizeChanged(
    connection: RtcConnection,
    sourceType: VIDEO_SOURCE_TYPE,
    uid: number,
    width: number,
    height: number,
    rotation: number
  ): void {
    let obj = {
      connection,
      sourceType,
      uid,
      width,
      height,
      rotation,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onVideoSizeChanged');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onVideoSizeChanged eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onRemoteVideoStateChanged(
    connection: RtcConnection,
    remoteUid: number,
    state: REMOTE_VIDEO_STATE,
    reason: REMOTE_VIDEO_STATE_REASON,
    elapsed: number
  ): void {
    let obj = {
      connection,
      remoteUid,
      state,
      reason,
      elapsed,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onRemoteVideoStateChanged');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onRemoteVideoStateChanged eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onFirstRemoteVideoFrame(
    connection: RtcConnection,
    remoteUid: number,
    width: number,
    height: number,
    elapsed: number
  ): void {
    let obj = {
      connection,
      remoteUid,
      width,
      height,
      elapsed,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onFirstRemoteVideoFrame');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onFirstRemoteVideoFrame eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onUserJoined(
    connection: RtcConnection,
    remoteUid: number,
    elapsed: number
  ): void {
    let obj = {
      connection,
      remoteUid,
      elapsed,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onUserJoined');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onUserJoined eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onUserOffline(
    connection: RtcConnection,
    remoteUid: number,
    reason: USER_OFFLINE_REASON_TYPE
  ): void {
    let obj = {
      connection,
      remoteUid,
      reason,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onUserOffline');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onUserOffline eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onUserMuteAudio(
    connection: RtcConnection,
    remoteUid: number,
    muted: boolean
  ): void {
    let obj = {
      connection,
      remoteUid,
      muted,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onUserMuteAudio');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onUserMuteAudio eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onUserMuteVideo(
    connection: RtcConnection,
    remoteUid: number,
    muted: boolean
  ): void {
    let obj = {
      connection,
      remoteUid,
      muted,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onUserMuteVideo');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onUserMuteVideo eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onUserEnableVideo(
    connection: RtcConnection,
    remoteUid: number,
    enabled: boolean
  ): void {
    let obj = {
      connection,
      remoteUid,
      enabled,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onUserEnableVideo');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onUserEnableVideo eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onUserEnableLocalVideo(
    connection: RtcConnection,
    remoteUid: number,
    enabled: boolean
  ): void {
    let obj = {
      connection,
      remoteUid,
      enabled,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onUserEnableLocalVideo');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onUserEnableLocalVideo eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onUserStateChanged(
    connection: RtcConnection,
    remoteUid: number,
    state: number
  ): void {
    let obj = {
      connection,
      remoteUid,
      state,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onUserStateChanged');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onUserStateChanged eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onLocalAudioStats(connection: RtcConnection, stats: LocalAudioStats): void {
    let obj = {
      connection,
      stats,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onLocalAudioStats');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onLocalAudioStats eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onRemoteAudioStats(connection: RtcConnection, stats: RemoteAudioStats): void {
    let obj = {
      connection,
      stats,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onRemoteAudioStats');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onRemoteAudioStats eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onRemoteVideoStats(connection: RtcConnection, stats: RemoteVideoStats): void {
    let obj = {
      connection,
      stats,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onRemoteVideoStats');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onRemoteVideoStats eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onConnectionLost(connection: RtcConnection): void {
    let obj = {
      connection,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onConnectionLost');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onConnectionLost eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onConnectionInterrupted(connection: RtcConnection): void {
    let obj = {
      connection,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onConnectionInterrupted');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onConnectionInterrupted eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onConnectionBanned(connection: RtcConnection): void {
    let obj = {
      connection,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onConnectionBanned');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onConnectionBanned eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onStreamMessage(
    connection: RtcConnection,
    remoteUid: number,
    streamId: number,
    data: string,
    length: number,
    sentTs: number
  ): void {
    let obj = {
      connection,
      remoteUid,
      streamId,
      data,
      length,
      sentTs,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onStreamMessage');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onStreamMessage eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onStreamMessageError(
    connection: RtcConnection,
    remoteUid: number,
    streamId: number,
    code: number,
    missed: number,
    cached: number
  ): void {
    let obj = {
      connection,
      remoteUid,
      streamId,
      code,
      missed,
      cached,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onStreamMessageError');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onStreamMessageError eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onRequestToken(connection: RtcConnection): void {
    let obj = {
      connection,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onRequestToken');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onRequestToken eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onLicenseValidationFailure(
    connection: RtcConnection,
    reason: LICENSE_ERROR_TYPE
  ): void {
    let obj = {
      connection,
      reason,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onLicenseValidationFailure');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onLicenseValidationFailure eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onTokenPrivilegeWillExpire(connection: RtcConnection, token: string): void {
    let obj = {
      connection,
      token,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onTokenPrivilegeWillExpire');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onTokenPrivilegeWillExpire eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onFirstLocalAudioFramePublished(
    connection: RtcConnection,
    elapsed: number
  ): void {
    let obj = {
      connection,
      elapsed,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onFirstLocalAudioFramePublished');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onFirstLocalAudioFramePublished eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onFirstRemoteAudioFrame(
    connection: RtcConnection,
    userId: number,
    elapsed: number
  ): void {
    let obj = {
      connection,
      userId,
      elapsed,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onFirstRemoteAudioFrame');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onFirstRemoteAudioFrame eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onFirstRemoteAudioDecoded(
    connection: RtcConnection,
    uid: number,
    elapsed: number
  ): void {
    let obj = {
      connection,
      uid,
      elapsed,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onFirstRemoteAudioDecoded');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onFirstRemoteAudioDecoded eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onLocalAudioStateChanged(
    connection: RtcConnection,
    state: LOCAL_AUDIO_STREAM_STATE,
    error: LOCAL_AUDIO_STREAM_ERROR
  ): void {
    let obj = {
      connection,
      state,
      error,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onLocalAudioStateChanged');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onLocalAudioStateChanged eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onRemoteAudioStateChanged(
    connection: RtcConnection,
    remoteUid: number,
    state: REMOTE_AUDIO_STATE,
    reason: REMOTE_AUDIO_STATE_REASON,
    elapsed: number
  ): void {
    let obj = {
      connection,
      remoteUid,
      state,
      reason,
      elapsed,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onRemoteAudioStateChanged');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onRemoteAudioStateChanged eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onActiveSpeaker(connection: RtcConnection, uid: number): void {
    let obj = {
      connection,
      uid,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onActiveSpeaker');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onActiveSpeaker eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onClientRoleChanged(
    connection: RtcConnection,
    oldRole: CLIENT_ROLE_TYPE,
    newRole: CLIENT_ROLE_TYPE,
    newRoleOptions: ClientRoleOptions
  ): void {
    let obj = {
      connection,
      oldRole,
      newRole,
      newRoleOptions,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onClientRoleChanged');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onClientRoleChanged eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onClientRoleChangeFailed(
    connection: RtcConnection,
    reason: CLIENT_ROLE_CHANGE_FAILED_REASON,
    currentRole: CLIENT_ROLE_TYPE
  ): void {
    let obj = {
      connection,
      reason,
      currentRole,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onClientRoleChangeFailed');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onClientRoleChangeFailed eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onRemoteAudioTransportStats(
    connection: RtcConnection,
    remoteUid: number,
    delay: number,
    lost: number,
    rxKBitRate: number
  ): void {
    let obj = {
      connection,
      remoteUid,
      delay,
      lost,
      rxKBitRate,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onRemoteAudioTransportStats');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onRemoteAudioTransportStats eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onRemoteVideoTransportStats(
    connection: RtcConnection,
    remoteUid: number,
    delay: number,
    lost: number,
    rxKBitRate: number
  ): void {
    let obj = {
      connection,
      remoteUid,
      delay,
      lost,
      rxKBitRate,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onRemoteVideoTransportStats');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onRemoteVideoTransportStats eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onConnectionStateChanged(
    connection: RtcConnection,
    state: CONNECTION_STATE_TYPE,
    reason: CONNECTION_CHANGED_REASON_TYPE
  ): void {
    let obj = {
      connection,
      state,
      reason,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onConnectionStateChanged');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onConnectionStateChanged eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onWlAccMessage(
    connection: RtcConnection,
    reason: WLACC_MESSAGE_REASON,
    action: WLACC_SUGGEST_ACTION,
    wlAccMsg: string
  ): void {
    let obj = {
      connection,
      reason,
      action,
      wlAccMsg,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onWlAccMessage');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onWlAccMessage eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onWlAccStats(
    connection: RtcConnection,
    currentStats: WlAccStats,
    averageStats: WlAccStats
  ): void {
    let obj = {
      connection,
      currentStats,
      averageStats,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onWlAccStats');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onWlAccStats eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onNetworkTypeChanged(connection: RtcConnection, type: NETWORK_TYPE): void {
    let obj = {
      connection,
      type,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onNetworkTypeChanged');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onNetworkTypeChanged eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onEncryptionError(
    connection: RtcConnection,
    errorType: ENCRYPTION_ERROR_TYPE
  ): void {
    let obj = {
      connection,
      errorType,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onEncryptionError');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onEncryptionError eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onUploadLogResult(
    connection: RtcConnection,
    requestId: string,
    success: boolean,
    reason: UPLOAD_ERROR_REASON
  ): void {
    let obj = {
      connection,
      requestId,
      success,
      reason,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onUploadLogResult');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onUploadLogResult eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onUserAccountUpdated(
    connection: RtcConnection,
    remoteUid: number,
    userAccount: string
  ): void {
    let obj = {
      connection,
      remoteUid,
      userAccount,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onUserAccountUpdated');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onUserAccountUpdated eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onSnapshotTaken(
    connection: RtcConnection,
    uid: number,
    filePath: string,
    width: number,
    height: number,
    errCode: number
  ): void {
    let obj = {
      connection,
      uid,
      filePath,
      width,
      height,
      errCode,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onSnapshotTaken');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onSnapshotTaken eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onVideoRenderingTracingResult(
    connection: RtcConnection,
    uid: number,
    currentEvent: MEDIA_TRACE_EVENT,
    tracingInfo: VideoRenderingTracingInfo
  ): void {
    let obj = {
      connection,
      uid,
      currentEvent,
      tracingInfo,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onVideoRenderingTracingResult');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onVideoRenderingTracingResult eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }
}

export class IRtcEngineExDispatch {
  private _impl: IRtcEngineEx;

  constructor(engine: IrisRtcEngine) {
    this._impl = new IRtcEngineExImpl(engine);
  }
  joinChannelEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) throw 'token is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';
    let options = obj.options;
    if (options === undefined) throw 'options is undefined';

    return this._impl.joinChannelEx(token, connection, options);
  }

  leaveChannelEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.leaveChannelEx(connection);
  }

  leaveChannelEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';
    let options = obj.options;
    if (options === undefined) throw 'options is undefined';

    return this._impl.leaveChannelEx(connection, options);
  }

  updateChannelMediaOptionsEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let options = obj.options;
    if (options === undefined) throw 'options is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.updateChannelMediaOptionsEx(options, connection);
  }

  setVideoEncoderConfigurationEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let config = obj.config;
    if (config === undefined) throw 'config is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.setVideoEncoderConfigurationEx(config, connection);
  }

  setupRemoteVideoEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let canvas = obj.canvas;
    if (canvas === undefined) throw 'canvas is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.setupRemoteVideoEx(canvas, connection);
  }

  muteRemoteAudioStreamEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.muteRemoteAudioStreamEx(uid, mute, connection);
  }

  muteRemoteVideoStreamEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.muteRemoteVideoStreamEx(uid, mute, connection);
  }

  setRemoteVideoStreamTypeEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let streamType = obj.streamType;
    if (streamType === undefined) throw 'streamType is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.setRemoteVideoStreamTypeEx(uid, streamType, connection);
  }

  muteLocalAudioStreamEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.muteLocalAudioStreamEx(mute, connection);
  }

  muteLocalVideoStreamEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.muteLocalVideoStreamEx(mute, connection);
  }

  muteAllRemoteAudioStreamsEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.muteAllRemoteAudioStreamsEx(mute, connection);
  }

  muteAllRemoteVideoStreamsEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.muteAllRemoteVideoStreamsEx(mute, connection);
  }

  setSubscribeAudioBlocklistEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uidList = obj.uidList;
    if (uidList === undefined) throw 'uidList is undefined';
    let uidNumber = obj.uidNumber;
    if (uidNumber === undefined) throw 'uidNumber is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.setSubscribeAudioBlocklistEx(
      uidList,
      uidNumber,
      connection
    );
  }

  setSubscribeAudioAllowlistEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uidList = obj.uidList;
    if (uidList === undefined) throw 'uidList is undefined';
    let uidNumber = obj.uidNumber;
    if (uidNumber === undefined) throw 'uidNumber is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.setSubscribeAudioAllowlistEx(
      uidList,
      uidNumber,
      connection
    );
  }

  setSubscribeVideoBlocklistEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uidList = obj.uidList;
    if (uidList === undefined) throw 'uidList is undefined';
    let uidNumber = obj.uidNumber;
    if (uidNumber === undefined) throw 'uidNumber is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.setSubscribeVideoBlocklistEx(
      uidList,
      uidNumber,
      connection
    );
  }

  setSubscribeVideoAllowlistEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uidList = obj.uidList;
    if (uidList === undefined) throw 'uidList is undefined';
    let uidNumber = obj.uidNumber;
    if (uidNumber === undefined) throw 'uidNumber is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.setSubscribeVideoAllowlistEx(
      uidList,
      uidNumber,
      connection
    );
  }

  setRemoteVideoSubscriptionOptionsEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let options = obj.options;
    if (options === undefined) throw 'options is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.setRemoteVideoSubscriptionOptionsEx(
      uid,
      options,
      connection
    );
  }

  setRemoteVoicePositionEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let pan = obj.pan;
    if (pan === undefined) throw 'pan is undefined';
    let gain = obj.gain;
    if (gain === undefined) throw 'gain is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.setRemoteVoicePositionEx(uid, pan, gain, connection);
  }

  setRemoteUserSpatialAudioParamsEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let params = obj.params;
    if (params === undefined) throw 'params is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.setRemoteUserSpatialAudioParamsEx(
      uid,
      params,
      connection
    );
  }

  setRemoteRenderModeEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let renderMode = obj.renderMode;
    if (renderMode === undefined) throw 'renderMode is undefined';
    let mirrorMode = obj.mirrorMode;
    if (mirrorMode === undefined) throw 'mirrorMode is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.setRemoteRenderModeEx(
      uid,
      renderMode,
      mirrorMode,
      connection
    );
  }

  enableLoopbackRecordingEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';
    let enabled = obj.enabled;
    if (enabled === undefined) throw 'enabled is undefined';
    let deviceName = obj.deviceName;
    if (deviceName === undefined) throw 'deviceName is undefined';

    return this._impl.enableLoopbackRecordingEx(
      connection,
      enabled,
      deviceName
    );
  }

  adjustRecordingSignalVolumeEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw 'volume is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.adjustRecordingSignalVolumeEx(volume, connection);
  }

  muteRecordingSignalEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.muteRecordingSignalEx(mute, connection);
  }

  adjustUserPlaybackSignalVolumeEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let volume = obj.volume;
    if (volume === undefined) throw 'volume is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.adjustUserPlaybackSignalVolumeEx(uid, volume, connection);
  }

  getConnectionStateEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.getConnectionStateEx(connection);
  }

  enableEncryptionEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';
    let enabled = obj.enabled;
    if (enabled === undefined) throw 'enabled is undefined';
    let config = obj.config;
    if (config === undefined) throw 'config is undefined';

    return this._impl.enableEncryptionEx(connection, enabled, config);
  }

  createDataStreamEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let streamId = obj.streamId;
    if (streamId === undefined) throw 'streamId is undefined';
    let reliable = obj.reliable;
    if (reliable === undefined) throw 'reliable is undefined';
    let ordered = obj.ordered;
    if (ordered === undefined) throw 'ordered is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.createDataStreamEx(
      streamId,
      reliable,
      ordered,
      connection
    );
  }

  createDataStreamEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let streamId = obj.streamId;
    if (streamId === undefined) throw 'streamId is undefined';
    let config = obj.config;
    if (config === undefined) throw 'config is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.createDataStreamEx(streamId, config, connection);
  }

  sendStreamMessageEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let streamId = obj.streamId;
    if (streamId === undefined) throw 'streamId is undefined';
    let data = obj.data;
    if (data === undefined) throw 'data is undefined';
    let length = obj.length;
    if (length === undefined) throw 'length is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.sendStreamMessageEx(streamId, data, length, connection);
  }

  addVideoWatermarkEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let watermarkUrl = obj.watermarkUrl;
    if (watermarkUrl === undefined) throw 'watermarkUrl is undefined';
    let options = obj.options;
    if (options === undefined) throw 'options is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.addVideoWatermarkEx(watermarkUrl, options, connection);
  }

  clearVideoWatermarkEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.clearVideoWatermarkEx(connection);
  }

  sendCustomReportMessageEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let id = obj.id;
    if (id === undefined) throw 'id is undefined';
    let category = obj.category;
    if (category === undefined) throw 'category is undefined';
    let event = obj.event;
    if (event === undefined) throw 'event is undefined';
    let label = obj.label;
    if (label === undefined) throw 'label is undefined';
    let value = obj.value;
    if (value === undefined) throw 'value is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.sendCustomReportMessageEx(
      id,
      category,
      event,
      label,
      value,
      connection
    );
  }

  enableAudioVolumeIndicationEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let interval = obj.interval;
    if (interval === undefined) throw 'interval is undefined';
    let smooth = obj.smooth;
    if (smooth === undefined) throw 'smooth is undefined';
    let reportVad = obj.reportVad;
    if (reportVad === undefined) throw 'reportVad is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.enableAudioVolumeIndicationEx(
      interval,
      smooth,
      reportVad,
      connection
    );
  }

  startRtmpStreamWithoutTranscodingEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let url = obj.url;
    if (url === undefined) throw 'url is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.startRtmpStreamWithoutTranscodingEx(url, connection);
  }

  startRtmpStreamWithTranscodingEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let url = obj.url;
    if (url === undefined) throw 'url is undefined';
    let transcoding = obj.transcoding;
    if (transcoding === undefined) throw 'transcoding is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.startRtmpStreamWithTranscodingEx(
      url,
      transcoding,
      connection
    );
  }

  updateRtmpTranscodingEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let transcoding = obj.transcoding;
    if (transcoding === undefined) throw 'transcoding is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.updateRtmpTranscodingEx(transcoding, connection);
  }

  stopRtmpStreamEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let url = obj.url;
    if (url === undefined) throw 'url is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.stopRtmpStreamEx(url, connection);
  }

  startOrUpdateChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let configuration = obj.configuration;
    if (configuration === undefined) throw 'configuration is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.startOrUpdateChannelMediaRelayEx(
      configuration,
      connection
    );
  }

  startChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let configuration = obj.configuration;
    if (configuration === undefined) throw 'configuration is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.startChannelMediaRelayEx(configuration, connection);
  }

  updateChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let configuration = obj.configuration;
    if (configuration === undefined) throw 'configuration is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.updateChannelMediaRelayEx(configuration, connection);
  }

  stopChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.stopChannelMediaRelayEx(connection);
  }

  pauseAllChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.pauseAllChannelMediaRelayEx(connection);
  }

  resumeAllChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.resumeAllChannelMediaRelayEx(connection);
  }

  getUserInfoByUserAccountEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let userAccount = obj.userAccount;
    if (userAccount === undefined) throw 'userAccount is undefined';
    let userInfo = obj.userInfo;
    if (userInfo === undefined) throw 'userInfo is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.getUserInfoByUserAccountEx(
      userAccount,
      userInfo,
      connection
    );
  }

  getUserInfoByUidEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let userInfo = obj.userInfo;
    if (userInfo === undefined) throw 'userInfo is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.getUserInfoByUidEx(uid, userInfo, connection);
  }

  enableDualStreamModeEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw 'enabled is undefined';
    let streamConfig = obj.streamConfig;
    if (streamConfig === undefined) throw 'streamConfig is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.enableDualStreamModeEx(enabled, streamConfig, connection);
  }

  setDualStreamModeEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mode = obj.mode;
    if (mode === undefined) throw 'mode is undefined';
    let streamConfig = obj.streamConfig;
    if (streamConfig === undefined) throw 'streamConfig is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.setDualStreamModeEx(mode, streamConfig, connection);
  }

  setHighPriorityUserListEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uidList = obj.uidList;
    if (uidList === undefined) throw 'uidList is undefined';
    let uidNum = obj.uidNum;
    if (uidNum === undefined) throw 'uidNum is undefined';
    let option = obj.option;
    if (option === undefined) throw 'option is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.setHighPriorityUserListEx(
      uidList,
      uidNum,
      option,
      connection
    );
  }

  takeSnapshotEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let filePath = obj.filePath;
    if (filePath === undefined) throw 'filePath is undefined';

    return this._impl.takeSnapshotEx(connection, uid, filePath);
  }

  startMediaRenderingTracingEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.startMediaRenderingTracingEx(connection);
  }
}
