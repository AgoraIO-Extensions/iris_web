/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  AudioVolumeInfo,
  CLIENT_ROLE_CHANGE_FAILED_REASON,
  CLIENT_ROLE_TYPE,
  CONNECTION_CHANGED_REASON_TYPE,
  CONNECTION_STATE_TYPE,
  ClientRoleOptions,
  ENCRYPTION_ERROR_TYPE,
  ERROR_CODE_TYPE,
  LICENSE_ERROR_TYPE,
  LOCAL_AUDIO_STREAM_ERROR,
  LOCAL_AUDIO_STREAM_STATE,
  LocalAudioStats,
  MEDIA_TRACE_EVENT,
  NETWORK_TYPE,
  REMOTE_AUDIO_STATE,
  REMOTE_AUDIO_STATE_REASON,
  REMOTE_VIDEO_STATE,
  REMOTE_VIDEO_STATE_REASON,
  RemoteAudioStats,
  RemoteVideoStats,
  RtcConnection,
  RtcStats,
  UPLOAD_ERROR_REASON,
  USER_OFFLINE_REASON_TYPE,
  VIDEO_SOURCE_TYPE,
  VideoRenderingTracingInfo,
  WLACC_MESSAGE_REASON,
  WLACC_SUGGEST_ACTION,
  WlAccStats,
} from '@iris/native-rtc-binding';
import { ApiParam, CallApiReturnType, EventParam } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { IRtcEngineExImpl } from '../impl/IAgoraRtcEngineExImpl';
import { AgoraConsole } from '../util/AgoraConsole';

import { IRtcEngineEventHandler } from './IAgoraRtcEngineDispatch';

export class IRtcEngineEventHandlerEx extends IRtcEngineEventHandler {
  classPrefix: string = 'RtcEngineEventHandler_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    super(engine);
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: EventParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onJoinChannelSuccessEx(connection: RtcConnection, elapsed: number): void {
    let _obj = {
      connection,
      elapsed,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onJoinChannelSuccessEx');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onJoinChannelSuccessEx eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onRejoinChannelSuccessEx(connection: RtcConnection, elapsed: number): void {
    AgoraConsole.warn('onRejoinChannelSuccess not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioQualityEx(
    connection: RtcConnection,
    remoteUid: number,
    quality: number,
    delay: number,
    lost: number
  ): void {
    AgoraConsole.warn('onAudioQuality not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioVolumeIndicationEx(
    connection: RtcConnection,
    speakers: AudioVolumeInfo[],
    speakerNumber: number,
    totalVolume: number
  ): void {
    AgoraConsole.warn(
      'onAudioVolumeIndication not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLeaveChannelEx(connection: RtcConnection, stats: RtcStats): void {
    let _obj = {
      connection,
      stats,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onLeaveChannelEx');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onLeaveChannelEx eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onRtcStatsEx(connection: RtcConnection, stats: RtcStats): void {
    AgoraConsole.warn('onRtcStats not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onNetworkQualityEx(
    connection: RtcConnection,
    remoteUid: number,
    txQuality: number,
    rxQuality: number
  ): void {
    AgoraConsole.warn('onNetworkQuality not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onIntraRequestReceivedEx(connection: RtcConnection): void {
    AgoraConsole.warn('onIntraRequestReceived not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteVideoDecodedEx(
    connection: RtcConnection,
    remoteUid: number,
    width: number,
    height: number,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'onFirstRemoteVideoDecoded not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onVideoSizeChangedEx(
    connection: RtcConnection,
    sourceType: VIDEO_SOURCE_TYPE,
    uid: number,
    width: number,
    height: number,
    rotation: number
  ): void {
    AgoraConsole.warn('onVideoSizeChanged not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteVideoStateChangedEx(
    connection: RtcConnection,
    remoteUid: number,
    state: REMOTE_VIDEO_STATE,
    reason: REMOTE_VIDEO_STATE_REASON,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'onRemoteVideoStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteVideoFrameEx(
    connection: RtcConnection,
    remoteUid: number,
    width: number,
    height: number,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'onFirstRemoteVideoFrame not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserJoinedEx(
    connection: RtcConnection,
    remoteUid: number,
    elapsed: number
  ): void {
    let _obj = {
      connection,
      remoteUid,
      elapsed,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onUserJoinedEx');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(`onUserJoinedEx eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onUserOfflineEx(
    connection: RtcConnection,
    remoteUid: number,
    reason: USER_OFFLINE_REASON_TYPE
  ): void {
    let _obj = {
      connection,
      remoteUid,
      reason,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onUserOfflineEx');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onUserOfflineEx eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onUserMuteAudioEx(
    connection: RtcConnection,
    remoteUid: number,
    muted: boolean
  ): void {
    AgoraConsole.warn('onUserMuteAudio not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserMuteVideoEx(
    connection: RtcConnection,
    remoteUid: number,
    muted: boolean
  ): void {
    AgoraConsole.warn('onUserMuteVideo not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserEnableVideoEx(
    connection: RtcConnection,
    remoteUid: number,
    enabled: boolean
  ): void {
    AgoraConsole.warn('onUserEnableVideo not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserEnableLocalVideoEx(
    connection: RtcConnection,
    remoteUid: number,
    enabled: boolean
  ): void {
    AgoraConsole.warn('onUserEnableLocalVideo not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserStateChangedEx(
    connection: RtcConnection,
    remoteUid: number,
    state: number
  ): void {
    AgoraConsole.warn('onUserStateChanged not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalAudioStatsEx(connection: RtcConnection, stats: LocalAudioStats): void {
    AgoraConsole.warn('onLocalAudioStats not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteAudioStatsEx(
    connection: RtcConnection,
    stats: RemoteAudioStats
  ): void {
    AgoraConsole.warn('onRemoteAudioStats not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteVideoStatsEx(
    connection: RtcConnection,
    stats: RemoteVideoStats
  ): void {
    AgoraConsole.warn('onRemoteVideoStats not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionLostEx(connection: RtcConnection): void {
    AgoraConsole.warn('onConnectionLost not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionInterruptedEx(connection: RtcConnection): void {
    AgoraConsole.warn(
      'onConnectionInterrupted not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionBannedEx(connection: RtcConnection): void {
    AgoraConsole.warn('onConnectionBanned not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onStreamMessageEx(
    connection: RtcConnection,
    remoteUid: number,
    streamId: number,
    data: string,
    length: number,
    sentTs: number
  ): void {
    AgoraConsole.warn('onStreamMessage not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onStreamMessageErrorEx(
    connection: RtcConnection,
    remoteUid: number,
    streamId: number,
    code: number,
    missed: number,
    cached: number
  ): void {
    AgoraConsole.warn('onStreamMessageError not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRequestTokenEx(connection: RtcConnection): void {
    AgoraConsole.warn('onRequestToken not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLicenseValidationFailureEx(
    connection: RtcConnection,
    reason: LICENSE_ERROR_TYPE
  ): void {
    AgoraConsole.warn(
      'onLicenseValidationFailure not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onTokenPrivilegeWillExpireEx(connection: RtcConnection, token: string): void {
    AgoraConsole.warn(
      'onTokenPrivilegeWillExpire not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstLocalAudioFramePublishedEx(
    connection: RtcConnection,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'onFirstLocalAudioFramePublished not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteAudioFrameEx(
    connection: RtcConnection,
    userId: number,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'onFirstRemoteAudioFrame not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteAudioDecodedEx(
    connection: RtcConnection,
    uid: number,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'onFirstRemoteAudioDecoded not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalAudioStateChangedEx(
    connection: RtcConnection,
    state: LOCAL_AUDIO_STREAM_STATE,
    error: LOCAL_AUDIO_STREAM_ERROR
  ): void {
    AgoraConsole.warn(
      'onLocalAudioStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteAudioStateChangedEx(
    connection: RtcConnection,
    remoteUid: number,
    state: REMOTE_AUDIO_STATE,
    reason: REMOTE_AUDIO_STATE_REASON,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'onRemoteAudioStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onActiveSpeakerEx(connection: RtcConnection, uid: number): void {
    AgoraConsole.warn('onActiveSpeaker not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onClientRoleChangedEx(
    connection: RtcConnection,
    oldRole: CLIENT_ROLE_TYPE,
    newRole: CLIENT_ROLE_TYPE,
    newRoleOptions: ClientRoleOptions
  ): void {
    AgoraConsole.warn('onClientRoleChanged not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onClientRoleChangeFailedEx(
    connection: RtcConnection,
    reason: CLIENT_ROLE_CHANGE_FAILED_REASON,
    currentRole: CLIENT_ROLE_TYPE
  ): void {
    AgoraConsole.warn(
      'onClientRoleChangeFailed not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteAudioTransportStatsEx(
    connection: RtcConnection,
    remoteUid: number,
    delay: number,
    lost: number,
    rxKBitRate: number
  ): void {
    AgoraConsole.warn(
      'onRemoteAudioTransportStats not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteVideoTransportStatsEx(
    connection: RtcConnection,
    remoteUid: number,
    delay: number,
    lost: number,
    rxKBitRate: number
  ): void {
    AgoraConsole.warn(
      'onRemoteVideoTransportStats not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionStateChangedEx(
    connection: RtcConnection,
    state: CONNECTION_STATE_TYPE,
    reason: CONNECTION_CHANGED_REASON_TYPE
  ): void {
    AgoraConsole.warn(
      'onConnectionStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onWlAccMessageEx(
    connection: RtcConnection,
    reason: WLACC_MESSAGE_REASON,
    action: WLACC_SUGGEST_ACTION,
    wlAccMsg: string
  ): void {
    AgoraConsole.warn('onWlAccMessage not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onWlAccStatsEx(
    connection: RtcConnection,
    currentStats: WlAccStats,
    averageStats: WlAccStats
  ): void {
    AgoraConsole.warn('onWlAccStats not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onNetworkTypeChangedEx(connection: RtcConnection, type: NETWORK_TYPE): void {
    AgoraConsole.warn('onNetworkTypeChanged not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onEncryptionErrorEx(
    connection: RtcConnection,
    errorType: ENCRYPTION_ERROR_TYPE
  ): void {
    AgoraConsole.warn('onEncryptionError not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUploadLogResultEx(
    connection: RtcConnection,
    requestId: string,
    success: boolean,
    reason: UPLOAD_ERROR_REASON
  ): void {
    AgoraConsole.warn('onUploadLogResult not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserAccountUpdatedEx(
    connection: RtcConnection,
    remoteUid: number,
    userAccount: string
  ): void {
    AgoraConsole.warn('onUserAccountUpdated not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onSnapshotTakenEx(
    connection: RtcConnection,
    uid: number,
    filePath: string,
    width: number,
    height: number,
    errCode: number
  ): void {
    AgoraConsole.warn('onSnapshotTaken not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onVideoRenderingTracingResultEx(
    connection: RtcConnection,
    uid: number,
    currentEvent: MEDIA_TRACE_EVENT,
    tracingInfo: VideoRenderingTracingInfo
  ): void {
    AgoraConsole.warn(
      'onVideoRenderingTracingResult not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IRtcEngineExDispatch {
  _impl: IRtcEngineExImpl;
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._impl = new IRtcEngineExImpl(engine);
    this._engine = engine;
  }
  joinChannelEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) throw 'token is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';
    let options = obj.options;
    if (options === undefined) throw 'options is undefined';

    return this._impl.joinChannelEx(token, connection, options);
  }

  leaveChannelEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.leaveChannelEx(connection);
  }

  leaveChannelEx2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('leaveChannelEx2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  updateChannelMediaOptionsEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let options = obj.options;
    if (options === undefined) throw 'options is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.updateChannelMediaOptionsEx(options, connection);
  }

  setVideoEncoderConfigurationEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setVideoEncoderConfigurationEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setupRemoteVideoEx(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let canvas = obj.canvas;
    if (canvas === undefined) throw 'canvas is undefined';
    let connection = obj.connection;
    if (connection === undefined) throw 'connection is undefined';

    return this._impl.setupRemoteVideoEx(canvas, connection);
  }

  muteRemoteAudioStreamEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'muteRemoteAudioStreamEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  muteRemoteVideoStreamEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'muteRemoteVideoStreamEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setRemoteVideoStreamTypeEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setRemoteVideoStreamTypeEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  muteLocalAudioStreamEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('muteLocalAudioStreamEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  muteLocalVideoStreamEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('muteLocalVideoStreamEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  muteAllRemoteAudioStreamsEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'muteAllRemoteAudioStreamsEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  muteAllRemoteVideoStreamsEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'muteAllRemoteVideoStreamsEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setSubscribeAudioBlocklistEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setSubscribeAudioBlocklistEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setSubscribeAudioAllowlistEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setSubscribeAudioAllowlistEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setSubscribeVideoBlocklistEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setSubscribeVideoBlocklistEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setSubscribeVideoAllowlistEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setSubscribeVideoAllowlistEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setRemoteVideoSubscriptionOptionsEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setRemoteVideoSubscriptionOptionsEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setRemoteVoicePositionEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setRemoteVoicePositionEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setRemoteUserSpatialAudioParamsEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setRemoteUserSpatialAudioParamsEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setRemoteRenderModeEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setRemoteRenderModeEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableLoopbackRecordingEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'enableLoopbackRecordingEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  adjustRecordingSignalVolumeEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'adjustRecordingSignalVolumeEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  muteRecordingSignalEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('muteRecordingSignalEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  adjustUserPlaybackSignalVolumeEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'adjustUserPlaybackSignalVolumeEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getConnectionStateEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getConnectionStateEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableEncryptionEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableEncryptionEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  createDataStreamEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('createDataStreamEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  createDataStreamEx2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('createDataStreamEx2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  sendStreamMessageEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('sendStreamMessageEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  addVideoWatermarkEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('addVideoWatermarkEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  clearVideoWatermarkEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('clearVideoWatermarkEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  sendCustomReportMessageEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'sendCustomReportMessageEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableAudioVolumeIndicationEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'enableAudioVolumeIndicationEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startRtmpStreamWithoutTranscodingEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'startRtmpStreamWithoutTranscodingEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startRtmpStreamWithTranscodingEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'startRtmpStreamWithTranscodingEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  updateRtmpTranscodingEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'updateRtmpTranscodingEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopRtmpStreamEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('stopRtmpStreamEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startOrUpdateChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'startOrUpdateChannelMediaRelayEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'startChannelMediaRelayEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  updateChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'updateChannelMediaRelayEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'stopChannelMediaRelayEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  pauseAllChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'pauseAllChannelMediaRelayEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  resumeAllChannelMediaRelayEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'resumeAllChannelMediaRelayEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getUserInfoByUserAccountEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'getUserInfoByUserAccountEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getUserInfoByUidEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getUserInfoByUidEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableDualStreamModeEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableDualStreamModeEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setDualStreamModeEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setDualStreamModeEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setHighPriorityUserListEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setHighPriorityUserListEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  takeSnapshotEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('takeSnapshotEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableContentInspectEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableContentInspectEx not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startMediaRenderingTracingEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'startMediaRenderingTracingEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}
