/// Generated by terra, DO NOT MODIFY BY HAND.

import { EventParam } from 'iris-web-core';

import {
  MEDIA_PLAYER_ERROR,
  MEDIA_PLAYER_EVENT,
  MEDIA_PLAYER_STATE,
  PLAYER_PRELOAD_EVENT,
  PlayerUpdatedInfo,
  SrcInfo,
} from 'iris-web-rtc';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';

export class MediaPlayerSourceObserver {
  classPrefix: string = 'MediaPlayerSourceObserver_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  private eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  private notifyEvent(param: EventParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onPlayerSourceStateChanged(
    state: MEDIA_PLAYER_STATE,
    ec: MEDIA_PLAYER_ERROR
  ): void {
    let obj = {
      state,
      ec,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onPlayerSourceStateChanged');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onPlayerSourceStateChanged eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onPositionChanged(position_ms: number): void {
    let obj = {
      position_ms,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onPositionChanged');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onPositionChanged eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onPlayerEvent(
    eventCode: MEDIA_PLAYER_EVENT,
    elapsedTime: number,
    message: string
  ): void {
    let obj = {
      eventCode,
      elapsedTime,
      message,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onPlayerEvent');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onPlayerEvent eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onMetaData(data: void, length: number): void {
    let obj = {
      data,
      length,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onMetaData');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onMetaData eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onPlayBufferUpdated(playCachedBuffer: number): void {
    let obj = {
      playCachedBuffer,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onPlayBufferUpdated');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onPlayBufferUpdated eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onPreloadEvent(src: string, event: PLAYER_PRELOAD_EVENT): void {
    let obj = {
      src,
      event,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onPreloadEvent');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onPreloadEvent eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onCompleted(): void {
    let obj = {};
    let json = JSON.stringify(obj);
    let key = this.eventKey('onCompleted');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onCompleted eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onAgoraCDNTokenWillExpire(): void {
    let obj = {};
    let json = JSON.stringify(obj);
    let key = this.eventKey('onAgoraCDNTokenWillExpire');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onAgoraCDNTokenWillExpire eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onPlayerSrcInfoChanged(from: SrcInfo, to: SrcInfo): void {
    let obj = {
      from,
      to,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onPlayerSrcInfoChanged');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onPlayerSrcInfoChanged eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onPlayerInfoUpdated(info: PlayerUpdatedInfo): void {
    let obj = {
      info,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onPlayerInfoUpdated');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(`onPlayerInfoUpdated eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onAudioVolumeIndication(volume: number): void {
    let obj = {
      volume,
    };
    let json = JSON.stringify(obj);
    let key = this.eventKey('onAudioVolumeIndication');

    let eventParam = new EventParam(key, json, 0, '', [], [], 0);
    console.log(
      `onAudioVolumeIndication eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }
}
