/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  ERROR_CODE_TYPE,
  MEDIA_PLAYER_ERROR,
  MEDIA_PLAYER_EVENT,
  MEDIA_PLAYER_STATE,
  PLAYER_PRELOAD_EVENT,
  PlayerUpdatedInfo,
  SrcInfo,
} from '@iris/native-rtc';
import { ApiParam } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { AgoraConsole } from '../util/AgoraConsole';

export class IMediaPlayerSourceObserver {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onPlayerSourceStateChanged(
    state: MEDIA_PLAYER_STATE,
    ec: MEDIA_PLAYER_ERROR
  ): void {
    AgoraConsole.warn(
      'MediaPlayerSourceObserver_onPlayerSourceStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPositionChanged(position_ms: number): void {
    AgoraConsole.warn(
      'MediaPlayerSourceObserver_onPositionChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPlayerEvent(
    eventCode: MEDIA_PLAYER_EVENT,
    elapsedTime: number,
    message: string
  ): void {
    AgoraConsole.warn(
      'MediaPlayerSourceObserver_onPlayerEvent not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onMetaData(data: Uint8Array, length: number): void {
    AgoraConsole.warn(
      'MediaPlayerSourceObserver_onMetaData not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPlayBufferUpdated(playCachedBuffer: number): void {
    AgoraConsole.warn(
      'MediaPlayerSourceObserver_onPlayBufferUpdated not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPreloadEvent(src: string, event: PLAYER_PRELOAD_EVENT): void {
    AgoraConsole.warn(
      'MediaPlayerSourceObserver_onPreloadEvent not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onCompleted(): void {
    AgoraConsole.warn(
      'MediaPlayerSourceObserver_onCompleted not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAgoraCDNTokenWillExpire(): void {
    AgoraConsole.warn(
      'MediaPlayerSourceObserver_onAgoraCDNTokenWillExpire not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPlayerSrcInfoChanged(from: SrcInfo, to: SrcInfo): void {
    AgoraConsole.warn(
      'MediaPlayerSourceObserver_onPlayerSrcInfoChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPlayerInfoUpdated(info: PlayerUpdatedInfo): void {
    AgoraConsole.warn(
      'MediaPlayerSourceObserver_onPlayerInfoUpdated not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioVolumeIndication(volume: number): void {
    AgoraConsole.warn(
      'MediaPlayerSourceObserver_onAudioVolumeIndication not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}
