/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  ERROR_CODE_TYPE,
  IMusicContentCenter,
  IMusicPlayer,
  MusicChartCollection,
  MusicChartInfo,
  MusicCollection,
  MusicContentCenterStatusCode,
  PreloadStatusCode,
} from '@iris/native-rtc';
import { ApiParam, CallApiReturnType } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { AgoraConsole } from '../util/AgoraConsole';

import { IMediaPlayerDispatch } from './IAgoraMediaPlayerDispatch';

export class MusicChartCollectionDispatch implements MusicChartCollection {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }
  // @ts-ignore
  getCount(): CallApiReturnType {
    AgoraConsole.warn(
      'MusicChartCollection_getCount not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  get(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicChartCollection_get not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class MusicCollectionDispatch implements MusicCollection {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }
  // @ts-ignore
  getCount(): CallApiReturnType {
    AgoraConsole.warn(
      'MusicCollection_getCount not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getTotal(): CallApiReturnType {
    AgoraConsole.warn(
      'MusicCollection_getTotal not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getPage(): CallApiReturnType {
    AgoraConsole.warn(
      'MusicCollection_getPage not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getPageSize(): CallApiReturnType {
    AgoraConsole.warn(
      'MusicCollection_getPageSize not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getMusic(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicCollection_getMusic not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IMusicContentCenterEventHandler {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onMusicChartsResult(
    requestId: string,
    result: MusicChartInfo[],
    errorCode: MusicContentCenterStatusCode
  ): void {
    AgoraConsole.warn(
      'MusicContentCenterEventHandler_onMusicChartsResult not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onMusicCollectionResult(
    requestId: string,
    result: MusicCollection,
    errorCode: MusicContentCenterStatusCode
  ): void {
    AgoraConsole.warn(
      'MusicContentCenterEventHandler_onMusicCollectionResult not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLyricResult(
    requestId: string,
    songCode: number,
    lyricUrl: string,
    errorCode: MusicContentCenterStatusCode
  ): void {
    AgoraConsole.warn(
      'MusicContentCenterEventHandler_onLyricResult not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onSongSimpleInfoResult(
    requestId: string,
    songCode: number,
    simpleInfo: string,
    errorCode: MusicContentCenterStatusCode
  ): void {
    AgoraConsole.warn(
      'MusicContentCenterEventHandler_onSongSimpleInfoResult not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPreLoadEvent(
    requestId: string,
    songCode: number,
    percent: number,
    lyricUrl: string,
    status: PreloadStatusCode,
    errorCode: MusicContentCenterStatusCode
  ): void {
    AgoraConsole.warn(
      'MusicContentCenterEventHandler_onPreLoadEvent not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IMusicPlayerDispatch extends IMediaPlayerDispatch
  implements IMusicPlayer {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    super(engine);
    this._engine = engine;
  }
  // @ts-ignore
  open(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('MusicPlayer_open not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setPlayMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicPlayer_setPlayMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IMusicContentCenterDispatch implements IMusicContentCenter {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }
  // @ts-ignore
  initialize(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_initialize not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  renewToken(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_renewToken not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  release(): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_release not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  registerEventHandler(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_registerEventHandler not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  unregisterEventHandler(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_unregisterEventHandler not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  createMusicPlayer(): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_createMusicPlayer not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  destroyMusicPlayer(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_destroyMusicPlayer not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getMusicCharts(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_getMusicCharts not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getMusicCollectionByMusicChartId(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_getMusicCollectionByMusicChartId not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  searchMusic(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_searchMusic not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  preload(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_preload not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  preload2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_preload2 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  removeCache(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_removeCache not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getCaches(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_getCaches not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  isPreloaded(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_isPreloaded not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getLyric(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_getLyric not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getSongSimpleInfo(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_getSongSimpleInfo not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getInternalSongCode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MusicContentCenter_getInternalSongCode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}
