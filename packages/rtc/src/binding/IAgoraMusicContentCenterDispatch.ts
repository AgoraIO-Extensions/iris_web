/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  ERROR_CODE_TYPE,
  MusicChartCollection,
  MusicCollection,
  MusicContentCenterStatusCode,
  PreloadStatusCode,
} from '@iris/native-rtc-binding';
import { ApiParam, CallApiReturnType, EventParam } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import {
  IMusicContentCenterImpl,
  IMusicPlayerImpl,
  MusicChartCollectionImpl,
  MusicCollectionImpl,
} from '../impl/IAgoraMusicContentCenterImpl';
import { AgoraConsole } from '../util/AgoraConsole';

export class MusicChartCollectionDispatch {
  _impl: MusicChartCollectionImpl;
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._impl = new MusicChartCollectionImpl(engine);
    this._engine = engine;
  }
  getCount(): CallApiReturnType {
    AgoraConsole.warn('getCount not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  get(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('get not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class MusicCollectionDispatch {
  _impl: MusicCollectionImpl;
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._impl = new MusicCollectionImpl(engine);
    this._engine = engine;
  }
  getCount(): CallApiReturnType {
    AgoraConsole.warn('getCount not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getTotal(): CallApiReturnType {
    AgoraConsole.warn('getTotal not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getPage(): CallApiReturnType {
    AgoraConsole.warn('getPage not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getPageSize(): CallApiReturnType {
    AgoraConsole.warn('getPageSize not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getMusic(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getMusic not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IMusicContentCenterEventHandler {
  classPrefix: string = 'MusicContentCenterEventHandler_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: EventParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onMusicChartsResult(
    requestId: string,
    result: MusicChartCollection,
    errorCode: MusicContentCenterStatusCode
  ): void {
    AgoraConsole.warn('onMusicChartsResult not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onMusicCollectionResult(
    requestId: string,
    result: MusicCollection,
    errorCode: MusicContentCenterStatusCode
  ): void {
    AgoraConsole.warn(
      'onMusicCollectionResult not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLyricResult(
    requestId: string,
    songCode: number,
    lyricUrl: string,
    errorCode: MusicContentCenterStatusCode
  ): void {
    AgoraConsole.warn('onLyricResult not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onSongSimpleInfoResult(
    requestId: string,
    songCode: number,
    simpleInfo: string,
    errorCode: MusicContentCenterStatusCode
  ): void {
    AgoraConsole.warn('onSongSimpleInfoResult not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPreLoadEvent(
    requestId: string,
    songCode: number,
    percent: number,
    lyricUrl: string,
    status: PreloadStatusCode,
    errorCode: MusicContentCenterStatusCode
  ): void {
    AgoraConsole.warn('onPreLoadEvent not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IMusicPlayerDispatch {
  _impl: IMusicPlayerImpl;
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._impl = new IMusicPlayerImpl(engine);
    this._engine = engine;
  }
}

export class IMusicContentCenterDispatch {
  _impl: IMusicContentCenterImpl;
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._impl = new IMusicContentCenterImpl(engine);
    this._engine = engine;
  }
  initialize(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('initialize not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  renewToken(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('renewToken not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  release(): CallApiReturnType {
    AgoraConsole.warn('release not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  registerEventHandler(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('registerEventHandler not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  unregisterEventHandler(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('unregisterEventHandler not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  createMusicPlayer(): CallApiReturnType {
    AgoraConsole.warn('createMusicPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getMusicCharts(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getMusicCharts not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getMusicCollectionByMusicChartId(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'getMusicCollectionByMusicChartId not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  searchMusic(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('searchMusic not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  preload(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('preload not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  preload2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('preload2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  removeCache(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('removeCache not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getCaches(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getCaches not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  isPreloaded(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('isPreloaded not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getLyric(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getLyric not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getSongSimpleInfo(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getSongSimpleInfo not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getInternalSongCode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getInternalSongCode not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}
