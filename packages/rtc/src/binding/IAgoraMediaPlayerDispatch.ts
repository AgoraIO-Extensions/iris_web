/// Generated by terra, DO NOT MODIFY BY HAND.

import { ERROR_CODE_TYPE } from '@iris/native-rtc-binding';
import { ApiParam, CallApiReturnType } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import {
  IMediaPlayerCacheManagerImpl,
  IMediaPlayerImpl,
} from '../impl/IAgoraMediaPlayerImpl';
import { AgoraConsole } from '../util/AgoraConsole';

export class IMediaPlayerDispatch {
  _impl: IMediaPlayerImpl;
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._impl = new IMediaPlayerImpl(engine);
    this._engine = engine;
  }
  getMediaPlayerId(): CallApiReturnType {
    AgoraConsole.warn('getMediaPlayerId not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  open(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('open not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  openWithMediaSource(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('openWithMediaSource not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  play(): CallApiReturnType {
    AgoraConsole.warn('play not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  pause(): CallApiReturnType {
    AgoraConsole.warn('pause not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stop(): CallApiReturnType {
    AgoraConsole.warn('stop not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  resume(): CallApiReturnType {
    AgoraConsole.warn('resume not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  seek(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('seek not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setAudioPitch(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setAudioPitch not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getDuration(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getDuration not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getPlayPosition(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getPlayPosition not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getStreamCount(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getStreamCount not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getStreamInfo(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getStreamInfo not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setLoopCount(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setLoopCount not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setPlaybackSpeed(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setPlaybackSpeed not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  selectAudioTrack(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('selectAudioTrack not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setPlayerOption(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setPlayerOption not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setPlayerOption2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setPlayerOption2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  takeScreenshot(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('takeScreenshot not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  selectInternalSubtitle(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('selectInternalSubtitle not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setExternalSubtitle(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setExternalSubtitle not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getState(): CallApiReturnType {
    AgoraConsole.warn('getState not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  mute(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('mute not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getMute(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getMute not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  adjustPlayoutVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('adjustPlayoutVolume not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getPlayoutVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getPlayoutVolume not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  adjustPublishSignalVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'adjustPublishSignalVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getPublishSignalVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getPublishSignalVolume not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setView(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setView not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setRenderMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setRenderMode not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  registerPlayerSourceObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'registerPlayerSourceObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  unregisterPlayerSourceObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'unregisterPlayerSourceObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  registerAudioFrameObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'registerAudioFrameObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  registerAudioFrameObserver2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'registerAudioFrameObserver2 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  unregisterAudioFrameObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'unregisterAudioFrameObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  registerVideoFrameObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'registerVideoFrameObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  unregisterVideoFrameObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'unregisterVideoFrameObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  registerMediaPlayerAudioSpectrumObserver(
    apiParam: ApiParam
  ): CallApiReturnType {
    AgoraConsole.warn(
      'registerMediaPlayerAudioSpectrumObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  unregisterMediaPlayerAudioSpectrumObserver(
    apiParam: ApiParam
  ): CallApiReturnType {
    AgoraConsole.warn(
      'unregisterMediaPlayerAudioSpectrumObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setAudioDualMonoMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setAudioDualMonoMode not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getPlayerSdkVersion(): CallApiReturnType {
    AgoraConsole.warn('getPlayerSdkVersion not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getPlaySrc(): CallApiReturnType {
    AgoraConsole.warn('getPlaySrc not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  openWithAgoraCDNSrc(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('openWithAgoraCDNSrc not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getAgoraCDNLineCount(): CallApiReturnType {
    AgoraConsole.warn('getAgoraCDNLineCount not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  switchAgoraCDNLineByIndex(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'switchAgoraCDNLineByIndex not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getCurrentAgoraCDNIndex(): CallApiReturnType {
    AgoraConsole.warn(
      'getCurrentAgoraCDNIndex not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableAutoSwitchAgoraCDN(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'enableAutoSwitchAgoraCDN not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  renewAgoraCDNSrcToken(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('renewAgoraCDNSrcToken not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  switchAgoraCDNSrc(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('switchAgoraCDNSrc not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  switchSrc(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('switchSrc not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  preloadSrc(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('preloadSrc not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  playPreloadedSrc(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('playPreloadedSrc not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  unloadSrc(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('unloadSrc not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setSpatialAudioParams(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setSpatialAudioParams not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setSoundPositionParams(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setSoundPositionParams not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IMediaPlayerCacheManagerDispatch {
  _impl: IMediaPlayerCacheManagerImpl;
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._impl = new IMediaPlayerCacheManagerImpl(engine);
    this._engine = engine;
  }
  removeAllCaches(): CallApiReturnType {
    AgoraConsole.warn('removeAllCaches not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  removeOldCache(): CallApiReturnType {
    AgoraConsole.warn('removeOldCache not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  removeCacheByUri(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('removeCacheByUri not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setCacheDir(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setCacheDir not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setMaxCacheFileCount(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setMaxCacheFileCount not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setMaxCacheFileSize(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setMaxCacheFileSize not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableAutoRemoveCache(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableAutoRemoveCache not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getCacheDir(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getCacheDir not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getMaxCacheFileCount(): CallApiReturnType {
    AgoraConsole.warn('getMaxCacheFileCount not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getMaxCacheFileSize(): CallApiReturnType {
    AgoraConsole.warn('getMaxCacheFileSize not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getCacheFileCount(): CallApiReturnType {
    AgoraConsole.warn('getCacheFileCount not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}
