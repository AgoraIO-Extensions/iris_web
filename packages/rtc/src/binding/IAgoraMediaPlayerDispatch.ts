/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  ERROR_CODE_TYPE,
  IMediaPlayer,
  IMediaPlayerCacheManager,
} from '@iris/native-rtc';
import { ApiParam, CallApiReturnType } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { AgoraConsole } from '../util/AgoraConsole';

export class IMediaPlayerDispatch implements IMediaPlayer {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }
  // @ts-ignore
  getMediaPlayerId(): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  open(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer_open not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  openWithMediaSource(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_openWithMediaSource not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  play(): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  pause(): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stop(): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  resume(): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  seek(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer_seek not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setAudioPitch(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_setAudioPitch not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getDuration(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_getDuration not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getPlayPosition(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_getPlayPosition not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getStreamCount(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_getStreamCount not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getStreamInfo(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_getStreamInfo not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLoopCount(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_setLoopCount not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setPlaybackSpeed(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_setPlaybackSpeed not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  selectAudioTrack(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_selectAudioTrack not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setPlayerOption(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_setPlayerOption not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setPlayerOption2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_setPlayerOption not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  takeScreenshot(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_takeScreenshot not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  selectInternalSubtitle(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_selectInternalSubtitle not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setExternalSubtitle(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_setExternalSubtitle not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getState(): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  mute(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer_mute not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getMute(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer_getMute not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  adjustPlayoutVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_adjustPlayoutVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getPlayoutVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_getPlayoutVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  adjustPublishSignalVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_adjustPublishSignalVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getPublishSignalVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_getPublishSignalVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setView(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer_setView not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRenderMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_setRenderMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  registerPlayerSourceObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_registerPlayerSourceObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  unregisterPlayerSourceObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_unregisterPlayerSourceObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  registerAudioFrameObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_registerAudioFrameObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  registerAudioFrameObserver2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_registerAudioFrameObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  unregisterAudioFrameObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_unregisterAudioFrameObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  registerVideoFrameObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_registerVideoFrameObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  unregisterVideoFrameObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_unregisterVideoFrameObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  registerMediaPlayerAudioSpectrumObserver(
    apiParam: ApiParam
  ): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_registerMediaPlayerAudioSpectrumObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  unregisterMediaPlayerAudioSpectrumObserver(
    apiParam: ApiParam
  ): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_unregisterMediaPlayerAudioSpectrumObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setAudioDualMonoMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_setAudioDualMonoMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getPlayerSdkVersion(): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getPlaySrc(): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  openWithAgoraCDNSrc(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_openWithAgoraCDNSrc not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getAgoraCDNLineCount(): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  switchAgoraCDNLineByIndex(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_switchAgoraCDNLineByIndex not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getCurrentAgoraCDNIndex(): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableAutoSwitchAgoraCDN(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_enableAutoSwitchAgoraCDN not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  renewAgoraCDNSrcToken(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_renewAgoraCDNSrcToken not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  switchAgoraCDNSrc(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_switchAgoraCDNSrc not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  switchSrc(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer_switchSrc not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  preloadSrc(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer_preloadSrc not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  playPreloadedSrc(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_playPreloadedSrc not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  unloadSrc(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('MediaPlayer_unloadSrc not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setSpatialAudioParams(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_setSpatialAudioParams not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setSoundPositionParams(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayer_setSoundPositionParams not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IMediaPlayerCacheManagerDispatch
  implements IMediaPlayerCacheManager {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }
  // @ts-ignore
  removeAllCaches(): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayerCacheManager not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  removeOldCache(): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayerCacheManager not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  removeCacheByUri(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayerCacheManager_removeCacheByUri not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setCacheDir(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayerCacheManager_setCacheDir not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setMaxCacheFileCount(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayerCacheManager_setMaxCacheFileCount not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setMaxCacheFileSize(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayerCacheManager_setMaxCacheFileSize not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableAutoRemoveCache(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayerCacheManager_enableAutoRemoveCache not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getCacheDir(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayerCacheManager_getCacheDir not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getMaxCacheFileCount(): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayerCacheManager not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getMaxCacheFileSize(): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayerCacheManager not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getCacheFileCount(): CallApiReturnType {
    AgoraConsole.warn(
      'MediaPlayerCacheManager not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}
