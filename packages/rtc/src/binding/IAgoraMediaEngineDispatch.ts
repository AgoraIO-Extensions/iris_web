/// Generated by terra, DO NOT MODIFY BY HAND.

import { ERROR_CODE_TYPE } from '@iris/native-rtc-binding';
import { ApiParam, CallApiReturnType } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { callApiBufferExtension } from '../extensions/CallApiBufferExtensions';
import { IMediaEngineImpl } from '../impl/IAgoraMediaEngineImpl';
import { AgoraConsole } from '../util/AgoraConsole';

export class IMediaEngineDispatch {
  _impl: IMediaEngineImpl;
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._impl = new IMediaEngineImpl(engine);
    this._engine = engine;
  }
  registerAudioFrameObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'registerAudioFrameObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  registerVideoFrameObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'registerVideoFrameObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  registerVideoEncodedFrameObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'registerVideoEncodedFrameObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  pushAudioFrame(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('pushAudioFrame not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  pullAudioFrame(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('pullAudioFrame not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setExternalVideoSource(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw 'enabled is undefined';
    let useTexture = obj.useTexture;
    if (useTexture === undefined) throw 'useTexture is undefined';
    let sourceType = obj.sourceType;
    if (sourceType === undefined) throw 'sourceType is undefined';
    let encodedVideoOption = obj.encodedVideoOption;
    if (encodedVideoOption === undefined)
      throw 'encodedVideoOption is undefined';

    return this._impl.setExternalVideoSource(
      enabled,
      useTexture,
      sourceType,
      encodedVideoOption
    );
  }

  setExternalAudioSource(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setExternalAudioSource not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  createCustomAudioTrack(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('createCustomAudioTrack not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  destroyCustomAudioTrack(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'destroyCustomAudioTrack not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setExternalAudioSink(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setExternalAudioSink not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableCustomAudioLocalPlayback(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'enableCustomAudioLocalPlayback not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  pushVideoFrame(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    obj = callApiBufferExtension(apiParam.event, obj, apiParam.buffer);
    let frame = obj.frame;
    if (frame === undefined) throw 'frame is undefined';
    let videoTrackId = obj.videoTrackId;
    if (videoTrackId === undefined) throw 'videoTrackId is undefined';

    return this._impl.pushVideoFrame(frame, videoTrackId);
  }

  pushEncodedVideoImage(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('pushEncodedVideoImage not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  release(): CallApiReturnType {
    AgoraConsole.warn('release not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}
