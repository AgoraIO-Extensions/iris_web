/// Generated by terra, DO NOT MODIFY BY HAND.

import { ERROR_CODE_TYPE, IAudioDeviceManager } from '@iris/native-rtc';
import { ApiParam, CallApiReturnType } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { IAudioDeviceManagerImpl } from '../impl/IAudioDeviceManagerImpl';
import { AgoraConsole } from '../util/AgoraConsole';

export class IAudioDeviceManagerDispatch implements IAudioDeviceManager {
  // @ts-ignore
  _impl: IAudioDeviceManagerImpl;
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._impl = new IAudioDeviceManagerImpl(engine);
    this._engine = engine;
  }
  // @ts-ignore
  enumeratePlaybackDevices(): CallApiReturnType {
    return this._impl.enumeratePlaybackDevices();
  }

  // @ts-ignore
  enumerateRecordingDevices(): CallApiReturnType {
    return this._impl.enumerateRecordingDevices();
  }

  // @ts-ignore
  setPlaybackDevice_4ad5f6e(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let deviceId = obj.deviceId;
    if (deviceId === undefined) {
      AgoraConsole.error('deviceId is undefined');
      throw 'deviceId is undefined';
    }

    return this._impl.setPlaybackDevice_4ad5f6e(deviceId);
  }

  // @ts-ignore
  getPlaybackDevice_73b9872(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let deviceId = obj.deviceId;

    return this._impl.getPlaybackDevice_73b9872();
  }

  // @ts-ignore
  getPlaybackDeviceInfo_5540658(): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getPlaybackDeviceInfo_5540658 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setPlaybackDeviceVolume_46f8ab7(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_setPlaybackDeviceVolume_46f8ab7 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getPlaybackDeviceVolume_915cb25(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getPlaybackDeviceVolume_915cb25 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRecordingDevice_4ad5f6e(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let deviceId = obj.deviceId;
    if (deviceId === undefined) {
      AgoraConsole.error('deviceId is undefined');
      throw 'deviceId is undefined';
    }

    return this._impl.setRecordingDevice_4ad5f6e(deviceId);
  }

  // @ts-ignore
  getRecordingDevice_73b9872(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let deviceId = obj.deviceId;

    return this._impl.getRecordingDevice_73b9872();
  }

  // @ts-ignore
  getRecordingDeviceInfo_5540658(): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getRecordingDeviceInfo_5540658 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRecordingDeviceVolume_46f8ab7(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_setRecordingDeviceVolume_46f8ab7 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getRecordingDeviceVolume_915cb25(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getRecordingDeviceVolume_915cb25 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLoopbackDevice_4ad5f6e(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_setLoopbackDevice_4ad5f6e not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getLoopbackDevice_73b9872(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getLoopbackDevice_73b9872 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setPlaybackDeviceMute_5039d15(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_setPlaybackDeviceMute_5039d15 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getPlaybackDeviceMute_d942327(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getPlaybackDeviceMute_d942327 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRecordingDeviceMute_5039d15(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_setRecordingDeviceMute_5039d15 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getRecordingDeviceMute_d942327(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getRecordingDeviceMute_d942327 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startPlaybackDeviceTest_3a2037f(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_startPlaybackDeviceTest_3a2037f not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopPlaybackDeviceTest(): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_stopPlaybackDeviceTest not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startRecordingDeviceTest_46f8ab7(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_startRecordingDeviceTest_46f8ab7 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopRecordingDeviceTest(): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_stopRecordingDeviceTest not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startAudioDeviceLoopbackTest_46f8ab7(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_startAudioDeviceLoopbackTest_46f8ab7 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopAudioDeviceLoopbackTest(): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_stopAudioDeviceLoopbackTest not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  followSystemPlaybackDevice_5039d15(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_followSystemPlaybackDevice_5039d15 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  followSystemRecordingDevice_5039d15(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_followSystemRecordingDevice_5039d15 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  followSystemLoopbackDevice_5039d15(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_followSystemLoopbackDevice_5039d15 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  release(): CallApiReturnType {
    return this._impl.release();
  }
}
