/// Generated by terra, DO NOT MODIFY BY HAND.

import { ApiParam, CallApiReturnType } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { IAudioDeviceManagerImpl } from '../impl/IAudioDeviceManagerImpl';

export class IAudioDeviceManagerDispatch {
  _impl: IAudioDeviceManagerImpl;

  constructor(engine: IrisRtcEngine) {
    this._impl = new IAudioDeviceManagerImpl(engine);
  }
  enumeratePlaybackDevices(): CallApiReturnType {
    return this._impl.enumeratePlaybackDevices();
  }

  enumerateRecordingDevices(): CallApiReturnType {
    return this._impl.enumerateRecordingDevices();
  }

  setPlaybackDevice(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let deviceId = obj.deviceId;
    if (deviceId === undefined) throw 'deviceId is undefined';

    return this._impl.setPlaybackDevice(deviceId);
  }

  getPlaybackDevice(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let deviceId = obj.deviceId;
    if (deviceId === undefined) throw 'deviceId is undefined';

    return this._impl.getPlaybackDevice(deviceId);
  }

  getPlaybackDeviceInfo(): CallApiReturnType {
    return this._impl.getPlaybackDeviceInfo();
  }

  setPlaybackDeviceVolume(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw 'volume is undefined';

    return this._impl.setPlaybackDeviceVolume(volume);
  }

  getPlaybackDeviceVolume(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw 'volume is undefined';

    return this._impl.getPlaybackDeviceVolume(volume);
  }

  setRecordingDevice(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let deviceId = obj.deviceId;
    if (deviceId === undefined) throw 'deviceId is undefined';

    return this._impl.setRecordingDevice(deviceId);
  }

  getRecordingDevice(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let deviceId = obj.deviceId;
    if (deviceId === undefined) throw 'deviceId is undefined';

    return this._impl.getRecordingDevice(deviceId);
  }

  getRecordingDeviceInfo(): CallApiReturnType {
    return this._impl.getRecordingDeviceInfo();
  }

  setRecordingDeviceVolume(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw 'volume is undefined';

    return this._impl.setRecordingDeviceVolume(volume);
  }

  getRecordingDeviceVolume(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw 'volume is undefined';

    return this._impl.getRecordingDeviceVolume(volume);
  }

  setLoopbackDevice(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let deviceId = obj.deviceId;
    if (deviceId === undefined) throw 'deviceId is undefined';

    return this._impl.setLoopbackDevice(deviceId);
  }

  getLoopbackDevice(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let deviceId = obj.deviceId;
    if (deviceId === undefined) throw 'deviceId is undefined';

    return this._impl.getLoopbackDevice(deviceId);
  }

  setPlaybackDeviceMute(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';

    return this._impl.setPlaybackDeviceMute(mute);
  }

  getPlaybackDeviceMute(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';

    return this._impl.getPlaybackDeviceMute(mute);
  }

  setRecordingDeviceMute(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';

    return this._impl.setRecordingDeviceMute(mute);
  }

  getRecordingDeviceMute(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';

    return this._impl.getRecordingDeviceMute(mute);
  }

  startPlaybackDeviceTest(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let testAudioFilePath = obj.testAudioFilePath;
    if (testAudioFilePath === undefined) throw 'testAudioFilePath is undefined';

    return this._impl.startPlaybackDeviceTest(testAudioFilePath);
  }

  stopPlaybackDeviceTest(): CallApiReturnType {
    return this._impl.stopPlaybackDeviceTest();
  }

  startRecordingDeviceTest(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let indicationInterval = obj.indicationInterval;
    if (indicationInterval === undefined)
      throw 'indicationInterval is undefined';

    return this._impl.startRecordingDeviceTest(indicationInterval);
  }

  stopRecordingDeviceTest(): CallApiReturnType {
    return this._impl.stopRecordingDeviceTest();
  }

  startAudioDeviceLoopbackTest(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let indicationInterval = obj.indicationInterval;
    if (indicationInterval === undefined)
      throw 'indicationInterval is undefined';

    return this._impl.startAudioDeviceLoopbackTest(indicationInterval);
  }

  stopAudioDeviceLoopbackTest(): CallApiReturnType {
    return this._impl.stopAudioDeviceLoopbackTest();
  }

  followSystemPlaybackDevice(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enable = obj.enable;
    if (enable === undefined) throw 'enable is undefined';

    return this._impl.followSystemPlaybackDevice(enable);
  }

  followSystemRecordingDevice(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enable = obj.enable;
    if (enable === undefined) throw 'enable is undefined';

    return this._impl.followSystemRecordingDevice(enable);
  }

  followSystemLoopbackDevice(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enable = obj.enable;
    if (enable === undefined) throw 'enable is undefined';

    return this._impl.followSystemLoopbackDevice(enable);
  }

  release(): CallApiReturnType {
    return this._impl.release();
  }
}
