/// Generated by terra, DO NOT MODIFY BY HAND.

import { ERROR_CODE_TYPE, IAudioDeviceManager } from '@iris/native-rtc';
import { ApiParam, CallApiReturnType } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { IAudioDeviceManagerImpl } from '../impl/IAudioDeviceManagerImpl';
import { AgoraConsole } from '../util/AgoraConsole';

export class IAudioDeviceManagerDispatch implements IAudioDeviceManager {
  // @ts-ignore
  _impl: IAudioDeviceManagerImpl;
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._impl = new IAudioDeviceManagerImpl(engine);
    this._engine = engine;
  }
  // @ts-ignore
  enumeratePlaybackDevices(): CallApiReturnType {
    AgoraConsole.warn('AudioDeviceManager not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enumerateRecordingDevices(): CallApiReturnType {
    AgoraConsole.warn('AudioDeviceManager not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setPlaybackDevice(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_setPlaybackDevice not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getPlaybackDevice(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getPlaybackDevice not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getPlaybackDeviceInfo(): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getPlaybackDeviceInfo not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setPlaybackDeviceVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_setPlaybackDeviceVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getPlaybackDeviceVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getPlaybackDeviceVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRecordingDevice(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_setRecordingDevice not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getRecordingDevice(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getRecordingDevice not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getRecordingDeviceInfo(): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getRecordingDeviceInfo not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRecordingDeviceVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_setRecordingDeviceVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getRecordingDeviceVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getRecordingDeviceVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLoopbackDevice(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_setLoopbackDevice not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getLoopbackDevice(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getLoopbackDevice not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setPlaybackDeviceMute(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_setPlaybackDeviceMute not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getPlaybackDeviceMute(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getPlaybackDeviceMute not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRecordingDeviceMute(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_setRecordingDeviceMute not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getRecordingDeviceMute(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_getRecordingDeviceMute not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startPlaybackDeviceTest(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_startPlaybackDeviceTest not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopPlaybackDeviceTest(): CallApiReturnType {
    AgoraConsole.warn('AudioDeviceManager not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startRecordingDeviceTest(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_startRecordingDeviceTest not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopRecordingDeviceTest(): CallApiReturnType {
    AgoraConsole.warn('AudioDeviceManager not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startAudioDeviceLoopbackTest(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_startAudioDeviceLoopbackTest not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopAudioDeviceLoopbackTest(): CallApiReturnType {
    AgoraConsole.warn('AudioDeviceManager not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  followSystemPlaybackDevice(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_followSystemPlaybackDevice not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  followSystemRecordingDevice(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_followSystemRecordingDevice not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  followSystemLoopbackDevice(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'AudioDeviceManager_followSystemLoopbackDevice not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  release(): CallApiReturnType {
    AgoraConsole.warn('AudioDeviceManager not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}
