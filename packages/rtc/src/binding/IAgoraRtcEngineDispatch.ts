/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  AUDIO_MIXING_REASON_TYPE,
  AUDIO_MIXING_STATE_TYPE,
  AudioVolumeInfo,
  CLIENT_ROLE_CHANGE_FAILED_REASON,
  CLIENT_ROLE_TYPE,
  CONNECTION_CHANGED_REASON_TYPE,
  CONNECTION_STATE_TYPE,
  CONTENT_INSPECT_RESULT,
  ClientRoleOptions,
  DIRECT_CDN_STREAMING_ERROR,
  DIRECT_CDN_STREAMING_STATE,
  DirectCdnStreamingStats,
  DownlinkNetworkInfo,
  ENCRYPTION_ERROR_TYPE,
  ERROR_CODE_TYPE,
  LICENSE_ERROR_TYPE,
  LOCAL_AUDIO_STREAM_ERROR,
  LOCAL_AUDIO_STREAM_STATE,
  LOCAL_VIDEO_STREAM_ERROR,
  LOCAL_VIDEO_STREAM_STATE,
  LastmileProbeResult,
  LocalAudioStats,
  LocalVideoStats,
  MEDIA_DEVICE_TYPE,
  MEDIA_TRACE_EVENT,
  Metadata,
  NETWORK_TYPE,
  PERMISSION_TYPE,
  PROXY_TYPE,
  REMOTE_AUDIO_STATE,
  REMOTE_AUDIO_STATE_REASON,
  REMOTE_VIDEO_STATE,
  REMOTE_VIDEO_STATE_REASON,
  RHYTHM_PLAYER_ERROR_TYPE,
  RHYTHM_PLAYER_STATE_TYPE,
  RTMP_STREAMING_EVENT,
  RTMP_STREAM_PUBLISH_ERROR_TYPE,
  RTMP_STREAM_PUBLISH_STATE,
  Rectangle,
  RemoteAudioStats,
  RemoteVideoStats,
  RtcStats,
  STREAM_PUBLISH_STATE,
  STREAM_SUBSCRIBE_STATE,
  TranscodingVideoStream,
  UPLOAD_ERROR_REASON,
  USER_OFFLINE_REASON_TYPE,
  UplinkNetworkInfo,
  UserInfo,
  VIDEO_SOURCE_TYPE,
  VIDEO_TRANSCODER_ERROR,
  VideoRenderingTracingInfo,
  WLACC_MESSAGE_REASON,
  WLACC_SUGGEST_ACTION,
  WlAccStats,
} from '@iris/native-rtc-binding';
import { ApiParam, CallApiReturnType, IrisCore } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import {
  IRtcEngineImpl,
  IVideoDeviceManagerImpl,
} from '../impl/IAgoraRtcEngineImpl';
import { AgoraConsole } from '../util/AgoraConsole';

export class IRtcEngineEventHandler {
  classPrefix: string = 'RtcEngineEventHandler_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onJoinChannelSuccess(channel: string, uid: number, elapsed: number): void {
    AgoraConsole.warn('onJoinChannelSuccess not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRejoinChannelSuccess(channel: string, uid: number, elapsed: number): void {
    AgoraConsole.warn('onRejoinChannelSuccess not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onProxyConnected(
    channel: string,
    uid: number,
    proxyType: PROXY_TYPE,
    localProxyIp: string,
    elapsed: number
  ): void {
    AgoraConsole.warn('onProxyConnected not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onError(err: ERROR_CODE_TYPE, msg: string): void {
    let _obj = {
      err,
      msg,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onError');

    let eventParam = new IrisCore.EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(`onError eventParam ${JSON.stringify(eventParam)}`);
    this.notifyEvent(eventParam);
  }

  onAudioQuality(
    uid: number,
    quality: number,
    delay: number,
    lost: number
  ): void {
    AgoraConsole.warn('onAudioQuality not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLastmileProbeResult(result: LastmileProbeResult): void {
    AgoraConsole.warn('onLastmileProbeResult not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioVolumeIndication(
    speakers: AudioVolumeInfo[],
    speakerNumber: number,
    totalVolume: number
  ): void {
    AgoraConsole.warn(
      'onAudioVolumeIndication not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLeaveChannel(stats: RtcStats): void {
    AgoraConsole.warn('onLeaveChannel not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRtcStats(stats: RtcStats): void {
    AgoraConsole.warn('onRtcStats not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioDeviceStateChanged(
    deviceId: string,
    deviceType: number,
    deviceState: number
  ): void {
    let _obj = {
      deviceId,
      deviceType,
      deviceState,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onAudioDeviceStateChanged');

    let eventParam = new IrisCore.EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onAudioDeviceStateChanged eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onAudioMixingPositionChanged(position: number): void {
    AgoraConsole.warn(
      'onAudioMixingPositionChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioMixingFinished(): void {
    AgoraConsole.warn('onAudioMixingFinished not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioEffectFinished(soundId: number): void {
    let _obj = {
      soundId,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onAudioEffectFinished');

    let eventParam = new IrisCore.EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onAudioEffectFinished eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onVideoDeviceStateChanged(
    deviceId: string,
    deviceType: number,
    deviceState: number
  ): void {
    let _obj = {
      deviceId,
      deviceType,
      deviceState,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onVideoDeviceStateChanged');

    let eventParam = new IrisCore.EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onVideoDeviceStateChanged eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onNetworkQuality(uid: number, txQuality: number, rxQuality: number): void {
    let _obj = {
      uid,
      txQuality,
      rxQuality,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onNetworkQuality');

    let eventParam = new IrisCore.EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onNetworkQuality eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onIntraRequestReceived(): void {
    AgoraConsole.warn('onIntraRequestReceived not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUplinkNetworkInfoUpdated(info: UplinkNetworkInfo): void {
    AgoraConsole.warn(
      'onUplinkNetworkInfoUpdated not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onDownlinkNetworkInfoUpdated(info: DownlinkNetworkInfo): void {
    AgoraConsole.warn(
      'onDownlinkNetworkInfoUpdated not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLastmileQuality(quality: number): void {
    AgoraConsole.warn('onLastmileQuality not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstLocalVideoFrame(
    source: VIDEO_SOURCE_TYPE,
    width: number,
    height: number,
    elapsed: number
  ): void {
    let _obj = {
      source,
      width,
      height,
      elapsed,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onFirstLocalVideoFrame');

    let eventParam = new IrisCore.EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onFirstLocalVideoFrame eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onFirstLocalVideoFramePublished(
    source: VIDEO_SOURCE_TYPE,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'onFirstLocalVideoFramePublished not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteVideoDecoded(
    uid: number,
    width: number,
    height: number,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'onFirstRemoteVideoDecoded not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onVideoSizeChanged(
    sourceType: VIDEO_SOURCE_TYPE,
    uid: number,
    width: number,
    height: number,
    rotation: number
  ): void {
    AgoraConsole.warn('onVideoSizeChanged not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalVideoStateChanged(
    source: VIDEO_SOURCE_TYPE,
    state: LOCAL_VIDEO_STREAM_STATE,
    error: LOCAL_VIDEO_STREAM_ERROR
  ): void {
    let _obj = {
      source,
      state,
      error,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onLocalVideoStateChanged');

    let eventParam = new IrisCore.EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onLocalVideoStateChanged eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onRemoteVideoStateChanged(
    uid: number,
    state: REMOTE_VIDEO_STATE,
    reason: REMOTE_VIDEO_STATE_REASON,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'onRemoteVideoStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteVideoFrame(
    userId: number,
    width: number,
    height: number,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'onFirstRemoteVideoFrame not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserJoined(uid: number, elapsed: number): void {
    AgoraConsole.warn('onUserJoined not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserOffline(uid: number, reason: USER_OFFLINE_REASON_TYPE): void {
    AgoraConsole.warn('onUserOffline not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserMuteAudio(uid: number, muted: boolean): void {
    AgoraConsole.warn('onUserMuteAudio not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserMuteVideo(userId: number, muted: boolean): void {
    AgoraConsole.warn('onUserMuteVideo not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserEnableVideo(uid: number, enabled: boolean): void {
    AgoraConsole.warn('onUserEnableVideo not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserStateChanged(uid: number, state: number): void {
    AgoraConsole.warn('onUserStateChanged not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserEnableLocalVideo(uid: number, enabled: boolean): void {
    AgoraConsole.warn('onUserEnableLocalVideo not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalAudioStats(stats: LocalAudioStats): void {
    AgoraConsole.warn('onLocalAudioStats not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteAudioStats(stats: RemoteAudioStats): void {
    AgoraConsole.warn('onRemoteAudioStats not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalVideoStats(source: VIDEO_SOURCE_TYPE, stats: LocalVideoStats): void {
    AgoraConsole.warn('onLocalVideoStats not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteVideoStats(stats: RemoteVideoStats): void {
    AgoraConsole.warn('onRemoteVideoStats not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onCameraReady(): void {
    AgoraConsole.warn('onCameraReady not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onCameraFocusAreaChanged(
    x: number,
    y: number,
    width: number,
    height: number
  ): void {
    AgoraConsole.warn(
      'onCameraFocusAreaChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onCameraExposureAreaChanged(
    x: number,
    y: number,
    width: number,
    height: number
  ): void {
    AgoraConsole.warn(
      'onCameraExposureAreaChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFacePositionChanged(
    imageWidth: number,
    imageHeight: number,
    vecRectangle: Rectangle[],
    vecDistance: number[],
    numFaces: number
  ): void {
    AgoraConsole.warn('onFacePositionChanged not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onVideoStopped(): void {
    AgoraConsole.warn('onVideoStopped not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioMixingStateChanged(
    state: AUDIO_MIXING_STATE_TYPE,
    reason: AUDIO_MIXING_REASON_TYPE
  ): void {
    AgoraConsole.warn(
      'onAudioMixingStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRhythmPlayerStateChanged(
    state: RHYTHM_PLAYER_STATE_TYPE,
    errorCode: RHYTHM_PLAYER_ERROR_TYPE
  ): void {
    AgoraConsole.warn(
      'onRhythmPlayerStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionLost(): void {
    AgoraConsole.warn('onConnectionLost not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionInterrupted(): void {
    AgoraConsole.warn(
      'onConnectionInterrupted not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionBanned(): void {
    AgoraConsole.warn('onConnectionBanned not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onStreamMessage(
    userId: number,
    streamId: number,
    data: string,
    length: number,
    sentTs: number
  ): void {
    AgoraConsole.warn('onStreamMessage not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onStreamMessageError(
    userId: number,
    streamId: number,
    code: number,
    missed: number,
    cached: number
  ): void {
    AgoraConsole.warn('onStreamMessageError not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRequestToken(): void {
    AgoraConsole.warn('onRequestToken not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onTokenPrivilegeWillExpire(token: string): void {
    AgoraConsole.warn(
      'onTokenPrivilegeWillExpire not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLicenseValidationFailure(error: LICENSE_ERROR_TYPE): void {
    AgoraConsole.warn(
      'onLicenseValidationFailure not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstLocalAudioFramePublished(elapsed: number): void {
    AgoraConsole.warn(
      'onFirstLocalAudioFramePublished not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteAudioFrame(uid: number, elapsed: number): void {
    AgoraConsole.warn(
      'onFirstRemoteAudioFrame not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteAudioDecoded(uid: number, elapsed: number): void {
    AgoraConsole.warn(
      'onFirstRemoteAudioDecoded not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalAudioStateChanged(
    state: LOCAL_AUDIO_STREAM_STATE,
    error: LOCAL_AUDIO_STREAM_ERROR
  ): void {
    let _obj = {
      state,
      error,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onLocalAudioStateChanged');

    let eventParam = new IrisCore.EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onLocalAudioStateChanged eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onRemoteAudioStateChanged(
    uid: number,
    state: REMOTE_AUDIO_STATE,
    reason: REMOTE_AUDIO_STATE_REASON,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'onRemoteAudioStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onActiveSpeaker(userId: number): void {
    AgoraConsole.warn('onActiveSpeaker not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onContentInspectResult(result: CONTENT_INSPECT_RESULT): void {
    let _obj = {
      result,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onContentInspectResult');

    let eventParam = new IrisCore.EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onContentInspectResult eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onSnapshotTaken(
    uid: number,
    filePath: string,
    width: number,
    height: number,
    errCode: number
  ): void {
    AgoraConsole.warn('onSnapshotTaken not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onClientRoleChanged(
    oldRole: CLIENT_ROLE_TYPE,
    newRole: CLIENT_ROLE_TYPE,
    newRoleOptions: ClientRoleOptions
  ): void {
    AgoraConsole.warn('onClientRoleChanged not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onClientRoleChangeFailed(
    reason: CLIENT_ROLE_CHANGE_FAILED_REASON,
    currentRole: CLIENT_ROLE_TYPE
  ): void {
    AgoraConsole.warn(
      'onClientRoleChangeFailed not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioDeviceVolumeChanged(
    deviceType: MEDIA_DEVICE_TYPE,
    volume: number,
    muted: boolean
  ): void {
    AgoraConsole.warn(
      'onAudioDeviceVolumeChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRtmpStreamingStateChanged(
    url: string,
    state: RTMP_STREAM_PUBLISH_STATE,
    errCode: RTMP_STREAM_PUBLISH_ERROR_TYPE
  ): void {
    AgoraConsole.warn(
      'onRtmpStreamingStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRtmpStreamingEvent(url: string, eventCode: RTMP_STREAMING_EVENT): void {
    AgoraConsole.warn('onRtmpStreamingEvent not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onTranscodingUpdated(): void {
    AgoraConsole.warn('onTranscodingUpdated not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioRoutingChanged(routing: number): void {
    AgoraConsole.warn('onAudioRoutingChanged not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onChannelMediaRelayStateChanged(state: number, code: number): void {
    let _obj = {
      state,
      code,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onChannelMediaRelayStateChanged');

    let eventParam = new IrisCore.EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onChannelMediaRelayStateChanged eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onChannelMediaRelayEvent(code: number): void {
    let _obj = {
      code,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onChannelMediaRelayEvent');

    let eventParam = new IrisCore.EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onChannelMediaRelayEvent eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onLocalPublishFallbackToAudioOnly(isFallbackOrRecover: boolean): void {
    AgoraConsole.warn(
      'onLocalPublishFallbackToAudioOnly not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteSubscribeFallbackToAudioOnly(
    uid: number,
    isFallbackOrRecover: boolean
  ): void {
    let _obj = {
      uid,
      isFallbackOrRecover,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onRemoteSubscribeFallbackToAudioOnly');

    let eventParam = new IrisCore.EventParam(_key, _json, 0, '', [], [], 0);
    AgoraConsole.log(
      `onRemoteSubscribeFallbackToAudioOnly eventParam ${JSON.stringify(
        eventParam
      )}`
    );
    this.notifyEvent(eventParam);
  }

  onRemoteAudioTransportStats(
    uid: number,
    delay: number,
    lost: number,
    rxKBitRate: number
  ): void {
    AgoraConsole.warn(
      'onRemoteAudioTransportStats not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteVideoTransportStats(
    uid: number,
    delay: number,
    lost: number,
    rxKBitRate: number
  ): void {
    AgoraConsole.warn(
      'onRemoteVideoTransportStats not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionStateChanged(
    state: CONNECTION_STATE_TYPE,
    reason: CONNECTION_CHANGED_REASON_TYPE
  ): void {
    AgoraConsole.warn(
      'onConnectionStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onWlAccMessage(
    reason: WLACC_MESSAGE_REASON,
    action: WLACC_SUGGEST_ACTION,
    wlAccMsg: string
  ): void {
    AgoraConsole.warn('onWlAccMessage not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onWlAccStats(currentStats: WlAccStats, averageStats: WlAccStats): void {
    AgoraConsole.warn('onWlAccStats not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onNetworkTypeChanged(type: NETWORK_TYPE): void {
    AgoraConsole.warn('onNetworkTypeChanged not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onEncryptionError(errorType: ENCRYPTION_ERROR_TYPE): void {
    AgoraConsole.warn('onEncryptionError not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPermissionError(permissionType: PERMISSION_TYPE): void {
    AgoraConsole.warn('onPermissionError not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalUserRegistered(uid: number, userAccount: string): void {
    AgoraConsole.warn('onLocalUserRegistered not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserInfoUpdated(uid: number, info: UserInfo): void {
    AgoraConsole.warn('onUserInfoUpdated not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUploadLogResult(
    requestId: string,
    success: boolean,
    reason: UPLOAD_ERROR_REASON
  ): void {
    AgoraConsole.warn('onUploadLogResult not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioSubscribeStateChanged(
    channel: string,
    uid: number,
    oldState: STREAM_SUBSCRIBE_STATE,
    newState: STREAM_SUBSCRIBE_STATE,
    elapseSinceLastState: number
  ): void {
    AgoraConsole.warn(
      'onAudioSubscribeStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onVideoSubscribeStateChanged(
    channel: string,
    uid: number,
    oldState: STREAM_SUBSCRIBE_STATE,
    newState: STREAM_SUBSCRIBE_STATE,
    elapseSinceLastState: number
  ): void {
    AgoraConsole.warn(
      'onVideoSubscribeStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioPublishStateChanged(
    channel: string,
    oldState: STREAM_PUBLISH_STATE,
    newState: STREAM_PUBLISH_STATE,
    elapseSinceLastState: number
  ): void {
    AgoraConsole.warn(
      'onAudioPublishStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onVideoPublishStateChanged(
    source: VIDEO_SOURCE_TYPE,
    channel: string,
    oldState: STREAM_PUBLISH_STATE,
    newState: STREAM_PUBLISH_STATE,
    elapseSinceLastState: number
  ): void {
    AgoraConsole.warn(
      'onVideoPublishStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onExtensionEvent(
    provider: string,
    extension: string,
    key: string,
    value: string
  ): void {
    AgoraConsole.warn('onExtensionEvent not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onExtensionStarted(provider: string, extension: string): void {
    AgoraConsole.warn('onExtensionStarted not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onExtensionStopped(provider: string, extension: string): void {
    AgoraConsole.warn('onExtensionStopped not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onExtensionError(
    provider: string,
    extension: string,
    error: number,
    message: string
  ): void {
    AgoraConsole.warn('onExtensionError not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserAccountUpdated(uid: number, userAccount: string): void {
    AgoraConsole.warn('onUserAccountUpdated not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalVideoTranscoderError(
    stream: TranscodingVideoStream,
    error: VIDEO_TRANSCODER_ERROR
  ): void {
    AgoraConsole.warn(
      'onLocalVideoTranscoderError not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onVideoRenderingTracingResult(
    uid: number,
    currentEvent: MEDIA_TRACE_EVENT,
    tracingInfo: VideoRenderingTracingInfo
  ): void {
    AgoraConsole.warn(
      'onVideoRenderingTracingResult not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IVideoDeviceManagerDispatch {
  _impl: IVideoDeviceManagerImpl;
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._impl = new IVideoDeviceManagerImpl(engine);
    this._engine = engine;
  }
  enumerateVideoDevices(): CallApiReturnType {
    return this._impl.enumerateVideoDevices();
  }

  setDevice(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let deviceIdUTF8 = obj.deviceIdUTF8;
    if (deviceIdUTF8 === undefined) throw 'deviceIdUTF8 is undefined';

    return this._impl.setDevice(deviceIdUTF8);
  }

  getDevice(): CallApiReturnType {
    return this._impl.getDevice();
  }

  numberOfCapabilities(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('numberOfCapabilities not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getCapability(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getCapability not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startDeviceTest(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('startDeviceTest not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopDeviceTest(): CallApiReturnType {
    AgoraConsole.warn('stopDeviceTest not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  release(): CallApiReturnType {
    return this._impl.release();
  }
}

export class IMetadataObserver {
  classPrefix: string = 'MetadataObserver_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onMetadataReceived(metadata: Metadata): void {
    AgoraConsole.warn('onMetadataReceived not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IDirectCdnStreamingEventHandler {
  classPrefix: string = 'DirectCdnStreamingEventHandler_';

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  eventKey(event: string): string {
    return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onDirectCdnStreamingStateChanged(
    state: DIRECT_CDN_STREAMING_STATE,
    error: DIRECT_CDN_STREAMING_ERROR,
    message: string
  ): void {
    AgoraConsole.warn(
      'onDirectCdnStreamingStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onDirectCdnStreamingStats(stats: DirectCdnStreamingStats): void {
    AgoraConsole.warn(
      'onDirectCdnStreamingStats not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IRtcEngineDispatch {
  _impl: IRtcEngineImpl;
  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
    this._impl = new IRtcEngineImpl(engine);
    this._engine = engine;
  }
  release(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sync = obj.sync;
    if (sync === undefined) throw 'sync is undefined';

    return this._impl.release(sync);
  }

  initialize(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let context = obj.context;
    if (context === undefined) throw 'context is undefined';

    return this._impl.initialize(context);
  }

  getVersion(): CallApiReturnType {
    AgoraConsole.warn('getVersion not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getErrorDescription(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getErrorDescription not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  queryCodecCapability(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('queryCodecCapability not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  preloadChannel(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('preloadChannel not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  preloadChannel2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('preloadChannel2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  updatePreloadChannelToken(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'updatePreloadChannelToken not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  joinChannel(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) throw 'token is undefined';
    let channelId = obj.channelId;
    if (channelId === undefined) throw 'channelId is undefined';
    let info = obj.info;
    if (info === undefined) throw 'info is undefined';
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';

    return this._impl.joinChannel(token, channelId, info, uid);
  }

  joinChannel2(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) throw 'token is undefined';
    let channelId = obj.channelId;
    if (channelId === undefined) throw 'channelId is undefined';
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let options = obj.options;
    if (options === undefined) throw 'options is undefined';

    return this._impl.joinChannel2(token, channelId, uid, options);
  }

  updateChannelMediaOptions(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let options = obj.options;
    if (options === undefined) throw 'options is undefined';

    return this._impl.updateChannelMediaOptions(options);
  }

  leaveChannel(): CallApiReturnType {
    return this._impl.leaveChannel();
  }

  leaveChannel2(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let options = obj.options;
    if (options === undefined) throw 'options is undefined';

    return this._impl.leaveChannel2(options);
  }

  renewToken(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('renewToken not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setChannelProfile(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let profile = obj.profile;
    if (profile === undefined) throw 'profile is undefined';

    return this._impl.setChannelProfile(profile);
  }

  setClientRole(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let role = obj.role;
    if (role === undefined) throw 'role is undefined';

    return this._impl.setClientRole(role);
  }

  setClientRole2(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let role = obj.role;
    if (role === undefined) throw 'role is undefined';
    let options = obj.options;
    if (options === undefined) throw 'options is undefined';

    return this._impl.setClientRole2(role, options);
  }

  startEchoTest(): CallApiReturnType {
    AgoraConsole.warn('startEchoTest not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startEchoTest2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('startEchoTest2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startEchoTest3(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('startEchoTest3 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopEchoTest(): CallApiReturnType {
    AgoraConsole.warn('stopEchoTest not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableMultiCamera(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableMultiCamera not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableVideo(): CallApiReturnType {
    return this._impl.enableVideo();
  }

  disableVideo(): CallApiReturnType {
    return this._impl.disableVideo();
  }

  startPreview(): CallApiReturnType {
    return this._impl.startPreview();
  }

  startPreview2(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sourceType = obj.sourceType;
    if (sourceType === undefined) throw 'sourceType is undefined';

    return this._impl.startPreview2(sourceType);
  }

  stopPreview(): CallApiReturnType {
    return this._impl.stopPreview();
  }

  stopPreview2(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sourceType = obj.sourceType;
    if (sourceType === undefined) throw 'sourceType is undefined';

    return this._impl.stopPreview2(sourceType);
  }

  startLastmileProbeTest(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('startLastmileProbeTest not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopLastmileProbeTest(): CallApiReturnType {
    AgoraConsole.warn('stopLastmileProbeTest not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setVideoEncoderConfiguration(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let config = obj.config;
    if (config === undefined) throw 'config is undefined';

    return this._impl.setVideoEncoderConfiguration(config);
  }

  setBeautyEffectOptions(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setBeautyEffectOptions not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setLowlightEnhanceOptions(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setLowlightEnhanceOptions not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setVideoDenoiserOptions(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setVideoDenoiserOptions not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setColorEnhanceOptions(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setColorEnhanceOptions not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableVirtualBackground(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'enableVirtualBackground not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setupRemoteVideo(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setupRemoteVideo not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setupLocalVideo(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let canvas = obj.canvas;
    if (canvas === undefined) throw 'canvas is undefined';

    return this._impl.setupLocalVideo(canvas);
  }

  setVideoScenario(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setVideoScenario not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableAudio(): CallApiReturnType {
    return this._impl.enableAudio();
  }

  disableAudio(): CallApiReturnType {
    return this._impl.disableAudio();
  }

  setAudioProfile(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let profile = obj.profile;
    if (profile === undefined) throw 'profile is undefined';
    let scenario = obj.scenario;
    if (scenario === undefined) throw 'scenario is undefined';

    return this._impl.setAudioProfile(profile, scenario);
  }

  setAudioProfile2(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let profile = obj.profile;
    if (profile === undefined) throw 'profile is undefined';

    return this._impl.setAudioProfile2(profile);
  }

  setAudioScenario(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setAudioScenario not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableLocalAudio(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw 'enabled is undefined';

    return this._impl.enableLocalAudio(enabled);
  }

  muteLocalAudioStream(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';

    return this._impl.muteLocalAudioStream(mute);
  }

  muteAllRemoteAudioStreams(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';

    return this._impl.muteAllRemoteAudioStreams(mute);
  }

  setDefaultMuteAllRemoteAudioStreams(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setDefaultMuteAllRemoteAudioStreams not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  muteRemoteAudioStream(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw 'uid is undefined';
    let mute = obj.mute;
    if (mute === undefined) throw 'mute is undefined';

    return this._impl.muteRemoteAudioStream(uid, mute);
  }

  muteLocalVideoStream(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('muteLocalVideoStream not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableLocalVideo(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableLocalVideo not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  muteAllRemoteVideoStreams(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'muteAllRemoteVideoStreams not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setDefaultMuteAllRemoteVideoStreams(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setDefaultMuteAllRemoteVideoStreams not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  muteRemoteVideoStream(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('muteRemoteVideoStream not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setRemoteVideoStreamType(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setRemoteVideoStreamType not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setRemoteVideoSubscriptionOptions(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setRemoteVideoSubscriptionOptions not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setRemoteDefaultVideoStreamType(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setRemoteDefaultVideoStreamType not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setSubscribeAudioBlocklist(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setSubscribeAudioBlocklist not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setSubscribeAudioAllowlist(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setSubscribeAudioAllowlist not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setSubscribeVideoBlocklist(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setSubscribeVideoBlocklist not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setSubscribeVideoAllowlist(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setSubscribeVideoAllowlist not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableAudioVolumeIndication(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let interval = obj.interval;
    if (interval === undefined) throw 'interval is undefined';
    let smooth = obj.smooth;
    if (smooth === undefined) throw 'smooth is undefined';
    let reportVad = obj.reportVad;
    if (reportVad === undefined) throw 'reportVad is undefined';

    return this._impl.enableAudioVolumeIndication(interval, smooth, reportVad);
  }

  startAudioRecording(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('startAudioRecording not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startAudioRecording2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('startAudioRecording2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startAudioRecording3(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('startAudioRecording3 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  registerAudioEncodedFrameObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'registerAudioEncodedFrameObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopAudioRecording(): CallApiReturnType {
    AgoraConsole.warn('stopAudioRecording not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  createMediaPlayer(): CallApiReturnType {
    AgoraConsole.warn('createMediaPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  destroyMediaPlayer(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('destroyMediaPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  createMediaRecorder(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('createMediaRecorder not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  destroyMediaRecorder(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('destroyMediaRecorder not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startAudioMixing(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('startAudioMixing not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startAudioMixing2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('startAudioMixing2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopAudioMixing(): CallApiReturnType {
    AgoraConsole.warn('stopAudioMixing not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  pauseAudioMixing(): CallApiReturnType {
    AgoraConsole.warn('pauseAudioMixing not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  resumeAudioMixing(): CallApiReturnType {
    AgoraConsole.warn('resumeAudioMixing not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  selectAudioTrack(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('selectAudioTrack not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getAudioTrackCount(): CallApiReturnType {
    AgoraConsole.warn('getAudioTrackCount not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  adjustAudioMixingVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'adjustAudioMixingVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  adjustAudioMixingPublishVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'adjustAudioMixingPublishVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getAudioMixingPublishVolume(): CallApiReturnType {
    AgoraConsole.warn(
      'getAudioMixingPublishVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  adjustAudioMixingPlayoutVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'adjustAudioMixingPlayoutVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getAudioMixingPlayoutVolume(): CallApiReturnType {
    AgoraConsole.warn(
      'getAudioMixingPlayoutVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getAudioMixingDuration(): CallApiReturnType {
    AgoraConsole.warn('getAudioMixingDuration not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getAudioMixingCurrentPosition(): CallApiReturnType {
    AgoraConsole.warn(
      'getAudioMixingCurrentPosition not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setAudioMixingPosition(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setAudioMixingPosition not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setAudioMixingDualMonoMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setAudioMixingDualMonoMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setAudioMixingPitch(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setAudioMixingPitch not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getEffectsVolume(): CallApiReturnType {
    AgoraConsole.warn('getEffectsVolume not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setEffectsVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setEffectsVolume not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  preloadEffect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('preloadEffect not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  playEffect(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let soundId = obj.soundId;
    if (soundId === undefined) throw 'soundId is undefined';
    let filePath = obj.filePath;
    if (filePath === undefined) throw 'filePath is undefined';
    let loopCount = obj.loopCount;
    if (loopCount === undefined) throw 'loopCount is undefined';
    let pitch = obj.pitch;
    if (pitch === undefined) throw 'pitch is undefined';
    let pan = obj.pan;
    if (pan === undefined) throw 'pan is undefined';
    let gain = obj.gain;
    if (gain === undefined) throw 'gain is undefined';
    let publish = obj.publish;
    if (publish === undefined) throw 'publish is undefined';
    let startPos = obj.startPos;
    if (startPos === undefined) throw 'startPos is undefined';

    return this._impl.playEffect(
      soundId,
      filePath,
      loopCount,
      pitch,
      pan,
      gain,
      publish,
      startPos
    );
  }

  playAllEffects(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('playAllEffects not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getVolumeOfEffect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getVolumeOfEffect not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setVolumeOfEffect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setVolumeOfEffect not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  pauseEffect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('pauseEffect not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  pauseAllEffects(): CallApiReturnType {
    AgoraConsole.warn('pauseAllEffects not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  resumeEffect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('resumeEffect not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  resumeAllEffects(): CallApiReturnType {
    AgoraConsole.warn('resumeAllEffects not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopEffect(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let soundId = obj.soundId;
    if (soundId === undefined) throw 'soundId is undefined';

    return this._impl.stopEffect(soundId);
  }

  stopAllEffects(): CallApiReturnType {
    return this._impl.stopAllEffects();
  }

  unloadEffect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('unloadEffect not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  unloadAllEffects(): CallApiReturnType {
    AgoraConsole.warn('unloadAllEffects not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getEffectDuration(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getEffectDuration not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setEffectPosition(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setEffectPosition not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getEffectCurrentPosition(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'getEffectCurrentPosition not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableSoundPositionIndication(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'enableSoundPositionIndication not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setRemoteVoicePosition(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setRemoteVoicePosition not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableSpatialAudio(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableSpatialAudio not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setRemoteUserSpatialAudioParams(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setRemoteUserSpatialAudioParams not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setVoiceBeautifierPreset(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setVoiceBeautifierPreset not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setAudioEffectPreset(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setAudioEffectPreset not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setVoiceConversionPreset(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setVoiceConversionPreset not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setAudioEffectParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setAudioEffectParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setVoiceBeautifierParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setVoiceBeautifierParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setVoiceConversionParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setVoiceConversionParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setLocalVoicePitch(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setLocalVoicePitch not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setLocalVoiceFormant(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setLocalVoiceFormant not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setLocalVoiceEqualization(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setLocalVoiceEqualization not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setLocalVoiceReverb(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setLocalVoiceReverb not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setHeadphoneEQPreset(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setHeadphoneEQPreset not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setHeadphoneEQParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setHeadphoneEQParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setLogFile(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setLogFile not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setLogFilter(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setLogFilter not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setLogLevel(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let level = obj.level;
    if (level === undefined) throw 'level is undefined';

    return this._impl.setLogLevel(level);
  }

  setLogFileSize(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setLogFileSize not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  uploadLogFile(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('uploadLogFile not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setLocalRenderMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setLocalRenderMode not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setRemoteRenderMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setRemoteRenderMode not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setLocalRenderMode2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setLocalRenderMode2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setLocalVideoMirrorMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setLocalVideoMirrorMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableDualStreamMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableDualStreamMode not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableDualStreamMode2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableDualStreamMode2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setDualStreamMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setDualStreamMode not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setDualStreamMode2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setDualStreamMode2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableCustomAudioLocalPlayback(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'enableCustomAudioLocalPlayback not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setRecordingAudioFrameParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setRecordingAudioFrameParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setPlaybackAudioFrameParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setPlaybackAudioFrameParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setMixedAudioFrameParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setMixedAudioFrameParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setEarMonitoringAudioFrameParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setEarMonitoringAudioFrameParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setPlaybackAudioFrameBeforeMixingParameters(
    apiParam: ApiParam
  ): CallApiReturnType {
    AgoraConsole.warn(
      'setPlaybackAudioFrameBeforeMixingParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableAudioSpectrumMonitor(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'enableAudioSpectrumMonitor not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  disableAudioSpectrumMonitor(): CallApiReturnType {
    AgoraConsole.warn(
      'disableAudioSpectrumMonitor not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  registerAudioSpectrumObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'registerAudioSpectrumObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  unregisterAudioSpectrumObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'unregisterAudioSpectrumObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  adjustRecordingSignalVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'adjustRecordingSignalVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  muteRecordingSignal(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('muteRecordingSignal not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  adjustPlaybackSignalVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'adjustPlaybackSignalVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  adjustUserPlaybackSignalVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'adjustUserPlaybackSignalVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setLocalPublishFallbackOption(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setLocalPublishFallbackOption not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setRemoteSubscribeFallbackOption(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setRemoteSubscribeFallbackOption not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setHighPriorityUserList(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setHighPriorityUserList not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableLoopbackRecording(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'enableLoopbackRecording not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  adjustLoopbackSignalVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'adjustLoopbackSignalVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getLoopbackRecordingVolume(): CallApiReturnType {
    AgoraConsole.warn(
      'getLoopbackRecordingVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableInEarMonitoring(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableInEarMonitoring not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setInEarMonitoringVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setInEarMonitoringVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  loadExtensionProvider(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('loadExtensionProvider not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setExtensionProviderProperty(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setExtensionProviderProperty not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  registerExtension(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('registerExtension not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableExtension(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableExtension not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableExtension2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableExtension2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setExtensionProperty(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setExtensionProperty not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getExtensionProperty(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getExtensionProperty not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setExtensionProperty2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setExtensionProperty2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getExtensionProperty2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getExtensionProperty2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setCameraCapturerConfiguration(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setCameraCapturerConfiguration not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  createCustomVideoTrack(): CallApiReturnType {
    AgoraConsole.warn('createCustomVideoTrack not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  createCustomEncodedVideoTrack(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'createCustomEncodedVideoTrack not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  destroyCustomVideoTrack(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'destroyCustomVideoTrack not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  destroyCustomEncodedVideoTrack(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'destroyCustomEncodedVideoTrack not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  switchCamera(): CallApiReturnType {
    AgoraConsole.warn('switchCamera not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  isCameraZoomSupported(): CallApiReturnType {
    AgoraConsole.warn('isCameraZoomSupported not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  isCameraFaceDetectSupported(): CallApiReturnType {
    AgoraConsole.warn(
      'isCameraFaceDetectSupported not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  isCameraTorchSupported(): CallApiReturnType {
    AgoraConsole.warn('isCameraTorchSupported not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  isCameraFocusSupported(): CallApiReturnType {
    AgoraConsole.warn('isCameraFocusSupported not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  isCameraAutoFocusFaceModeSupported(): CallApiReturnType {
    AgoraConsole.warn(
      'isCameraAutoFocusFaceModeSupported not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setCameraZoomFactor(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setCameraZoomFactor not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableFaceDetection(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableFaceDetection not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getCameraMaxZoomFactor(): CallApiReturnType {
    AgoraConsole.warn('getCameraMaxZoomFactor not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setCameraFocusPositionInPreview(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setCameraFocusPositionInPreview not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setCameraTorchOn(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setCameraTorchOn not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setCameraAutoFocusFaceModeEnabled(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setCameraAutoFocusFaceModeEnabled not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  isCameraExposurePositionSupported(): CallApiReturnType {
    AgoraConsole.warn(
      'isCameraExposurePositionSupported not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setCameraExposurePosition(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setCameraExposurePosition not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  isCameraExposureSupported(): CallApiReturnType {
    AgoraConsole.warn(
      'isCameraExposureSupported not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setCameraExposureFactor(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setCameraExposureFactor not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  isCameraAutoExposureFaceModeSupported(): CallApiReturnType {
    AgoraConsole.warn(
      'isCameraAutoExposureFaceModeSupported not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setCameraAutoExposureFaceModeEnabled(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setCameraAutoExposureFaceModeEnabled not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setDefaultAudioRouteToSpeakerphone(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setDefaultAudioRouteToSpeakerphone not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setEnableSpeakerphone(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setEnableSpeakerphone not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  isSpeakerphoneEnabled(): CallApiReturnType {
    AgoraConsole.warn('isSpeakerphoneEnabled not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setRouteInCommunicationMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setRouteInCommunicationMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getScreenCaptureSources(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'getScreenCaptureSources not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setAudioSessionOperationRestriction(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setAudioSessionOperationRestriction not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startScreenCaptureByDisplayId(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'startScreenCaptureByDisplayId not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startScreenCaptureByScreenRect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'startScreenCaptureByScreenRect not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getAudioDeviceInfo(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getAudioDeviceInfo not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startScreenCaptureByWindowId(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'startScreenCaptureByWindowId not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setScreenCaptureContentHint(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setScreenCaptureContentHint not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  updateScreenCaptureRegion(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'updateScreenCaptureRegion not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  updateScreenCaptureParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'updateScreenCaptureParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startScreenCapture(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let captureParams = obj.captureParams;
    if (captureParams === undefined) throw 'captureParams is undefined';

    return this._impl.startScreenCapture(captureParams);
  }

  updateScreenCapture(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('updateScreenCapture not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  queryScreenCaptureCapability(): CallApiReturnType {
    AgoraConsole.warn(
      'queryScreenCaptureCapability not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setScreenCaptureScenario(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setScreenCaptureScenario not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopScreenCapture(): CallApiReturnType {
    return this._impl.stopScreenCapture();
  }

  getCallId(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getCallId not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  rate(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('rate not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  complain(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('complain not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startRtmpStreamWithoutTranscoding(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'startRtmpStreamWithoutTranscoding not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startRtmpStreamWithTranscoding(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'startRtmpStreamWithTranscoding not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  updateRtmpTranscoding(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('updateRtmpTranscoding not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopRtmpStream(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('stopRtmpStream not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startLocalVideoTranscoder(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'startLocalVideoTranscoder not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  updateLocalTranscoderConfiguration(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'updateLocalTranscoderConfiguration not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopLocalVideoTranscoder(): CallApiReturnType {
    AgoraConsole.warn(
      'stopLocalVideoTranscoder not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startCameraCapture(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('startCameraCapture not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopCameraCapture(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('stopCameraCapture not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setCameraDeviceOrientation(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setCameraDeviceOrientation not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setScreenCaptureOrientation(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setScreenCaptureOrientation not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startScreenCapture2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('startScreenCapture2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopScreenCapture2(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sourceType = obj.sourceType;
    if (sourceType === undefined) throw 'sourceType is undefined';

    return this._impl.stopScreenCapture2(sourceType);
  }

  getConnectionState(): CallApiReturnType {
    AgoraConsole.warn('getConnectionState not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  registerEventHandler(apiParam: ApiParam): CallApiReturnType {
    let eventHandler = apiParam.buffer[0]; //obj.eventHandler;
    if (eventHandler === undefined) throw 'eventHandler is undefined';
    return this._impl.registerEventHandler(eventHandler);
  }

  unregisterEventHandler(apiParam: ApiParam): CallApiReturnType {
    let eventHandler = apiParam.buffer[0]; //obj.eventHandler;
    if (eventHandler === undefined) throw 'eventHandler is undefined';
    return this._impl.unregisterEventHandler(eventHandler);
  }

  setRemoteUserPriority(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setRemoteUserPriority not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setEncryptionMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setEncryptionMode not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setEncryptionSecret(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setEncryptionSecret not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableEncryption(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableEncryption not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  createDataStream(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('createDataStream not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  createDataStream2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('createDataStream2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  sendStreamMessage(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('sendStreamMessage not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  addVideoWatermark(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('addVideoWatermark not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  addVideoWatermark2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('addVideoWatermark2 not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  clearVideoWatermarks(): CallApiReturnType {
    AgoraConsole.warn('clearVideoWatermarks not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  pauseAudio(): CallApiReturnType {
    AgoraConsole.warn('pauseAudio not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  resumeAudio(): CallApiReturnType {
    AgoraConsole.warn('resumeAudio not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableWebSdkInteroperability(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'enableWebSdkInteroperability not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  sendCustomReportMessage(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'sendCustomReportMessage not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  registerMediaMetadataObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'registerMediaMetadataObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  unregisterMediaMetadataObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'unregisterMediaMetadataObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startAudioFrameDump(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('startAudioFrameDump not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopAudioFrameDump(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('stopAudioFrameDump not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setAINSMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setAINSMode not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  registerLocalUserAccount(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'registerLocalUserAccount not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  joinChannelWithUserAccount(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'joinChannelWithUserAccount not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  joinChannelWithUserAccount2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'joinChannelWithUserAccount2 not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  joinChannelWithUserAccountEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'joinChannelWithUserAccountEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getUserInfoByUserAccount(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'getUserInfoByUserAccount not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getUserInfoByUid(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('getUserInfoByUid not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startOrUpdateChannelMediaRelay(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'startOrUpdateChannelMediaRelay not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startChannelMediaRelay(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('startChannelMediaRelay not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  updateChannelMediaRelay(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'updateChannelMediaRelay not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopChannelMediaRelay(): CallApiReturnType {
    AgoraConsole.warn('stopChannelMediaRelay not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  pauseAllChannelMediaRelay(): CallApiReturnType {
    AgoraConsole.warn(
      'pauseAllChannelMediaRelay not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  resumeAllChannelMediaRelay(): CallApiReturnType {
    AgoraConsole.warn(
      'resumeAllChannelMediaRelay not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setDirectCdnStreamingAudioConfiguration(
    apiParam: ApiParam
  ): CallApiReturnType {
    AgoraConsole.warn(
      'setDirectCdnStreamingAudioConfiguration not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setDirectCdnStreamingVideoConfiguration(
    apiParam: ApiParam
  ): CallApiReturnType {
    AgoraConsole.warn(
      'setDirectCdnStreamingVideoConfiguration not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startDirectCdnStreaming(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'startDirectCdnStreaming not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopDirectCdnStreaming(): CallApiReturnType {
    AgoraConsole.warn('stopDirectCdnStreaming not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  updateDirectCdnStreamingMediaOptions(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'updateDirectCdnStreamingMediaOptions not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  startRhythmPlayer(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('startRhythmPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  stopRhythmPlayer(): CallApiReturnType {
    AgoraConsole.warn('stopRhythmPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  configRhythmPlayer(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('configRhythmPlayer not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  takeSnapshot(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('takeSnapshot not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableContentInspect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableContentInspect not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  adjustCustomAudioPublishVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'adjustCustomAudioPublishVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  adjustCustomAudioPlayoutVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'adjustCustomAudioPlayoutVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setCloudProxy(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setCloudProxy not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setLocalAccessPoint(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setLocalAccessPoint not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setAdvancedAudioOptions(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'setAdvancedAudioOptions not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setAVSyncSource(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('setAVSyncSource not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableVideoImageSource(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('enableVideoImageSource not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getCurrentMonotonicTimeInMs(): CallApiReturnType {
    AgoraConsole.warn(
      'getCurrentMonotonicTimeInMs not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableWirelessAccelerate(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'enableWirelessAccelerate not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getNetworkType(): CallApiReturnType {
    AgoraConsole.warn('getNetworkType not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  setParameters(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let parameters = obj.parameters;
    if (parameters === undefined) throw 'parameters is undefined';

    return this._impl.setParameters(parameters);
  }

  startMediaRenderingTracing(): CallApiReturnType {
    AgoraConsole.warn(
      'startMediaRenderingTracing not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  enableInstantMediaRendering(): CallApiReturnType {
    AgoraConsole.warn(
      'enableInstantMediaRendering not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  getNtpWallTimeInMs(): CallApiReturnType {
    AgoraConsole.warn('getNtpWallTimeInMs not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  isFeatureAvailableOnDevice(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'isFeatureAvailableOnDevice not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}
