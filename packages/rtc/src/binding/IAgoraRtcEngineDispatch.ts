/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  AUDIO_MIXING_REASON_TYPE,
  AUDIO_MIXING_STATE_TYPE,
  AudioVolumeInfo,
  CHANNEL_MEDIA_RELAY_ERROR,
  CHANNEL_MEDIA_RELAY_EVENT,
  CHANNEL_MEDIA_RELAY_STATE,
  CLIENT_ROLE_CHANGE_FAILED_REASON,
  CLIENT_ROLE_TYPE,
  CONNECTION_CHANGED_REASON_TYPE,
  CONNECTION_STATE_TYPE,
  CONTENT_INSPECT_RESULT,
  ClientRoleOptions,
  DIRECT_CDN_STREAMING_ERROR,
  DIRECT_CDN_STREAMING_STATE,
  DirectCdnStreamingStats,
  DownlinkNetworkInfo,
  ENCRYPTION_ERROR_TYPE,
  ERROR_CODE_TYPE,
  IRtcEngine,
  IVideoDeviceManager,
  LICENSE_ERROR_TYPE,
  LOCAL_AUDIO_STREAM_ERROR,
  LOCAL_AUDIO_STREAM_STATE,
  LOCAL_VIDEO_STREAM_ERROR,
  LOCAL_VIDEO_STREAM_STATE,
  LastmileProbeResult,
  LocalAudioStats,
  LocalVideoStats,
  MEDIA_DEVICE_STATE_TYPE,
  MEDIA_DEVICE_TYPE,
  MEDIA_TRACE_EVENT,
  Metadata,
  NETWORK_TYPE,
  PERMISSION_TYPE,
  PROXY_TYPE,
  QUALITY_TYPE,
  REMOTE_AUDIO_STATE,
  REMOTE_AUDIO_STATE_REASON,
  REMOTE_VIDEO_STATE,
  REMOTE_VIDEO_STATE_REASON,
  RHYTHM_PLAYER_ERROR_TYPE,
  RHYTHM_PLAYER_STATE_TYPE,
  RTMP_STREAMING_EVENT,
  RTMP_STREAM_PUBLISH_ERROR_TYPE,
  RTMP_STREAM_PUBLISH_STATE,
  Rectangle,
  RemoteAudioStats,
  RemoteVideoStats,
  RtcConnection,
  RtcStats,
  STREAM_PUBLISH_STATE,
  STREAM_SUBSCRIBE_STATE,
  TranscodingVideoStream,
  UPLOAD_ERROR_REASON,
  USER_OFFLINE_REASON_TYPE,
  UplinkNetworkInfo,
  UserInfo,
  VIDEO_SOURCE_TYPE,
  VIDEO_TRANSCODER_ERROR,
  VideoRenderingTracingInfo,
  WLACC_MESSAGE_REASON,
  WLACC_SUGGEST_ACTION,
  WlAccStats,
} from '@iris/native-rtc';
import { ApiParam, CallApiReturnType } from 'iris-web-core';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { IRtcEngineImpl } from '../impl/IAgoraRtcEngineImpl';
import { IVideoDeviceManagerImpl } from '../impl/IVideoDeviceManagerImpl';
import { AgoraConsole } from '../util/AgoraConsole';

export class IRtcEngineEventHandler {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onJoinChannelSuccess(channel: string, uid: number, elapsed: number): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onJoinChannelSuccess not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRejoinChannelSuccess(channel: string, uid: number, elapsed: number): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRejoinChannelSuccess not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onProxyConnected(
    channel: string,
    uid: number,
    proxyType: PROXY_TYPE,
    localProxyIp: string,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onProxyConnected not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onError(err: ERROR_CODE_TYPE, msg: string): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onError not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioQuality(
    uid: number,
    quality: number,
    delay: number,
    lost: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onAudioQuality not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLastmileProbeResult(result: LastmileProbeResult): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLastmileProbeResult not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioVolumeIndication(
    speakers: AudioVolumeInfo,
    speakerNumber: number,
    totalVolume: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onAudioVolumeIndication not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLeaveChannel(stats: RtcStats): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLeaveChannel not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRtcStats(stats: RtcStats): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRtcStats not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioDeviceStateChanged(
    deviceId: string,
    deviceType: MEDIA_DEVICE_TYPE,
    deviceState: MEDIA_DEVICE_STATE_TYPE
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onAudioDeviceStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioMixingPositionChanged(position: number): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onAudioMixingPositionChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioMixingFinished(): void {
    AgoraConsole.warn('RtcEngineEventHandler not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioEffectFinished(soundId: number): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onAudioEffectFinished not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onVideoDeviceStateChanged(
    deviceId: string,
    deviceType: MEDIA_DEVICE_TYPE,
    deviceState: MEDIA_DEVICE_STATE_TYPE
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onVideoDeviceStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onNetworkQuality(uid: number, txQuality: number, rxQuality: number): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onNetworkQuality not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onIntraRequestReceived(): void {
    AgoraConsole.warn('RtcEngineEventHandler not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUplinkNetworkInfoUpdated(info: UplinkNetworkInfo): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUplinkNetworkInfoUpdated not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onDownlinkNetworkInfoUpdated(info: DownlinkNetworkInfo): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onDownlinkNetworkInfoUpdated not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLastmileQuality(quality: QUALITY_TYPE): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLastmileQuality not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstLocalVideoFrame(
    source: VIDEO_SOURCE_TYPE,
    width: number,
    height: number,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onFirstLocalVideoFrame not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstLocalVideoFramePublished(
    source: VIDEO_SOURCE_TYPE,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onFirstLocalVideoFramePublished not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteVideoDecoded(
    uid: number,
    width: number,
    height: number,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onFirstRemoteVideoDecoded not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onVideoSizeChanged(
    sourceType: VIDEO_SOURCE_TYPE,
    uid: number,
    width: number,
    height: number,
    rotation: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onVideoSizeChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalVideoStateChanged(
    source: VIDEO_SOURCE_TYPE,
    state: LOCAL_VIDEO_STREAM_STATE,
    error: LOCAL_VIDEO_STREAM_ERROR
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLocalVideoStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteVideoStateChanged(
    uid: number,
    state: REMOTE_VIDEO_STATE,
    reason: REMOTE_VIDEO_STATE_REASON,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRemoteVideoStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteVideoFrame(
    userId: number,
    width: number,
    height: number,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onFirstRemoteVideoFrame not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserJoined(uid: number, elapsed: number): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserJoined not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserOffline(uid: number, reason: USER_OFFLINE_REASON_TYPE): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserOffline not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserMuteAudio(uid: number, muted: boolean): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserMuteAudio not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserMuteVideo(userId: number, muted: boolean): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserMuteVideo not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserEnableVideo(uid: number, enabled: boolean): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserEnableVideo not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserStateChanged(uid: number, state: number): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserEnableLocalVideo(uid: number, enabled: boolean): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserEnableLocalVideo not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalAudioStats(stats: LocalAudioStats): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLocalAudioStats not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteAudioStats(stats: RemoteAudioStats): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRemoteAudioStats not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalVideoStats(source: VIDEO_SOURCE_TYPE, stats: LocalVideoStats): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLocalVideoStats not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteVideoStats(stats: RemoteVideoStats): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRemoteVideoStats not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onCameraReady(): void {
    AgoraConsole.warn('RtcEngineEventHandler not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onCameraFocusAreaChanged(
    x: number,
    y: number,
    width: number,
    height: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onCameraFocusAreaChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onCameraExposureAreaChanged(
    x: number,
    y: number,
    width: number,
    height: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onCameraExposureAreaChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFacePositionChanged(
    imageWidth: number,
    imageHeight: number,
    vecRectangle: Rectangle[],
    vecDistance: number[],
    numFaces: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onFacePositionChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onVideoStopped(): void {
    AgoraConsole.warn('RtcEngineEventHandler not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioMixingStateChanged(
    state: AUDIO_MIXING_STATE_TYPE,
    reason: AUDIO_MIXING_REASON_TYPE
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onAudioMixingStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRhythmPlayerStateChanged(
    state: RHYTHM_PLAYER_STATE_TYPE,
    errorCode: RHYTHM_PLAYER_ERROR_TYPE
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRhythmPlayerStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionLost(): void {
    AgoraConsole.warn('RtcEngineEventHandler not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionInterrupted(): void {
    AgoraConsole.warn('RtcEngineEventHandler not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionBanned(): void {
    AgoraConsole.warn('RtcEngineEventHandler not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onStreamMessage(
    userId: number,
    streamId: number,
    data: string,
    length: number,
    sentTs: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onStreamMessage not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onStreamMessageError(
    userId: number,
    streamId: number,
    code: number,
    missed: number,
    cached: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onStreamMessageError not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRequestToken(): void {
    AgoraConsole.warn('RtcEngineEventHandler not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onTokenPrivilegeWillExpire(token: string): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onTokenPrivilegeWillExpire not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLicenseValidationFailure(error: LICENSE_ERROR_TYPE): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLicenseValidationFailure not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstLocalAudioFramePublished(elapsed: number): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onFirstLocalAudioFramePublished not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteAudioFrame(uid: number, elapsed: number): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onFirstRemoteAudioFrame not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteAudioDecoded(uid: number, elapsed: number): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onFirstRemoteAudioDecoded not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalAudioStateChanged(
    state: LOCAL_AUDIO_STREAM_STATE,
    error: LOCAL_AUDIO_STREAM_ERROR
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLocalAudioStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteAudioStateChanged(
    uid: number,
    state: REMOTE_AUDIO_STATE,
    reason: REMOTE_AUDIO_STATE_REASON,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRemoteAudioStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onActiveSpeaker(userId: number): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onActiveSpeaker not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onContentInspectResult(result: CONTENT_INSPECT_RESULT): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onContentInspectResult not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onSnapshotTaken(
    uid: number,
    filePath: string,
    width: number,
    height: number,
    errCode: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onSnapshotTaken not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onClientRoleChanged(
    oldRole: CLIENT_ROLE_TYPE,
    newRole: CLIENT_ROLE_TYPE,
    newRoleOptions: ClientRoleOptions
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onClientRoleChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onClientRoleChangeFailed(
    reason: CLIENT_ROLE_CHANGE_FAILED_REASON,
    currentRole: CLIENT_ROLE_TYPE
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onClientRoleChangeFailed not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioDeviceVolumeChanged(
    deviceType: MEDIA_DEVICE_TYPE,
    volume: number,
    muted: boolean
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onAudioDeviceVolumeChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRtmpStreamingStateChanged(
    url: string,
    state: RTMP_STREAM_PUBLISH_STATE,
    errCode: RTMP_STREAM_PUBLISH_ERROR_TYPE
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRtmpStreamingStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRtmpStreamingEvent(url: string, eventCode: RTMP_STREAMING_EVENT): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRtmpStreamingEvent not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onTranscodingUpdated(): void {
    AgoraConsole.warn('RtcEngineEventHandler not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioRoutingChanged(routing: number): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onAudioRoutingChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onChannelMediaRelayStateChanged(
    state: CHANNEL_MEDIA_RELAY_STATE,
    code: CHANNEL_MEDIA_RELAY_ERROR
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onChannelMediaRelayStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onChannelMediaRelayEvent(code: CHANNEL_MEDIA_RELAY_EVENT): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onChannelMediaRelayEvent not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalPublishFallbackToAudioOnly(isFallbackOrRecover: boolean): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLocalPublishFallbackToAudioOnly not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteSubscribeFallbackToAudioOnly(
    uid: number,
    isFallbackOrRecover: boolean
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRemoteSubscribeFallbackToAudioOnly not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteAudioTransportStats(
    uid: number,
    delay: number,
    lost: number,
    rxKBitRate: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRemoteAudioTransportStats not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteVideoTransportStats(
    uid: number,
    delay: number,
    lost: number,
    rxKBitRate: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRemoteVideoTransportStats not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionStateChanged(
    state: CONNECTION_STATE_TYPE,
    reason: CONNECTION_CHANGED_REASON_TYPE
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onConnectionStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onWlAccMessage(
    reason: WLACC_MESSAGE_REASON,
    action: WLACC_SUGGEST_ACTION,
    wlAccMsg: string
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onWlAccMessage not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onWlAccStats(currentStats: WlAccStats, averageStats: WlAccStats): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onWlAccStats not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onNetworkTypeChanged(type: NETWORK_TYPE): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onNetworkTypeChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onEncryptionError(errorType: ENCRYPTION_ERROR_TYPE): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onEncryptionError not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onPermissionError(permissionType: PERMISSION_TYPE): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onPermissionError not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalUserRegistered(uid: number, userAccount: string): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLocalUserRegistered not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserInfoUpdated(uid: number, info: UserInfo): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserInfoUpdated not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUploadLogResult(
    requestId: string,
    success: boolean,
    reason: UPLOAD_ERROR_REASON
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUploadLogResult not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioSubscribeStateChanged(
    channel: string,
    uid: number,
    oldState: STREAM_SUBSCRIBE_STATE,
    newState: STREAM_SUBSCRIBE_STATE,
    elapseSinceLastState: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onAudioSubscribeStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onVideoSubscribeStateChanged(
    channel: string,
    uid: number,
    oldState: STREAM_SUBSCRIBE_STATE,
    newState: STREAM_SUBSCRIBE_STATE,
    elapseSinceLastState: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onVideoSubscribeStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioPublishStateChanged(
    channel: string,
    oldState: STREAM_PUBLISH_STATE,
    newState: STREAM_PUBLISH_STATE,
    elapseSinceLastState: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onAudioPublishStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onVideoPublishStateChanged(
    source: VIDEO_SOURCE_TYPE,
    channel: string,
    oldState: STREAM_PUBLISH_STATE,
    newState: STREAM_PUBLISH_STATE,
    elapseSinceLastState: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onVideoPublishStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onExtensionEvent(
    provider: string,
    extension: string,
    key: string,
    value: string
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onExtensionEvent not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onExtensionStarted(provider: string, extension: string): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onExtensionStarted not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onExtensionStopped(provider: string, extension: string): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onExtensionStopped not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onExtensionError(
    provider: string,
    extension: string,
    error: number,
    message: string
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onExtensionError not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserAccountUpdated(uid: number, userAccount: string): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserAccountUpdated not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalVideoTranscoderError(
    stream: TranscodingVideoStream,
    error: VIDEO_TRANSCODER_ERROR
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLocalVideoTranscoderError not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onVideoRenderingTracingResult(
    uid: number,
    currentEvent: MEDIA_TRACE_EVENT,
    tracingInfo: VideoRenderingTracingInfo
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onVideoRenderingTracingResult not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onJoinChannelSuccessEx(connection: RtcConnection, elapsed: number): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onJoinChannelSuccessEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRejoinChannelSuccessEx(connection: RtcConnection, elapsed: number): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRejoinChannelSuccessEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioQualityEx(
    connection: RtcConnection,
    remoteUid: number,
    quality: QUALITY_TYPE,
    delay: number,
    lost: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onAudioQualityEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onAudioVolumeIndicationEx(
    connection: RtcConnection,
    speakers: AudioVolumeInfo[],
    speakerNumber: number,
    totalVolume: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onAudioVolumeIndicationEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLeaveChannelEx(connection: RtcConnection, stats: RtcStats): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLeaveChannelEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRtcStatsEx(connection: RtcConnection, stats: RtcStats): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRtcStatsEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onNetworkQualityEx(
    connection: RtcConnection,
    remoteUid: number,
    txQuality: QUALITY_TYPE,
    rxQuality: QUALITY_TYPE
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onNetworkQualityEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onIntraRequestReceivedEx(connection: RtcConnection): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onIntraRequestReceivedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstLocalVideoFramePublishedEx(
    connection: RtcConnection,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onFirstLocalVideoFramePublishedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteVideoDecodedEx(
    connection: RtcConnection,
    remoteUid: number,
    width: number,
    height: number,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onFirstRemoteVideoDecodedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onVideoSizeChangedEx(
    connection: RtcConnection,
    sourceType: VIDEO_SOURCE_TYPE,
    uid: number,
    width: number,
    height: number,
    rotation: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onVideoSizeChangedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalVideoStateChangedEx(
    connection: RtcConnection,
    state: LOCAL_VIDEO_STREAM_STATE,
    errorCode: LOCAL_VIDEO_STREAM_ERROR
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLocalVideoStateChangedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteVideoStateChangedEx(
    connection: RtcConnection,
    remoteUid: number,
    state: REMOTE_VIDEO_STATE,
    reason: REMOTE_VIDEO_STATE_REASON,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRemoteVideoStateChangedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteVideoFrameEx(
    connection: RtcConnection,
    remoteUid: number,
    width: number,
    height: number,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onFirstRemoteVideoFrameEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserJoinedEx(
    connection: RtcConnection,
    remoteUid: number,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserJoinedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserOfflineEx(
    connection: RtcConnection,
    remoteUid: number,
    reason: USER_OFFLINE_REASON_TYPE
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserOfflineEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserMuteAudioEx(
    connection: RtcConnection,
    remoteUid: number,
    muted: boolean
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserMuteAudioEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserMuteVideoEx(
    connection: RtcConnection,
    remoteUid: number,
    muted: boolean
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserMuteVideoEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserEnableVideoEx(
    connection: RtcConnection,
    remoteUid: number,
    enabled: boolean
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserEnableVideoEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserEnableLocalVideoEx(
    connection: RtcConnection,
    remoteUid: number,
    enabled: boolean
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserEnableLocalVideoEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserStateChangedEx(
    connection: RtcConnection,
    remoteUid: number,
    state: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserStateChangedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalAudioStatsEx(connection: RtcConnection, stats: LocalAudioStats): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLocalAudioStatsEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteAudioStatsEx(
    connection: RtcConnection,
    stats: RemoteAudioStats
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRemoteAudioStatsEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalVideoStatsEx(connection: RtcConnection, stats: LocalVideoStats): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLocalVideoStatsEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteVideoStatsEx(
    connection: RtcConnection,
    stats: RemoteVideoStats
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRemoteVideoStatsEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionLostEx(connection: RtcConnection): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onConnectionLostEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionInterruptedEx(connection: RtcConnection): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onConnectionInterruptedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionBannedEx(connection: RtcConnection): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onConnectionBannedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onStreamMessageEx(
    connection: RtcConnection,
    remoteUid: number,
    streamId: number,
    data: Uint8Array,
    length: number,
    sentTs: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onStreamMessageEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onStreamMessageErrorEx(
    connection: RtcConnection,
    remoteUid: number,
    streamId: number,
    code: ERROR_CODE_TYPE,
    missed: number,
    cached: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onStreamMessageErrorEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRequestTokenEx(connection: RtcConnection): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRequestTokenEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLicenseValidationFailureEx(
    connection: RtcConnection,
    reason: LICENSE_ERROR_TYPE
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLicenseValidationFailureEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onTokenPrivilegeWillExpireEx(connection: RtcConnection, token: string): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onTokenPrivilegeWillExpireEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstLocalAudioFramePublishedEx(
    connection: RtcConnection,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onFirstLocalAudioFramePublishedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteAudioFrameEx(
    connection: RtcConnection,
    userId: number,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onFirstRemoteAudioFrameEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onFirstRemoteAudioDecodedEx(
    connection: RtcConnection,
    uid: number,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onFirstRemoteAudioDecodedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onLocalAudioStateChangedEx(
    connection: RtcConnection,
    state: LOCAL_AUDIO_STREAM_STATE,
    error: LOCAL_AUDIO_STREAM_ERROR
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onLocalAudioStateChangedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteAudioStateChangedEx(
    connection: RtcConnection,
    remoteUid: number,
    state: REMOTE_AUDIO_STATE,
    reason: REMOTE_AUDIO_STATE_REASON,
    elapsed: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRemoteAudioStateChangedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onActiveSpeakerEx(connection: RtcConnection, uid: number): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onActiveSpeakerEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onClientRoleChangedEx(
    connection: RtcConnection,
    oldRole: CLIENT_ROLE_TYPE,
    newRole: CLIENT_ROLE_TYPE,
    newRoleOptions: ClientRoleOptions
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onClientRoleChangedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onClientRoleChangeFailedEx(
    connection: RtcConnection,
    reason: CLIENT_ROLE_CHANGE_FAILED_REASON,
    currentRole: CLIENT_ROLE_TYPE
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onClientRoleChangeFailedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteAudioTransportStatsEx(
    connection: RtcConnection,
    remoteUid: number,
    delay: number,
    lost: number,
    rxKBitRate: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRemoteAudioTransportStatsEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onRemoteVideoTransportStatsEx(
    connection: RtcConnection,
    remoteUid: number,
    delay: number,
    lost: number,
    rxKBitRate: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onRemoteVideoTransportStatsEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onConnectionStateChangedEx(
    connection: RtcConnection,
    state: CONNECTION_STATE_TYPE,
    reason: CONNECTION_CHANGED_REASON_TYPE
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onConnectionStateChangedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onWlAccMessageEx(
    connection: RtcConnection,
    reason: WLACC_MESSAGE_REASON,
    action: WLACC_SUGGEST_ACTION,
    wlAccMsg: string
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onWlAccMessageEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onWlAccStatsEx(
    connection: RtcConnection,
    currentStats: WlAccStats,
    averageStats: WlAccStats
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onWlAccStatsEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onNetworkTypeChangedEx(connection: RtcConnection, type: NETWORK_TYPE): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onNetworkTypeChangedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onEncryptionErrorEx(
    connection: RtcConnection,
    errorType: ENCRYPTION_ERROR_TYPE
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onEncryptionErrorEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUploadLogResultEx(
    connection: RtcConnection,
    requestId: string,
    success: boolean,
    reason: UPLOAD_ERROR_REASON
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUploadLogResultEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onUserAccountUpdatedEx(
    connection: RtcConnection,
    remoteUid: number,
    userAccount: string
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onUserAccountUpdatedEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onSnapshotTakenEx(
    connection: RtcConnection,
    uid: number,
    filePath: string,
    width: number,
    height: number,
    errCode: number
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onSnapshotTakenEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onVideoRenderingTracingResultEx(
    connection: RtcConnection,
    uid: number,
    currentEvent: MEDIA_TRACE_EVENT,
    tracingInfo: VideoRenderingTracingInfo
  ): void {
    AgoraConsole.warn(
      'RtcEngineEventHandler_onVideoRenderingTracingResultEx not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IVideoDeviceManagerDispatch implements IVideoDeviceManager {
  // @ts-ignore
  _impl: IVideoDeviceManagerImpl;
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._impl = new IVideoDeviceManagerImpl(engine);
    this._engine = engine;
  }
  // @ts-ignore
  enumerateVideoDevices(): CallApiReturnType {
    AgoraConsole.warn('VideoDeviceManager not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setDevice(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'VideoDeviceManager_setDevice not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getDevice(): CallApiReturnType {
    AgoraConsole.warn(
      'VideoDeviceManager_getDevice not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  numberOfCapabilities(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'VideoDeviceManager_numberOfCapabilities not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getCapability(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'VideoDeviceManager_getCapability not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startDeviceTest(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'VideoDeviceManager_startDeviceTest not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopDeviceTest(): CallApiReturnType {
    AgoraConsole.warn('VideoDeviceManager not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  release(): CallApiReturnType {
    AgoraConsole.warn('VideoDeviceManager not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IMetadataObserver {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  getMaxMetadataSize(): void {
    AgoraConsole.warn('MetadataObserver not supported in this platform!');
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onReadyToSendMetadata(
    metadata: Metadata,
    source_type: VIDEO_SOURCE_TYPE
  ): void {
    AgoraConsole.warn(
      'MetadataObserver_onReadyToSendMetadata not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onMetadataReceived(metadata: Metadata): void {
    AgoraConsole.warn(
      'MetadataObserver_onMetadataReceived not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IDirectCdnStreamingEventHandler {
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._engine = engine;
  }

  notifyEvent(param: ApiParam): void {
    this._engine.irisEventHandlerManager.notifyEvent('RtcEngine', param);
  }

  onDirectCdnStreamingStateChanged(
    state: DIRECT_CDN_STREAMING_STATE,
    error: DIRECT_CDN_STREAMING_ERROR,
    message: string
  ): void {
    AgoraConsole.warn(
      'DirectCdnStreamingEventHandler_onDirectCdnStreamingStateChanged not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  onDirectCdnStreamingStats(stats: DirectCdnStreamingStats): void {
    AgoraConsole.warn(
      'DirectCdnStreamingEventHandler_onDirectCdnStreamingStats not supported in this platform!'
    );
    this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}

export class IRtcEngineDispatch implements IRtcEngine {
  // @ts-ignore
  _impl: IRtcEngineImpl;
  _engine: IrisRtcEngine;

  constructor(engine: IrisRtcEngine) {
    this._impl = new IRtcEngineImpl(engine);
    this._engine = engine;
  }
  // @ts-ignore
  release(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_release not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  initialize(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_initialize not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  queryInterface(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_queryInterface not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getVersion(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_getVersion not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getErrorDescription(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_getErrorDescription not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  queryCodecCapability(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_queryCodecCapability not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  preloadChannel(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_preloadChannel not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  preloadChannel2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_preloadChannel not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  updatePreloadChannelToken(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_updatePreloadChannelToken not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  joinChannel(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_joinChannel not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  joinChannel2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_joinChannel not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  updateChannelMediaOptions(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_updateChannelMediaOptions not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  leaveChannel(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  leaveChannel2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_leaveChannel not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  renewToken(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_renewToken not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setChannelProfile(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setChannelProfile not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setClientRole(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setClientRole not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setClientRole2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setClientRole not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startEchoTest(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startEchoTest2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startEchoTest not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startEchoTest3(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startEchoTest not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopEchoTest(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableMultiCamera(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableMultiCamera not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableVideo(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  disableVideo(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startPreview(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startPreview2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_startPreview not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopPreview(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopPreview2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_stopPreview not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startLastmileProbeTest(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startLastmileProbeTest not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopLastmileProbeTest(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setVideoEncoderConfiguration(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setVideoEncoderConfiguration not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setBeautyEffectOptions(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setBeautyEffectOptions not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLowlightEnhanceOptions(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setLowlightEnhanceOptions not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setVideoDenoiserOptions(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setVideoDenoiserOptions not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setColorEnhanceOptions(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setColorEnhanceOptions not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableVirtualBackground(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableVirtualBackground not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setupRemoteVideo(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setupRemoteVideo not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setupLocalVideo(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setupLocalVideo not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setVideoScenario(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setVideoScenario not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableAudio(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  disableAudio(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setAudioProfile(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setAudioProfile not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setAudioProfile2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setAudioProfile not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setAudioScenario(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setAudioScenario not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableLocalAudio(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableLocalAudio not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  muteLocalAudioStream(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_muteLocalAudioStream not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  muteAllRemoteAudioStreams(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_muteAllRemoteAudioStreams not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setDefaultMuteAllRemoteAudioStreams(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setDefaultMuteAllRemoteAudioStreams not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  muteRemoteAudioStream(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_muteRemoteAudioStream not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  muteLocalVideoStream(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_muteLocalVideoStream not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableLocalVideo(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableLocalVideo not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  muteAllRemoteVideoStreams(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_muteAllRemoteVideoStreams not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setDefaultMuteAllRemoteVideoStreams(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setDefaultMuteAllRemoteVideoStreams not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  muteRemoteVideoStream(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_muteRemoteVideoStream not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRemoteVideoStreamType(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setRemoteVideoStreamType not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRemoteVideoSubscriptionOptions(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setRemoteVideoSubscriptionOptions not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRemoteDefaultVideoStreamType(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setRemoteDefaultVideoStreamType not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setSubscribeAudioBlocklist(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setSubscribeAudioBlocklist not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setSubscribeAudioAllowlist(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setSubscribeAudioAllowlist not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setSubscribeVideoBlocklist(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setSubscribeVideoBlocklist not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setSubscribeVideoAllowlist(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setSubscribeVideoAllowlist not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableAudioVolumeIndication(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableAudioVolumeIndication not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startAudioRecording(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startAudioRecording not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startAudioRecording2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startAudioRecording not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startAudioRecording3(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startAudioRecording not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  registerAudioEncodedFrameObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_registerAudioEncodedFrameObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopAudioRecording(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  createMediaPlayer(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  destroyMediaPlayer(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_destroyMediaPlayer not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  createMediaRecorder(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_createMediaRecorder not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  destroyMediaRecorder(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_destroyMediaRecorder not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startAudioMixing(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startAudioMixing not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startAudioMixing2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startAudioMixing not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopAudioMixing(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  pauseAudioMixing(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  resumeAudioMixing(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  selectAudioTrack(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_selectAudioTrack not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getAudioTrackCount(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  adjustAudioMixingVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_adjustAudioMixingVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  adjustAudioMixingPublishVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_adjustAudioMixingPublishVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getAudioMixingPublishVolume(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  adjustAudioMixingPlayoutVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_adjustAudioMixingPlayoutVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getAudioMixingPlayoutVolume(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getAudioMixingDuration(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getAudioMixingCurrentPosition(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setAudioMixingPosition(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setAudioMixingPosition not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setAudioMixingDualMonoMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setAudioMixingDualMonoMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setAudioMixingPitch(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setAudioMixingPitch not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getEffectsVolume(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setEffectsVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setEffectsVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  preloadEffect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_preloadEffect not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  playEffect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_playEffect not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  playAllEffects(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_playAllEffects not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getVolumeOfEffect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_getVolumeOfEffect not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setVolumeOfEffect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setVolumeOfEffect not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  pauseEffect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_pauseEffect not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  pauseAllEffects(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  resumeEffect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_resumeEffect not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  resumeAllEffects(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopEffect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_stopEffect not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopAllEffects(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  unloadEffect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_unloadEffect not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  unloadAllEffects(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getEffectDuration(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_getEffectDuration not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setEffectPosition(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setEffectPosition not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getEffectCurrentPosition(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_getEffectCurrentPosition not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableSoundPositionIndication(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableSoundPositionIndication not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRemoteVoicePosition(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setRemoteVoicePosition not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableSpatialAudio(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableSpatialAudio not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRemoteUserSpatialAudioParams(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setRemoteUserSpatialAudioParams not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setVoiceBeautifierPreset(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setVoiceBeautifierPreset not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setAudioEffectPreset(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setAudioEffectPreset not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setVoiceConversionPreset(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setVoiceConversionPreset not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setAudioEffectParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setAudioEffectParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setVoiceBeautifierParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setVoiceBeautifierParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setVoiceConversionParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setVoiceConversionParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLocalVoicePitch(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setLocalVoicePitch not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLocalVoiceFormant(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setLocalVoiceFormant not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLocalVoiceEqualization(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setLocalVoiceEqualization not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLocalVoiceReverb(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setLocalVoiceReverb not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setHeadphoneEQPreset(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setHeadphoneEQPreset not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setHeadphoneEQParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setHeadphoneEQParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLogFile(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_setLogFile not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLogFilter(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_setLogFilter not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLogLevel(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_setLogLevel not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLogFileSize(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setLogFileSize not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  uploadLogFile(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_uploadLogFile not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLocalRenderMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setLocalRenderMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRemoteRenderMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setRemoteRenderMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLocalRenderMode2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setLocalRenderMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLocalVideoMirrorMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setLocalVideoMirrorMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableDualStreamMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableDualStreamMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableDualStreamMode2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableDualStreamMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setDualStreamMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setDualStreamMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setDualStreamMode2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setDualStreamMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableCustomAudioLocalPlayback(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableCustomAudioLocalPlayback not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRecordingAudioFrameParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setRecordingAudioFrameParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setPlaybackAudioFrameParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setPlaybackAudioFrameParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setMixedAudioFrameParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setMixedAudioFrameParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setEarMonitoringAudioFrameParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setEarMonitoringAudioFrameParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setPlaybackAudioFrameBeforeMixingParameters(
    apiParam: ApiParam
  ): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setPlaybackAudioFrameBeforeMixingParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableAudioSpectrumMonitor(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableAudioSpectrumMonitor not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  disableAudioSpectrumMonitor(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  registerAudioSpectrumObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_registerAudioSpectrumObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  unregisterAudioSpectrumObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_unregisterAudioSpectrumObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  adjustRecordingSignalVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_adjustRecordingSignalVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  muteRecordingSignal(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_muteRecordingSignal not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  adjustPlaybackSignalVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_adjustPlaybackSignalVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  adjustUserPlaybackSignalVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_adjustUserPlaybackSignalVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLocalPublishFallbackOption(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setLocalPublishFallbackOption not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRemoteSubscribeFallbackOption(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setRemoteSubscribeFallbackOption not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setHighPriorityUserList(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setHighPriorityUserList not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableLoopbackRecording(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableLoopbackRecording not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  adjustLoopbackSignalVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_adjustLoopbackSignalVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getLoopbackRecordingVolume(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableInEarMonitoring(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableInEarMonitoring not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setInEarMonitoringVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setInEarMonitoringVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  loadExtensionProvider(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_loadExtensionProvider not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setExtensionProviderProperty(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setExtensionProviderProperty not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  registerExtension(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_registerExtension not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableExtension(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableExtension not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableExtension2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableExtension not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setExtensionProperty(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setExtensionProperty not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getExtensionProperty(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_getExtensionProperty not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setExtensionProperty2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setExtensionProperty not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getExtensionProperty2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_getExtensionProperty not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setCameraCapturerConfiguration(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setCameraCapturerConfiguration not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  createCustomVideoTrack(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  createCustomEncodedVideoTrack(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_createCustomEncodedVideoTrack not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  destroyCustomVideoTrack(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_destroyCustomVideoTrack not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  destroyCustomEncodedVideoTrack(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_destroyCustomEncodedVideoTrack not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  switchCamera(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  isCameraZoomSupported(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  isCameraFaceDetectSupported(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  isCameraTorchSupported(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  isCameraFocusSupported(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  isCameraAutoFocusFaceModeSupported(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setCameraZoomFactor(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setCameraZoomFactor not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableFaceDetection(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableFaceDetection not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getCameraMaxZoomFactor(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setCameraFocusPositionInPreview(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setCameraFocusPositionInPreview not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setCameraTorchOn(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setCameraTorchOn not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setCameraAutoFocusFaceModeEnabled(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setCameraAutoFocusFaceModeEnabled not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  isCameraExposurePositionSupported(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setCameraExposurePosition(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setCameraExposurePosition not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  isCameraExposureSupported(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setCameraExposureFactor(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setCameraExposureFactor not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  isCameraAutoExposureFaceModeSupported(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setCameraAutoExposureFaceModeEnabled(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setCameraAutoExposureFaceModeEnabled not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setDefaultAudioRouteToSpeakerphone(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setDefaultAudioRouteToSpeakerphone not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setEnableSpeakerphone(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setEnableSpeakerphone not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  isSpeakerphoneEnabled(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRouteInCommunicationMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setRouteInCommunicationMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getScreenCaptureSources(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_getScreenCaptureSources not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setAudioSessionOperationRestriction(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setAudioSessionOperationRestriction not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startScreenCaptureByDisplayId(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startScreenCaptureByDisplayId not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startScreenCaptureByScreenRect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startScreenCaptureByScreenRect not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getAudioDeviceInfo(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_getAudioDeviceInfo not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startScreenCaptureByWindowId(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startScreenCaptureByWindowId not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setScreenCaptureContentHint(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setScreenCaptureContentHint not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  updateScreenCaptureRegion(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_updateScreenCaptureRegion not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  updateScreenCaptureParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_updateScreenCaptureParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startScreenCapture(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startScreenCapture not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  updateScreenCapture(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_updateScreenCapture not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  queryScreenCaptureCapability(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setScreenCaptureScenario(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setScreenCaptureScenario not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopScreenCapture(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getCallId(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_getCallId not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  rate(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_rate not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  complain(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_complain not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startRtmpStreamWithoutTranscoding(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startRtmpStreamWithoutTranscoding not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startRtmpStreamWithTranscoding(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startRtmpStreamWithTranscoding not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  updateRtmpTranscoding(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_updateRtmpTranscoding not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopRtmpStream(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_stopRtmpStream not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startLocalVideoTranscoder(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startLocalVideoTranscoder not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  updateLocalTranscoderConfiguration(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_updateLocalTranscoderConfiguration not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopLocalVideoTranscoder(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startCameraCapture(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startCameraCapture not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopCameraCapture(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_stopCameraCapture not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setCameraDeviceOrientation(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setCameraDeviceOrientation not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setScreenCaptureOrientation(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setScreenCaptureOrientation not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startScreenCapture2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startScreenCapture not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopScreenCapture2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_stopScreenCapture not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getConnectionState(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  registerEventHandler(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_registerEventHandler not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  unregisterEventHandler(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_unregisterEventHandler not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setRemoteUserPriority(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setRemoteUserPriority not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  registerPacketObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_registerPacketObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setEncryptionMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setEncryptionMode not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setEncryptionSecret(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setEncryptionSecret not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableEncryption(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableEncryption not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  createDataStream(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_createDataStream not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  createDataStream2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_createDataStream not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  sendStreamMessage(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_sendStreamMessage not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  addVideoWatermark(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_addVideoWatermark not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  addVideoWatermark2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_addVideoWatermark not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  clearVideoWatermarks(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  pauseAudio(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  resumeAudio(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableWebSdkInteroperability(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableWebSdkInteroperability not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  sendCustomReportMessage(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_sendCustomReportMessage not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  registerMediaMetadataObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_registerMediaMetadataObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  unregisterMediaMetadataObserver(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_unregisterMediaMetadataObserver not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startAudioFrameDump(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startAudioFrameDump not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopAudioFrameDump(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_stopAudioFrameDump not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setAINSMode(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_setAINSMode not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  registerLocalUserAccount(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_registerLocalUserAccount not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  joinChannelWithUserAccount(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_joinChannelWithUserAccount not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  joinChannelWithUserAccount2(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_joinChannelWithUserAccount not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  joinChannelWithUserAccountEx(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_joinChannelWithUserAccountEx not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getUserInfoByUserAccount(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_getUserInfoByUserAccount not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getUserInfoByUid(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_getUserInfoByUid not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startOrUpdateChannelMediaRelay(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startOrUpdateChannelMediaRelay not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startChannelMediaRelay(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startChannelMediaRelay not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  updateChannelMediaRelay(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_updateChannelMediaRelay not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopChannelMediaRelay(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  pauseAllChannelMediaRelay(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  resumeAllChannelMediaRelay(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setDirectCdnStreamingAudioConfiguration(
    apiParam: ApiParam
  ): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setDirectCdnStreamingAudioConfiguration not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setDirectCdnStreamingVideoConfiguration(
    apiParam: ApiParam
  ): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setDirectCdnStreamingVideoConfiguration not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startDirectCdnStreaming(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startDirectCdnStreaming not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopDirectCdnStreaming(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  updateDirectCdnStreamingMediaOptions(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_updateDirectCdnStreamingMediaOptions not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startRhythmPlayer(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_startRhythmPlayer not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  stopRhythmPlayer(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  configRhythmPlayer(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_configRhythmPlayer not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  takeSnapshot(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn('RtcEngine_takeSnapshot not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableContentInspect(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableContentInspect not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  adjustCustomAudioPublishVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_adjustCustomAudioPublishVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  adjustCustomAudioPlayoutVolume(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_adjustCustomAudioPlayoutVolume not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setCloudProxy(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setCloudProxy not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setLocalAccessPoint(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setLocalAccessPoint not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setAdvancedAudioOptions(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setAdvancedAudioOptions not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setAVSyncSource(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setAVSyncSource not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableVideoImageSource(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableVideoImageSource not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getCurrentMonotonicTimeInMs(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableWirelessAccelerate(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_enableWirelessAccelerate not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getNetworkType(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  setParameters(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_setParameters not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  startMediaRenderingTracing(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  enableInstantMediaRendering(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  getNtpWallTimeInMs(): CallApiReturnType {
    AgoraConsole.warn('RtcEngine not supported in this platform!');
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }

  // @ts-ignore
  isFeatureAvailableOnDevice(apiParam: ApiParam): CallApiReturnType {
    AgoraConsole.warn(
      'RtcEngine_isFeatureAvailableOnDevice not supported in this platform!'
    );
    return this._engine.returnResult(false, -ERROR_CODE_TYPE.ERR_NOT_SUPPORTED);
  }
}
