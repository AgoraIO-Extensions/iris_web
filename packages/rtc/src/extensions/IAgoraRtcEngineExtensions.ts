/// Generated by terra, DO NOT MODIFY BY HAND.

import * as NATIVE_RTC from '@iris/web-rtc';
import { ApiParam, CallApiReturnType, EventParam } from 'iris-web-core';

import {
  IRtcEngineDispatch,
  IRtcEngineEventHandler,
} from '../binding/IAgoraRtcEngineDispatch';

import { IrisRtcEngine } from '../engine/IrisRtcEngine';
import { IRtcEngineImpl } from '../impl/IAgoraRtcEngineImpl';

export interface IRtcEngineEventHandlerExtensions
  extends IRtcEngineEventHandler {
  onJoinChannelSuccessEx(
    connection: NATIVE_RTC.RtcConnection,
    elapsed: number
  ): void;
  onLeaveChannelEx(
    connection: NATIVE_RTC.RtcConnection,
    stats: NATIVE_RTC.RtcStats
  ): void;
}

export class RtcEngineEventHandlerExtensions extends IRtcEngineEventHandler {
  constructor(engine: IrisRtcEngine) {
    super(engine);
    this._engine = engine;
  }

  onJoinChannelSuccessEx(
    connection: NATIVE_RTC.RtcConnection,
    elapsed: number
  ): void {
    let _obj = {
      connection,
      elapsed,
    };
    let _json = JSON.stringify(_obj);
    let _key = this.eventKey('onJoinChannelSuccessEx');

    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    console.log(
      `onJoinChannelSuccessEx eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }

  onLeaveChannelEx(
    connection: NATIVE_RTC.RtcConnection,
    stats: NATIVE_RTC.RtcStats
  ): void {
    let obj = {
      connection,
      stats,
    };
    let _json = JSON.stringify(obj);
    let _key = this.eventKey('onLeaveChannelEx');
    let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
    console.log(
      `onJoinChannelSuccessEx eventParam ${JSON.stringify(eventParam)}`
    );
    this.notifyEvent(eventParam);
  }
}

export interface IRtcEngineExtensions extends NATIVE_RTC.IRtcEngine {
  setAppType(appType: number): CallApiReturnType;
}

export class RtcEngineDispatchExtensions extends IRtcEngineDispatch {
  constructor(engine: IrisRtcEngine) {
    super(engine);
    this._impl = new IRtcEngineImpl(engine);
  }

  setAppType(apiParam: ApiParam): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let appType = obj.appType;
    if (appType === undefined) throw 'appType is undefined';

    return this._impl.setAppType(appType);
  }
}
