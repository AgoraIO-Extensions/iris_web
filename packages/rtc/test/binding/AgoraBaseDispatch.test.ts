/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  CallIrisApiResult,
  EventParam,
  IrisApiEngine,
  IrisCore,
} from 'iris-web-core';

import { initIrisRtc } from '../../src/index';
import { IrisRtcEngine } from '../engine/IrisRtcEngine';

const bindingAPI = require('../../src/binding/AgoraBaseDispatch');

let apiEnginePtr: IrisApiEngine;
let irisRtcEngine: IrisRtcEngine;
beforeAll(async () => {
  apiEnginePtr = IrisCore.createIrisApiEngine();
  initIrisRtc(apiEnginePtr);
  irisRtcEngine = apiEnginePtr['apiInterceptors'][0];
  irisRtcEngine.implHelper.createAudioTrack = jest.fn();
  let nParam = {
    context: 'test',
  };
  let apiParam = new EventParam(
    'RtcEngine_initialize',
    JSON.stringify(nParam),
    0,
    '',
    ['test'],
    [],
    1
  );
  await IrisCore.callIrisApi(apiEnginePtr, apiParam);
});

afterAll(() => {
  IrisCore.disposeIrisApiEngine(apiEnginePtr);
});

afterEach(() => {
  jest.clearAllMocks();
});

describe('IAudioEncodedFrameObserver', () => {
  test('onRecordAudioEncodedFrame impl call', async () => {
    let eventHandler = new bindingAPI.IAudioEncodedFrameObserver(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onRecordAudioEncodedFrame(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onRecordAudioEncodedFrame');
  });
  test('onPlaybackAudioEncodedFrame impl call', async () => {
    let eventHandler = new bindingAPI.IAudioEncodedFrameObserver(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onPlaybackAudioEncodedFrame(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onPlaybackAudioEncodedFrame');
  });
  test('onMixedAudioEncodedFrame impl call', async () => {
    let eventHandler = new bindingAPI.IAudioEncodedFrameObserver(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onMixedAudioEncodedFrame(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onMixedAudioEncodedFrame');
  });
});
