/// Generated by terra, DO NOT MODIFY BY HAND.

import { ApiParam, CallApiReturnType, EventParam } from 'iris-web-core';
import { AgoraConsole } from '../util/AgoraConsole';

export class IAudioEncodedFrameObserver {
  classPrefix: string = "AudioEncodedFrameObserver_";

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
      this._engine = engine;
  }

  eventKey(event: string): string {
      return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: EventParam): void {
      this._engine.irisEventHandlerManager.notifyEvent("RtcEngine", param);
  }

    onRecordAudioEncodedFrame(frameBuffer:Uint8Array,length:number,audioEncodedFrameInfo:EncodedAudioFrameInfo ,): void {
      let _obj = {
        frameBuffer,length,audioEncodedFrameInfo,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRecordAudioEncodedFrame');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRecordAudioEncodedFrame eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onPlaybackAudioEncodedFrame(frameBuffer:Uint8Array,length:number,audioEncodedFrameInfo:EncodedAudioFrameInfo ,): void {
      let _obj = {
        frameBuffer,length,audioEncodedFrameInfo,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onPlaybackAudioEncodedFrame');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onPlaybackAudioEncodedFrame eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onMixedAudioEncodedFrame(frameBuffer:Uint8Array,length:number,audioEncodedFrameInfo:EncodedAudioFrameInfo ,): void {
      let _obj = {
        frameBuffer,length,audioEncodedFrameInfo,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onMixedAudioEncodedFrame');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onMixedAudioEncodedFrame eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

}

