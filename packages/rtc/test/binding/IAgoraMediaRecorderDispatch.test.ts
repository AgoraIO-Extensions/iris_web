/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  CallIrisApiResult,
  EventParam,
  IrisApiEngine,
  IrisCore,
} from 'iris-web-core';

import { initIrisRtc } from '../../src/index';
import { IrisRtcEngine } from '../engine/IrisRtcEngine';

let apiEnginePtr: IrisApiEngine;
let irisRtcEngine: IrisRtcEngine;
beforeAll(() => {
  apiEnginePtr = IrisCore.createIrisApiEngine();
  initIrisRtc(apiEnginePtr);
  irisRtcEngine = apiEnginePtr['apiInterceptors'][0];
});

afterAll(() => {
  IrisCore.disposeIrisApiEngine(apiEnginePtr);
});

describe('IMediaRecorder', () => {
  test('setMediaRecorderObserver parameter', async () => {
    let nParam = {
      callback: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaRecorder_setMediaRecorderObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setMediaRecorderObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaRecorder')._impl,
        'setMediaRecorderObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      callback: 'test',
    };
    let apiParam = new EventParam(
      'MediaRecorder_setMediaRecorderObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaRecorder')._impl
        .setMediaRecorderObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaRecorder')._impl
        .setMediaRecorderObserver
    ).toBeCalledWith('test');
  });
  test('startRecording parameter', async () => {
    let nParam = {
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaRecorder_startRecording',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startRecording impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaRecorder')._impl,
        'startRecording'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      config: 'test',
    };
    let apiParam = new EventParam(
      'MediaRecorder_startRecording',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaRecorder')._impl.startRecording
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaRecorder')._impl.startRecording
    ).toBeCalledWith('test');
  });

  test('stopRecording impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaRecorder')._impl,
        'stopRecording'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaRecorder_stopRecording',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaRecorder')._impl.stopRecording
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaRecorder')._impl.stopRecording
    ).toBeCalledWith();
  });
});
