/// Generated by terra, DO NOT MODIFY BY HAND.

import { ApiParam, CallApiReturnType, EventParam } from 'iris-web-core';
import { AgoraConsole } from '../util/AgoraConsole';

export class IRtcEngineEventHandler {
  classPrefix: string = "RtcEngineEventHandler_";

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
      this._engine = engine;
  }

  eventKey(event: string): string {
      return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: EventParam): void {
      this._engine.irisEventHandlerManager.notifyEvent("RtcEngine", param);
  }

    onJoinChannelSuccess(channel:string,uid:number,elapsed:number,): void {
      let _obj = {
        channel,uid,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onJoinChannelSuccess');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onJoinChannelSuccess eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRejoinChannelSuccess(channel:string,uid:number,elapsed:number,): void {
      let _obj = {
        channel,uid,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRejoinChannelSuccess');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRejoinChannelSuccess eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onProxyConnected(channel:string,uid:number,proxyType:PROXY_TYPE,localProxyIp:string,elapsed:number,): void {
      let _obj = {
        channel,uid,proxyType,localProxyIp,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onProxyConnected');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onProxyConnected eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onError(err:ERROR_CODE_TYPE,msg:string,): void {
      let _obj = {
        err,msg,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onError');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onError eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onAudioQuality(uid:number,quality:number,delay:number,lost:number,): void {
      let _obj = {
        uid,quality,delay,lost,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onAudioQuality');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onAudioQuality eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onLastmileProbeResult(result:LastmileProbeResult ,): void {
      let _obj = {
        result,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onLastmileProbeResult');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onLastmileProbeResult eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onAudioVolumeIndication(speakers:AudioVolumeInfo [],speakerNumber:number,totalVolume:number,): void {
      let _obj = {
        speakers,speakerNumber,totalVolume,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onAudioVolumeIndication');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onAudioVolumeIndication eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onLeaveChannel(stats:RtcStats ,): void {
      let _obj = {
        stats,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onLeaveChannel');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onLeaveChannel eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRtcStats(stats:RtcStats ,): void {
      let _obj = {
        stats,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRtcStats');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRtcStats eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onAudioDeviceStateChanged(deviceId:string,deviceType:number,deviceState:number,): void {
      let _obj = {
        deviceId,deviceType,deviceState,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onAudioDeviceStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onAudioDeviceStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onAudioMixingPositionChanged(position:number,): void {
      let _obj = {
        position,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onAudioMixingPositionChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onAudioMixingPositionChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onAudioMixingFinished(): void {
      let _obj = {
        
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onAudioMixingFinished');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onAudioMixingFinished eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onAudioEffectFinished(soundId:number,): void {
      let _obj = {
        soundId,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onAudioEffectFinished');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onAudioEffectFinished eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onVideoDeviceStateChanged(deviceId:string,deviceType:number,deviceState:number,): void {
      let _obj = {
        deviceId,deviceType,deviceState,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onVideoDeviceStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onVideoDeviceStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onNetworkQuality(uid:number,txQuality:number,rxQuality:number,): void {
      let _obj = {
        uid,txQuality,rxQuality,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onNetworkQuality');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onNetworkQuality eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onIntraRequestReceived(): void {
      let _obj = {
        
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onIntraRequestReceived');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onIntraRequestReceived eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUplinkNetworkInfoUpdated(info:UplinkNetworkInfo ,): void {
      let _obj = {
        info,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUplinkNetworkInfoUpdated');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUplinkNetworkInfoUpdated eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onDownlinkNetworkInfoUpdated(info:DownlinkNetworkInfo ,): void {
      let _obj = {
        info,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onDownlinkNetworkInfoUpdated');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onDownlinkNetworkInfoUpdated eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onLastmileQuality(quality:number,): void {
      let _obj = {
        quality,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onLastmileQuality');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onLastmileQuality eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onFirstLocalVideoFrame(source:VIDEO_SOURCE_TYPE,width:number,height:number,elapsed:number,): void {
      let _obj = {
        source,width,height,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onFirstLocalVideoFrame');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onFirstLocalVideoFrame eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onFirstLocalVideoFramePublished(source:VIDEO_SOURCE_TYPE,elapsed:number,): void {
      let _obj = {
        source,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onFirstLocalVideoFramePublished');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onFirstLocalVideoFramePublished eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onFirstRemoteVideoDecoded(uid:number,width:number,height:number,elapsed:number,): void {
      let _obj = {
        uid,width,height,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onFirstRemoteVideoDecoded');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onFirstRemoteVideoDecoded eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onVideoSizeChanged(sourceType:VIDEO_SOURCE_TYPE,uid:number,width:number,height:number,rotation:number,): void {
      let _obj = {
        sourceType,uid,width,height,rotation,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onVideoSizeChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onVideoSizeChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onLocalVideoStateChanged(source:VIDEO_SOURCE_TYPE,state:LOCAL_VIDEO_STREAM_STATE,error:LOCAL_VIDEO_STREAM_ERROR,): void {
      let _obj = {
        source,state,error,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onLocalVideoStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onLocalVideoStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRemoteVideoStateChanged(uid:number,state:REMOTE_VIDEO_STATE,reason:REMOTE_VIDEO_STATE_REASON,elapsed:number,): void {
      let _obj = {
        uid,state,reason,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRemoteVideoStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRemoteVideoStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onFirstRemoteVideoFrame(userId:number,width:number,height:number,elapsed:number,): void {
      let _obj = {
        userId,width,height,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onFirstRemoteVideoFrame');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onFirstRemoteVideoFrame eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserJoined(uid:number,elapsed:number,): void {
      let _obj = {
        uid,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserJoined');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserJoined eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserOffline(uid:number,reason:USER_OFFLINE_REASON_TYPE,): void {
      let _obj = {
        uid,reason,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserOffline');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserOffline eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserMuteAudio(uid:number,muted:boolean,): void {
      let _obj = {
        uid,muted,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserMuteAudio');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserMuteAudio eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserMuteVideo(userId:number,muted:boolean,): void {
      let _obj = {
        userId,muted,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserMuteVideo');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserMuteVideo eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserEnableVideo(uid:number,enabled:boolean,): void {
      let _obj = {
        uid,enabled,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserEnableVideo');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserEnableVideo eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserStateChanged(uid:number,state:number,): void {
      let _obj = {
        uid,state,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserEnableLocalVideo(uid:number,enabled:boolean,): void {
      let _obj = {
        uid,enabled,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserEnableLocalVideo');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserEnableLocalVideo eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onLocalAudioStats(stats:LocalAudioStats ,): void {
      let _obj = {
        stats,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onLocalAudioStats');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onLocalAudioStats eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRemoteAudioStats(stats:RemoteAudioStats ,): void {
      let _obj = {
        stats,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRemoteAudioStats');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRemoteAudioStats eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onLocalVideoStats(source:VIDEO_SOURCE_TYPE,stats:LocalVideoStats ,): void {
      let _obj = {
        source,stats,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onLocalVideoStats');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onLocalVideoStats eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRemoteVideoStats(stats:RemoteVideoStats ,): void {
      let _obj = {
        stats,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRemoteVideoStats');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRemoteVideoStats eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onCameraReady(): void {
      let _obj = {
        
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onCameraReady');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onCameraReady eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onCameraFocusAreaChanged(x:number,y:number,width:number,height:number,): void {
      let _obj = {
        x,y,width,height,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onCameraFocusAreaChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onCameraFocusAreaChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onCameraExposureAreaChanged(x:number,y:number,width:number,height:number,): void {
      let _obj = {
        x,y,width,height,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onCameraExposureAreaChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onCameraExposureAreaChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onFacePositionChanged(imageWidth:number,imageHeight:number,vecRectangle:Rectangle [],vecDistance:number[],numFaces:number,): void {
      let _obj = {
        imageWidth,imageHeight,vecRectangle,vecDistance,numFaces,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onFacePositionChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onFacePositionChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onVideoStopped(): void {
      let _obj = {
        
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onVideoStopped');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onVideoStopped eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onAudioMixingStateChanged(state:AUDIO_MIXING_STATE_TYPE,reason:AUDIO_MIXING_REASON_TYPE,): void {
      let _obj = {
        state,reason,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onAudioMixingStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onAudioMixingStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRhythmPlayerStateChanged(state:RHYTHM_PLAYER_STATE_TYPE,errorCode:RHYTHM_PLAYER_ERROR_TYPE,): void {
      let _obj = {
        state,errorCode,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRhythmPlayerStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRhythmPlayerStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onConnectionLost(): void {
      let _obj = {
        
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onConnectionLost');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onConnectionLost eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onConnectionInterrupted(): void {
      let _obj = {
        
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onConnectionInterrupted');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onConnectionInterrupted eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onConnectionBanned(): void {
      let _obj = {
        
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onConnectionBanned');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onConnectionBanned eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onStreamMessage(userId:number,streamId:number,data:string,length:number,sentTs:number,): void {
      let _obj = {
        userId,streamId,data,length,sentTs,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onStreamMessage');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onStreamMessage eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onStreamMessageError(userId:number,streamId:number,code:number,missed:number,cached:number,): void {
      let _obj = {
        userId,streamId,code,missed,cached,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onStreamMessageError');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onStreamMessageError eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRequestToken(): void {
      let _obj = {
        
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRequestToken');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRequestToken eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onTokenPrivilegeWillExpire(token:string,): void {
      let _obj = {
        token,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onTokenPrivilegeWillExpire');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onTokenPrivilegeWillExpire eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onLicenseValidationFailure(error:LICENSE_ERROR_TYPE,): void {
      let _obj = {
        error,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onLicenseValidationFailure');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onLicenseValidationFailure eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onFirstLocalAudioFramePublished(elapsed:number,): void {
      let _obj = {
        elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onFirstLocalAudioFramePublished');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onFirstLocalAudioFramePublished eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onFirstRemoteAudioFrame(uid:number,elapsed:number,): void {
      let _obj = {
        uid,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onFirstRemoteAudioFrame');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onFirstRemoteAudioFrame eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onFirstRemoteAudioDecoded(uid:number,elapsed:number,): void {
      let _obj = {
        uid,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onFirstRemoteAudioDecoded');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onFirstRemoteAudioDecoded eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onLocalAudioStateChanged(state:LOCAL_AUDIO_STREAM_STATE,error:LOCAL_AUDIO_STREAM_ERROR,): void {
      let _obj = {
        state,error,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onLocalAudioStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onLocalAudioStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRemoteAudioStateChanged(uid:number,state:REMOTE_AUDIO_STATE,reason:REMOTE_AUDIO_STATE_REASON,elapsed:number,): void {
      let _obj = {
        uid,state,reason,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRemoteAudioStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRemoteAudioStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onActiveSpeaker(userId:number,): void {
      let _obj = {
        userId,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onActiveSpeaker');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onActiveSpeaker eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onContentInspectResult(result:CONTENT_INSPECT_RESULT,): void {
      let _obj = {
        result,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onContentInspectResult');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onContentInspectResult eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onSnapshotTaken(uid:number,filePath:string,width:number,height:number,errCode:number,): void {
      let _obj = {
        uid,filePath,width,height,errCode,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onSnapshotTaken');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onSnapshotTaken eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onClientRoleChanged(oldRole:CLIENT_ROLE_TYPE,newRole:CLIENT_ROLE_TYPE,newRoleOptions:ClientRoleOptions ,): void {
      let _obj = {
        oldRole,newRole,newRoleOptions,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onClientRoleChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onClientRoleChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onClientRoleChangeFailed(reason:CLIENT_ROLE_CHANGE_FAILED_REASON,currentRole:CLIENT_ROLE_TYPE,): void {
      let _obj = {
        reason,currentRole,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onClientRoleChangeFailed');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onClientRoleChangeFailed eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onAudioDeviceVolumeChanged(deviceType:MEDIA_DEVICE_TYPE,volume:number,muted:boolean,): void {
      let _obj = {
        deviceType,volume,muted,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onAudioDeviceVolumeChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onAudioDeviceVolumeChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRtmpStreamingStateChanged(url:string,state:RTMP_STREAM_PUBLISH_STATE,errCode:RTMP_STREAM_PUBLISH_ERROR_TYPE,): void {
      let _obj = {
        url,state,errCode,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRtmpStreamingStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRtmpStreamingStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRtmpStreamingEvent(url:string,eventCode:RTMP_STREAMING_EVENT,): void {
      let _obj = {
        url,eventCode,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRtmpStreamingEvent');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRtmpStreamingEvent eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onTranscodingUpdated(): void {
      let _obj = {
        
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onTranscodingUpdated');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onTranscodingUpdated eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onAudioRoutingChanged(routing:number,): void {
      let _obj = {
        routing,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onAudioRoutingChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onAudioRoutingChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onChannelMediaRelayStateChanged(state:number,code:number,): void {
      let _obj = {
        state,code,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onChannelMediaRelayStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onChannelMediaRelayStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onChannelMediaRelayEvent(code:number,): void {
      let _obj = {
        code,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onChannelMediaRelayEvent');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onChannelMediaRelayEvent eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onLocalPublishFallbackToAudioOnly(isFallbackOrRecover:boolean,): void {
      let _obj = {
        isFallbackOrRecover,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onLocalPublishFallbackToAudioOnly');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onLocalPublishFallbackToAudioOnly eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRemoteSubscribeFallbackToAudioOnly(uid:number,isFallbackOrRecover:boolean,): void {
      let _obj = {
        uid,isFallbackOrRecover,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRemoteSubscribeFallbackToAudioOnly');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRemoteSubscribeFallbackToAudioOnly eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRemoteAudioTransportStats(uid:number,delay:number,lost:number,rxKBitRate:number,): void {
      let _obj = {
        uid,delay,lost,rxKBitRate,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRemoteAudioTransportStats');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRemoteAudioTransportStats eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRemoteVideoTransportStats(uid:number,delay:number,lost:number,rxKBitRate:number,): void {
      let _obj = {
        uid,delay,lost,rxKBitRate,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRemoteVideoTransportStats');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRemoteVideoTransportStats eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onConnectionStateChanged(state:CONNECTION_STATE_TYPE,reason:CONNECTION_CHANGED_REASON_TYPE,): void {
      let _obj = {
        state,reason,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onConnectionStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onConnectionStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onWlAccMessage(reason:WLACC_MESSAGE_REASON,action:WLACC_SUGGEST_ACTION,wlAccMsg:string,): void {
      let _obj = {
        reason,action,wlAccMsg,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onWlAccMessage');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onWlAccMessage eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onWlAccStats(currentStats:WlAccStats,averageStats:WlAccStats,): void {
      let _obj = {
        currentStats,averageStats,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onWlAccStats');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onWlAccStats eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onNetworkTypeChanged(type:NETWORK_TYPE,): void {
      let _obj = {
        type,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onNetworkTypeChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onNetworkTypeChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onEncryptionError(errorType:ENCRYPTION_ERROR_TYPE,): void {
      let _obj = {
        errorType,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onEncryptionError');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onEncryptionError eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onPermissionError(permissionType:PERMISSION_TYPE,): void {
      let _obj = {
        permissionType,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onPermissionError');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onPermissionError eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onLocalUserRegistered(uid:number,userAccount:string,): void {
      let _obj = {
        uid,userAccount,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onLocalUserRegistered');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onLocalUserRegistered eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserInfoUpdated(uid:number,info:UserInfo ,): void {
      let _obj = {
        uid,info,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserInfoUpdated');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserInfoUpdated eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUploadLogResult(requestId:string,success:boolean,reason:UPLOAD_ERROR_REASON,): void {
      let _obj = {
        requestId,success,reason,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUploadLogResult');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUploadLogResult eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onAudioSubscribeStateChanged(channel:string,uid:number,oldState:STREAM_SUBSCRIBE_STATE,newState:STREAM_SUBSCRIBE_STATE,elapseSinceLastState:number,): void {
      let _obj = {
        channel,uid,oldState,newState,elapseSinceLastState,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onAudioSubscribeStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onAudioSubscribeStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onVideoSubscribeStateChanged(channel:string,uid:number,oldState:STREAM_SUBSCRIBE_STATE,newState:STREAM_SUBSCRIBE_STATE,elapseSinceLastState:number,): void {
      let _obj = {
        channel,uid,oldState,newState,elapseSinceLastState,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onVideoSubscribeStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onVideoSubscribeStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onAudioPublishStateChanged(channel:string,oldState:STREAM_PUBLISH_STATE,newState:STREAM_PUBLISH_STATE,elapseSinceLastState:number,): void {
      let _obj = {
        channel,oldState,newState,elapseSinceLastState,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onAudioPublishStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onAudioPublishStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onVideoPublishStateChanged(source:VIDEO_SOURCE_TYPE,channel:string,oldState:STREAM_PUBLISH_STATE,newState:STREAM_PUBLISH_STATE,elapseSinceLastState:number,): void {
      let _obj = {
        source,channel,oldState,newState,elapseSinceLastState,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onVideoPublishStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onVideoPublishStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onExtensionEvent(provider:string,extension:string,key:string,value:string,): void {
      let _obj = {
        provider,extension,key,value,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onExtensionEvent');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onExtensionEvent eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onExtensionStarted(provider:string,extension:string,): void {
      let _obj = {
        provider,extension,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onExtensionStarted');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onExtensionStarted eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onExtensionStopped(provider:string,extension:string,): void {
      let _obj = {
        provider,extension,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onExtensionStopped');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onExtensionStopped eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onExtensionError(provider:string,extension:string,error:number,message:string,): void {
      let _obj = {
        provider,extension,error,message,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onExtensionError');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onExtensionError eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserAccountUpdated(uid:number,userAccount:string,): void {
      let _obj = {
        uid,userAccount,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserAccountUpdated');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserAccountUpdated eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onLocalVideoTranscoderError(stream:TranscodingVideoStream ,error:VIDEO_TRANSCODER_ERROR,): void {
      let _obj = {
        stream,error,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onLocalVideoTranscoderError');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onLocalVideoTranscoderError eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onVideoRenderingTracingResult(uid:number,currentEvent:MEDIA_TRACE_EVENT,tracingInfo:VideoRenderingTracingInfo,): void {
      let _obj = {
        uid,currentEvent,tracingInfo,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onVideoRenderingTracingResult');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onVideoRenderingTracingResult eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

}

export class IVideoDeviceManagerDispatch{
    _impl: IVideoDeviceManagerImpl;
    
    constructor(engine: IrisRtcEngine) {
      this._impl = new IVideoDeviceManagerImpl(engine);
    }
  enumerateVideoDevices(
    
    
    ): CallApiReturnType {

    return this._impl.enumerateVideoDevices();
  }

  setDevice(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let deviceIdUTF8 = obj.deviceIdUTF8;
    if (deviceIdUTF8 === undefined) throw "deviceIdUTF8 is undefined";

    return this._impl.setDevice(deviceIdUTF8,);
  }

  getDevice(
    
    
    ): CallApiReturnType {

    return this._impl.getDevice();
  }

  numberOfCapabilities(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let deviceIdUTF8 = obj.deviceIdUTF8;
    if (deviceIdUTF8 === undefined) throw "deviceIdUTF8 is undefined";

    return this._impl.numberOfCapabilities(deviceIdUTF8,);
  }

  getCapability(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let deviceIdUTF8 = obj.deviceIdUTF8;
    if (deviceIdUTF8 === undefined) throw "deviceIdUTF8 is undefined";
    let deviceCapabilityNumber = obj.deviceCapabilityNumber;
    if (deviceCapabilityNumber === undefined) throw "deviceCapabilityNumber is undefined";
    let capability = obj.capability;
    if (capability === undefined) throw "capability is undefined";

    return this._impl.getCapability(deviceIdUTF8,deviceCapabilityNumber,capability,);
  }

  startDeviceTest(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let hwnd = obj.hwnd;
    if (hwnd === undefined) throw "hwnd is undefined";

    return this._impl.startDeviceTest(hwnd,);
  }

  stopDeviceTest(
    
    
    ): CallApiReturnType {

    return this._impl.stopDeviceTest();
  }

  release(
    
    
    ): CallApiReturnType {

    return this._impl.release();
  }

}

export class IMetadataObserver {
  classPrefix: string = "MetadataObserver_";

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
      this._engine = engine;
  }

  eventKey(event: string): string {
      return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: EventParam): void {
      this._engine.irisEventHandlerManager.notifyEvent("RtcEngine", param);
  }

    onMetadataReceived(metadata:Metadata ,): void {
      let _obj = {
        metadata,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onMetadataReceived');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onMetadataReceived eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

}

export class IDirectCdnStreamingEventHandler {
  classPrefix: string = "DirectCdnStreamingEventHandler_";

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
      this._engine = engine;
  }

  eventKey(event: string): string {
      return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: EventParam): void {
      this._engine.irisEventHandlerManager.notifyEvent("RtcEngine", param);
  }

    onDirectCdnStreamingStateChanged(state:DIRECT_CDN_STREAMING_STATE,error:DIRECT_CDN_STREAMING_ERROR,message:string,): void {
      let _obj = {
        state,error,message,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onDirectCdnStreamingStateChanged');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onDirectCdnStreamingStateChanged eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onDirectCdnStreamingStats(stats:DirectCdnStreamingStats ,): void {
      let _obj = {
        stats,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onDirectCdnStreamingStats');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onDirectCdnStreamingStats eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

}

export class IRtcEngineDispatch{
    _impl: IRtcEngineImpl;
    
    constructor(engine: IrisRtcEngine) {
      this._impl = new IRtcEngineImpl(engine);
    }
  release(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sync = obj.sync;
    if (sync === undefined) throw "sync is undefined";

    return this._impl.release(sync,);
  }

  initialize(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let context = obj.context;
    if (context === undefined) throw "context is undefined";

    return this._impl.initialize(context,);
  }

  getVersion(
    
    
    ): CallApiReturnType {

    return this._impl.getVersion();
  }

  getErrorDescription(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let code = obj.code;
    if (code === undefined) throw "code is undefined";

    return this._impl.getErrorDescription(code,);
  }

  queryCodecCapability(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let codecInfo = obj.codecInfo;
    if (codecInfo === undefined) throw "codecInfo is undefined";
    let size = obj.size;
    if (size === undefined) throw "size is undefined";

    return this._impl.queryCodecCapability(codecInfo,size,);
  }

  preloadChannel(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) throw "token is undefined";
    let channelId = obj.channelId;
    if (channelId === undefined) throw "channelId is undefined";
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";

    return this._impl.preloadChannel(token,channelId,uid,);
  }

  preloadChannel2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) throw "token is undefined";
    let channelId = obj.channelId;
    if (channelId === undefined) throw "channelId is undefined";
    let userAccount = obj.userAccount;
    if (userAccount === undefined) throw "userAccount is undefined";

    return this._impl.preloadChannel2(token,channelId,userAccount,);
  }

  updatePreloadChannelToken(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) throw "token is undefined";

    return this._impl.updatePreloadChannelToken(token,);
  }

  joinChannel(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) throw "token is undefined";
    let channelId = obj.channelId;
    if (channelId === undefined) throw "channelId is undefined";
    let info = obj.info;
    if (info === undefined) throw "info is undefined";
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";

    return this._impl.joinChannel(token,channelId,info,uid,);
  }

  joinChannel2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) throw "token is undefined";
    let channelId = obj.channelId;
    if (channelId === undefined) throw "channelId is undefined";
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";

    return this._impl.joinChannel2(token,channelId,uid,options,);
  }

  updateChannelMediaOptions(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let options = obj.options;
    if (options === undefined) throw "options is undefined";

    return this._impl.updateChannelMediaOptions(options,);
  }

  leaveChannel(
    
    
    ): CallApiReturnType {

    return this._impl.leaveChannel();
  }

  leaveChannel2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let options = obj.options;
    if (options === undefined) throw "options is undefined";

    return this._impl.leaveChannel2(options,);
  }

  renewToken(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) throw "token is undefined";

    return this._impl.renewToken(token,);
  }

  setChannelProfile(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let profile = obj.profile;
    if (profile === undefined) throw "profile is undefined";

    return this._impl.setChannelProfile(profile,);
  }

  setClientRole(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let role = obj.role;
    if (role === undefined) throw "role is undefined";

    return this._impl.setClientRole(role,);
  }

  setClientRole2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let role = obj.role;
    if (role === undefined) throw "role is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";

    return this._impl.setClientRole2(role,options,);
  }

  startEchoTest(
    
    
    ): CallApiReturnType {

    return this._impl.startEchoTest();
  }

  startEchoTest2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let intervalInSeconds = obj.intervalInSeconds;
    if (intervalInSeconds === undefined) throw "intervalInSeconds is undefined";

    return this._impl.startEchoTest2(intervalInSeconds,);
  }

  startEchoTest3(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.startEchoTest3(config,);
  }

  stopEchoTest(
    
    
    ): CallApiReturnType {

    return this._impl.stopEchoTest();
  }

  enableMultiCamera(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.enableMultiCamera(enabled,config,);
  }

  enableVideo(
    
    
    ): CallApiReturnType {

    return this._impl.enableVideo();
  }

  disableVideo(
    
    
    ): CallApiReturnType {

    return this._impl.disableVideo();
  }

  startPreview(
    
    
    ): CallApiReturnType {

    return this._impl.startPreview();
  }

  startPreview2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sourceType = obj.sourceType;
    if (sourceType === undefined) throw "sourceType is undefined";

    return this._impl.startPreview2(sourceType,);
  }

  stopPreview(
    
    
    ): CallApiReturnType {

    return this._impl.stopPreview();
  }

  stopPreview2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sourceType = obj.sourceType;
    if (sourceType === undefined) throw "sourceType is undefined";

    return this._impl.stopPreview2(sourceType,);
  }

  startLastmileProbeTest(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.startLastmileProbeTest(config,);
  }

  stopLastmileProbeTest(
    
    
    ): CallApiReturnType {

    return this._impl.stopLastmileProbeTest();
  }

  setVideoEncoderConfiguration(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.setVideoEncoderConfiguration(config,);
  }

  setBeautyEffectOptions(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";
    let type = obj.type;
    if (type === undefined) throw "type is undefined";

    return this._impl.setBeautyEffectOptions(enabled,options,type,);
  }

  setLowlightEnhanceOptions(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";
    let type = obj.type;
    if (type === undefined) throw "type is undefined";

    return this._impl.setLowlightEnhanceOptions(enabled,options,type,);
  }

  setVideoDenoiserOptions(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";
    let type = obj.type;
    if (type === undefined) throw "type is undefined";

    return this._impl.setVideoDenoiserOptions(enabled,options,type,);
  }

  setColorEnhanceOptions(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";
    let type = obj.type;
    if (type === undefined) throw "type is undefined";

    return this._impl.setColorEnhanceOptions(enabled,options,type,);
  }

  enableVirtualBackground(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let backgroundSource = obj.backgroundSource;
    if (backgroundSource === undefined) throw "backgroundSource is undefined";
    let segproperty = obj.segproperty;
    if (segproperty === undefined) throw "segproperty is undefined";
    let type = obj.type;
    if (type === undefined) throw "type is undefined";

    return this._impl.enableVirtualBackground(enabled,backgroundSource,segproperty,type,);
  }

  setupRemoteVideo(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let canvas = obj.canvas;
    if (canvas === undefined) throw "canvas is undefined";

    return this._impl.setupRemoteVideo(canvas,);
  }

  setupLocalVideo(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let canvas = obj.canvas;
    if (canvas === undefined) throw "canvas is undefined";

    return this._impl.setupLocalVideo(canvas,);
  }

  setVideoScenario(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let scenarioType = obj.scenarioType;
    if (scenarioType === undefined) throw "scenarioType is undefined";

    return this._impl.setVideoScenario(scenarioType,);
  }

  enableAudio(
    
    
    ): CallApiReturnType {

    return this._impl.enableAudio();
  }

  disableAudio(
    
    
    ): CallApiReturnType {

    return this._impl.disableAudio();
  }

  setAudioProfile(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let profile = obj.profile;
    if (profile === undefined) throw "profile is undefined";
    let scenario = obj.scenario;
    if (scenario === undefined) throw "scenario is undefined";

    return this._impl.setAudioProfile(profile,scenario,);
  }

  setAudioProfile2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let profile = obj.profile;
    if (profile === undefined) throw "profile is undefined";

    return this._impl.setAudioProfile2(profile,);
  }

  setAudioScenario(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let scenario = obj.scenario;
    if (scenario === undefined) throw "scenario is undefined";

    return this._impl.setAudioScenario(scenario,);
  }

  enableLocalAudio(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";

    return this._impl.enableLocalAudio(enabled,);
  }

  muteLocalAudioStream(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";

    return this._impl.muteLocalAudioStream(mute,);
  }

  muteAllRemoteAudioStreams(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";

    return this._impl.muteAllRemoteAudioStreams(mute,);
  }

  setDefaultMuteAllRemoteAudioStreams(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";

    return this._impl.setDefaultMuteAllRemoteAudioStreams(mute,);
  }

  muteRemoteAudioStream(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";

    return this._impl.muteRemoteAudioStream(uid,mute,);
  }

  muteLocalVideoStream(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";

    return this._impl.muteLocalVideoStream(mute,);
  }

  enableLocalVideo(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";

    return this._impl.enableLocalVideo(enabled,);
  }

  muteAllRemoteVideoStreams(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";

    return this._impl.muteAllRemoteVideoStreams(mute,);
  }

  setDefaultMuteAllRemoteVideoStreams(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";

    return this._impl.setDefaultMuteAllRemoteVideoStreams(mute,);
  }

  muteRemoteVideoStream(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";

    return this._impl.muteRemoteVideoStream(uid,mute,);
  }

  setRemoteVideoStreamType(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let streamType = obj.streamType;
    if (streamType === undefined) throw "streamType is undefined";

    return this._impl.setRemoteVideoStreamType(uid,streamType,);
  }

  setRemoteVideoSubscriptionOptions(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";

    return this._impl.setRemoteVideoSubscriptionOptions(uid,options,);
  }

  setRemoteDefaultVideoStreamType(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let streamType = obj.streamType;
    if (streamType === undefined) throw "streamType is undefined";

    return this._impl.setRemoteDefaultVideoStreamType(streamType,);
  }

  setSubscribeAudioBlocklist(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uidList = obj.uidList;
    if (uidList === undefined) throw "uidList is undefined";
    let uidNumber = obj.uidNumber;
    if (uidNumber === undefined) throw "uidNumber is undefined";

    return this._impl.setSubscribeAudioBlocklist(uidList,uidNumber,);
  }

  setSubscribeAudioAllowlist(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uidList = obj.uidList;
    if (uidList === undefined) throw "uidList is undefined";
    let uidNumber = obj.uidNumber;
    if (uidNumber === undefined) throw "uidNumber is undefined";

    return this._impl.setSubscribeAudioAllowlist(uidList,uidNumber,);
  }

  setSubscribeVideoBlocklist(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uidList = obj.uidList;
    if (uidList === undefined) throw "uidList is undefined";
    let uidNumber = obj.uidNumber;
    if (uidNumber === undefined) throw "uidNumber is undefined";

    return this._impl.setSubscribeVideoBlocklist(uidList,uidNumber,);
  }

  setSubscribeVideoAllowlist(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uidList = obj.uidList;
    if (uidList === undefined) throw "uidList is undefined";
    let uidNumber = obj.uidNumber;
    if (uidNumber === undefined) throw "uidNumber is undefined";

    return this._impl.setSubscribeVideoAllowlist(uidList,uidNumber,);
  }

  enableAudioVolumeIndication(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let interval = obj.interval;
    if (interval === undefined) throw "interval is undefined";
    let smooth = obj.smooth;
    if (smooth === undefined) throw "smooth is undefined";
    let reportVad = obj.reportVad;
    if (reportVad === undefined) throw "reportVad is undefined";

    return this._impl.enableAudioVolumeIndication(interval,smooth,reportVad,);
  }

  startAudioRecording(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let filePath = obj.filePath;
    if (filePath === undefined) throw "filePath is undefined";
    let quality = obj.quality;
    if (quality === undefined) throw "quality is undefined";

    return this._impl.startAudioRecording(filePath,quality,);
  }

  startAudioRecording2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let filePath = obj.filePath;
    if (filePath === undefined) throw "filePath is undefined";
    let sampleRate = obj.sampleRate;
    if (sampleRate === undefined) throw "sampleRate is undefined";
    let quality = obj.quality;
    if (quality === undefined) throw "quality is undefined";

    return this._impl.startAudioRecording2(filePath,sampleRate,quality,);
  }

  startAudioRecording3(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.startAudioRecording3(config,);
  }

  registerAudioEncodedFrameObserver(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let config = obj.config;
    if (config === undefined) throw "config is undefined";
    let observer = obj.observer;
    if (observer === undefined) throw "observer is undefined";

    return this._impl.registerAudioEncodedFrameObserver(config,observer,);
  }

  stopAudioRecording(
    
    
    ): CallApiReturnType {

    return this._impl.stopAudioRecording();
  }

  createMediaPlayer(
    
    
    ): CallApiReturnType {

    return this._impl.createMediaPlayer();
  }

  destroyMediaPlayer(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let media_player = obj.media_player;
    if (media_player === undefined) throw "media_player is undefined";

    return this._impl.destroyMediaPlayer(media_player,);
  }

  createMediaRecorder(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let info = obj.info;
    if (info === undefined) throw "info is undefined";

    return this._impl.createMediaRecorder(info,);
  }

  destroyMediaRecorder(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mediaRecorder = obj.mediaRecorder;
    if (mediaRecorder === undefined) throw "mediaRecorder is undefined";

    return this._impl.destroyMediaRecorder(mediaRecorder,);
  }

  startAudioMixing(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let filePath = obj.filePath;
    if (filePath === undefined) throw "filePath is undefined";
    let loopback = obj.loopback;
    if (loopback === undefined) throw "loopback is undefined";
    let cycle = obj.cycle;
    if (cycle === undefined) throw "cycle is undefined";

    return this._impl.startAudioMixing(filePath,loopback,cycle,);
  }

  startAudioMixing2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let filePath = obj.filePath;
    if (filePath === undefined) throw "filePath is undefined";
    let loopback = obj.loopback;
    if (loopback === undefined) throw "loopback is undefined";
    let cycle = obj.cycle;
    if (cycle === undefined) throw "cycle is undefined";
    let startPos = obj.startPos;
    if (startPos === undefined) throw "startPos is undefined";

    return this._impl.startAudioMixing2(filePath,loopback,cycle,startPos,);
  }

  stopAudioMixing(
    
    
    ): CallApiReturnType {

    return this._impl.stopAudioMixing();
  }

  pauseAudioMixing(
    
    
    ): CallApiReturnType {

    return this._impl.pauseAudioMixing();
  }

  resumeAudioMixing(
    
    
    ): CallApiReturnType {

    return this._impl.resumeAudioMixing();
  }

  selectAudioTrack(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let index = obj.index;
    if (index === undefined) throw "index is undefined";

    return this._impl.selectAudioTrack(index,);
  }

  getAudioTrackCount(
    
    
    ): CallApiReturnType {

    return this._impl.getAudioTrackCount();
  }

  adjustAudioMixingVolume(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.adjustAudioMixingVolume(volume,);
  }

  adjustAudioMixingPublishVolume(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.adjustAudioMixingPublishVolume(volume,);
  }

  getAudioMixingPublishVolume(
    
    
    ): CallApiReturnType {

    return this._impl.getAudioMixingPublishVolume();
  }

  adjustAudioMixingPlayoutVolume(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.adjustAudioMixingPlayoutVolume(volume,);
  }

  getAudioMixingPlayoutVolume(
    
    
    ): CallApiReturnType {

    return this._impl.getAudioMixingPlayoutVolume();
  }

  getAudioMixingDuration(
    
    
    ): CallApiReturnType {

    return this._impl.getAudioMixingDuration();
  }

  getAudioMixingCurrentPosition(
    
    
    ): CallApiReturnType {

    return this._impl.getAudioMixingCurrentPosition();
  }

  setAudioMixingPosition(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let pos = obj.pos;
    if (pos === undefined) throw "pos is undefined";

    return this._impl.setAudioMixingPosition(pos,);
  }

  setAudioMixingDualMonoMode(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mode = obj.mode;
    if (mode === undefined) throw "mode is undefined";

    return this._impl.setAudioMixingDualMonoMode(mode,);
  }

  setAudioMixingPitch(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let pitch = obj.pitch;
    if (pitch === undefined) throw "pitch is undefined";

    return this._impl.setAudioMixingPitch(pitch,);
  }

  getEffectsVolume(
    
    
    ): CallApiReturnType {

    return this._impl.getEffectsVolume();
  }

  setEffectsVolume(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.setEffectsVolume(volume,);
  }

  preloadEffect(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let soundId = obj.soundId;
    if (soundId === undefined) throw "soundId is undefined";
    let filePath = obj.filePath;
    if (filePath === undefined) throw "filePath is undefined";
    let startPos = obj.startPos;
    if (startPos === undefined) throw "startPos is undefined";

    return this._impl.preloadEffect(soundId,filePath,startPos,);
  }

  playEffect(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let soundId = obj.soundId;
    if (soundId === undefined) throw "soundId is undefined";
    let filePath = obj.filePath;
    if (filePath === undefined) throw "filePath is undefined";
    let loopCount = obj.loopCount;
    if (loopCount === undefined) throw "loopCount is undefined";
    let pitch = obj.pitch;
    if (pitch === undefined) throw "pitch is undefined";
    let pan = obj.pan;
    if (pan === undefined) throw "pan is undefined";
    let gain = obj.gain;
    if (gain === undefined) throw "gain is undefined";
    let publish = obj.publish;
    if (publish === undefined) throw "publish is undefined";
    let startPos = obj.startPos;
    if (startPos === undefined) throw "startPos is undefined";

    return this._impl.playEffect(soundId,filePath,loopCount,pitch,pan,gain,publish,startPos,);
  }

  playAllEffects(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let loopCount = obj.loopCount;
    if (loopCount === undefined) throw "loopCount is undefined";
    let pitch = obj.pitch;
    if (pitch === undefined) throw "pitch is undefined";
    let pan = obj.pan;
    if (pan === undefined) throw "pan is undefined";
    let gain = obj.gain;
    if (gain === undefined) throw "gain is undefined";
    let publish = obj.publish;
    if (publish === undefined) throw "publish is undefined";

    return this._impl.playAllEffects(loopCount,pitch,pan,gain,publish,);
  }

  getVolumeOfEffect(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let soundId = obj.soundId;
    if (soundId === undefined) throw "soundId is undefined";

    return this._impl.getVolumeOfEffect(soundId,);
  }

  setVolumeOfEffect(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let soundId = obj.soundId;
    if (soundId === undefined) throw "soundId is undefined";
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.setVolumeOfEffect(soundId,volume,);
  }

  pauseEffect(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let soundId = obj.soundId;
    if (soundId === undefined) throw "soundId is undefined";

    return this._impl.pauseEffect(soundId,);
  }

  pauseAllEffects(
    
    
    ): CallApiReturnType {

    return this._impl.pauseAllEffects();
  }

  resumeEffect(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let soundId = obj.soundId;
    if (soundId === undefined) throw "soundId is undefined";

    return this._impl.resumeEffect(soundId,);
  }

  resumeAllEffects(
    
    
    ): CallApiReturnType {

    return this._impl.resumeAllEffects();
  }

  stopEffect(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let soundId = obj.soundId;
    if (soundId === undefined) throw "soundId is undefined";

    return this._impl.stopEffect(soundId,);
  }

  stopAllEffects(
    
    
    ): CallApiReturnType {

    return this._impl.stopAllEffects();
  }

  unloadEffect(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let soundId = obj.soundId;
    if (soundId === undefined) throw "soundId is undefined";

    return this._impl.unloadEffect(soundId,);
  }

  unloadAllEffects(
    
    
    ): CallApiReturnType {

    return this._impl.unloadAllEffects();
  }

  getEffectDuration(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let filePath = obj.filePath;
    if (filePath === undefined) throw "filePath is undefined";

    return this._impl.getEffectDuration(filePath,);
  }

  setEffectPosition(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let soundId = obj.soundId;
    if (soundId === undefined) throw "soundId is undefined";
    let pos = obj.pos;
    if (pos === undefined) throw "pos is undefined";

    return this._impl.setEffectPosition(soundId,pos,);
  }

  getEffectCurrentPosition(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let soundId = obj.soundId;
    if (soundId === undefined) throw "soundId is undefined";

    return this._impl.getEffectCurrentPosition(soundId,);
  }

  enableSoundPositionIndication(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";

    return this._impl.enableSoundPositionIndication(enabled,);
  }

  setRemoteVoicePosition(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let pan = obj.pan;
    if (pan === undefined) throw "pan is undefined";
    let gain = obj.gain;
    if (gain === undefined) throw "gain is undefined";

    return this._impl.setRemoteVoicePosition(uid,pan,gain,);
  }

  enableSpatialAudio(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";

    return this._impl.enableSpatialAudio(enabled,);
  }

  setRemoteUserSpatialAudioParams(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let params = obj.params;
    if (params === undefined) throw "params is undefined";

    return this._impl.setRemoteUserSpatialAudioParams(uid,params,);
  }

  setVoiceBeautifierPreset(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let preset = obj.preset;
    if (preset === undefined) throw "preset is undefined";

    return this._impl.setVoiceBeautifierPreset(preset,);
  }

  setAudioEffectPreset(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let preset = obj.preset;
    if (preset === undefined) throw "preset is undefined";

    return this._impl.setAudioEffectPreset(preset,);
  }

  setVoiceConversionPreset(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let preset = obj.preset;
    if (preset === undefined) throw "preset is undefined";

    return this._impl.setVoiceConversionPreset(preset,);
  }

  setAudioEffectParameters(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let preset = obj.preset;
    if (preset === undefined) throw "preset is undefined";
    let param1 = obj.param1;
    if (param1 === undefined) throw "param1 is undefined";
    let param2 = obj.param2;
    if (param2 === undefined) throw "param2 is undefined";

    return this._impl.setAudioEffectParameters(preset,param1,param2,);
  }

  setVoiceBeautifierParameters(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let preset = obj.preset;
    if (preset === undefined) throw "preset is undefined";
    let param1 = obj.param1;
    if (param1 === undefined) throw "param1 is undefined";
    let param2 = obj.param2;
    if (param2 === undefined) throw "param2 is undefined";

    return this._impl.setVoiceBeautifierParameters(preset,param1,param2,);
  }

  setVoiceConversionParameters(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let preset = obj.preset;
    if (preset === undefined) throw "preset is undefined";
    let param1 = obj.param1;
    if (param1 === undefined) throw "param1 is undefined";
    let param2 = obj.param2;
    if (param2 === undefined) throw "param2 is undefined";

    return this._impl.setVoiceConversionParameters(preset,param1,param2,);
  }

  setLocalVoicePitch(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let pitch = obj.pitch;
    if (pitch === undefined) throw "pitch is undefined";

    return this._impl.setLocalVoicePitch(pitch,);
  }

  setLocalVoiceFormant(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let formantRatio = obj.formantRatio;
    if (formantRatio === undefined) throw "formantRatio is undefined";

    return this._impl.setLocalVoiceFormant(formantRatio,);
  }

  setLocalVoiceEqualization(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let bandFrequency = obj.bandFrequency;
    if (bandFrequency === undefined) throw "bandFrequency is undefined";
    let bandGain = obj.bandGain;
    if (bandGain === undefined) throw "bandGain is undefined";

    return this._impl.setLocalVoiceEqualization(bandFrequency,bandGain,);
  }

  setLocalVoiceReverb(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let reverbKey = obj.reverbKey;
    if (reverbKey === undefined) throw "reverbKey is undefined";
    let value = obj.value;
    if (value === undefined) throw "value is undefined";

    return this._impl.setLocalVoiceReverb(reverbKey,value,);
  }

  setHeadphoneEQPreset(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let preset = obj.preset;
    if (preset === undefined) throw "preset is undefined";

    return this._impl.setHeadphoneEQPreset(preset,);
  }

  setHeadphoneEQParameters(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let lowGain = obj.lowGain;
    if (lowGain === undefined) throw "lowGain is undefined";
    let highGain = obj.highGain;
    if (highGain === undefined) throw "highGain is undefined";

    return this._impl.setHeadphoneEQParameters(lowGain,highGain,);
  }

  setLogFile(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let filePath = obj.filePath;
    if (filePath === undefined) throw "filePath is undefined";

    return this._impl.setLogFile(filePath,);
  }

  setLogFilter(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let filter = obj.filter;
    if (filter === undefined) throw "filter is undefined";

    return this._impl.setLogFilter(filter,);
  }

  setLogLevel(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let level = obj.level;
    if (level === undefined) throw "level is undefined";

    return this._impl.setLogLevel(level,);
  }

  setLogFileSize(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let fileSizeInKBytes = obj.fileSizeInKBytes;
    if (fileSizeInKBytes === undefined) throw "fileSizeInKBytes is undefined";

    return this._impl.setLogFileSize(fileSizeInKBytes,);
  }

  uploadLogFile(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let requestId = obj.requestId;
    if (requestId === undefined) throw "requestId is undefined";

    return this._impl.uploadLogFile(requestId,);
  }

  setLocalRenderMode(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let renderMode = obj.renderMode;
    if (renderMode === undefined) throw "renderMode is undefined";
    let mirrorMode = obj.mirrorMode;
    if (mirrorMode === undefined) throw "mirrorMode is undefined";

    return this._impl.setLocalRenderMode(renderMode,mirrorMode,);
  }

  setRemoteRenderMode(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let renderMode = obj.renderMode;
    if (renderMode === undefined) throw "renderMode is undefined";
    let mirrorMode = obj.mirrorMode;
    if (mirrorMode === undefined) throw "mirrorMode is undefined";

    return this._impl.setRemoteRenderMode(uid,renderMode,mirrorMode,);
  }

  setLocalRenderMode2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let renderMode = obj.renderMode;
    if (renderMode === undefined) throw "renderMode is undefined";

    return this._impl.setLocalRenderMode2(renderMode,);
  }

  setLocalVideoMirrorMode(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mirrorMode = obj.mirrorMode;
    if (mirrorMode === undefined) throw "mirrorMode is undefined";

    return this._impl.setLocalVideoMirrorMode(mirrorMode,);
  }

  enableDualStreamMode(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";

    return this._impl.enableDualStreamMode(enabled,);
  }

  enableDualStreamMode2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let streamConfig = obj.streamConfig;
    if (streamConfig === undefined) throw "streamConfig is undefined";

    return this._impl.enableDualStreamMode2(enabled,streamConfig,);
  }

  setDualStreamMode(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mode = obj.mode;
    if (mode === undefined) throw "mode is undefined";

    return this._impl.setDualStreamMode(mode,);
  }

  setDualStreamMode2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mode = obj.mode;
    if (mode === undefined) throw "mode is undefined";
    let streamConfig = obj.streamConfig;
    if (streamConfig === undefined) throw "streamConfig is undefined";

    return this._impl.setDualStreamMode2(mode,streamConfig,);
  }

  enableCustomAudioLocalPlayback(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let trackId = obj.trackId;
    if (trackId === undefined) throw "trackId is undefined";
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";

    return this._impl.enableCustomAudioLocalPlayback(trackId,enabled,);
  }

  setRecordingAudioFrameParameters(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sampleRate = obj.sampleRate;
    if (sampleRate === undefined) throw "sampleRate is undefined";
    let channel = obj.channel;
    if (channel === undefined) throw "channel is undefined";
    let mode = obj.mode;
    if (mode === undefined) throw "mode is undefined";
    let samplesPerCall = obj.samplesPerCall;
    if (samplesPerCall === undefined) throw "samplesPerCall is undefined";

    return this._impl.setRecordingAudioFrameParameters(sampleRate,channel,mode,samplesPerCall,);
  }

  setPlaybackAudioFrameParameters(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sampleRate = obj.sampleRate;
    if (sampleRate === undefined) throw "sampleRate is undefined";
    let channel = obj.channel;
    if (channel === undefined) throw "channel is undefined";
    let mode = obj.mode;
    if (mode === undefined) throw "mode is undefined";
    let samplesPerCall = obj.samplesPerCall;
    if (samplesPerCall === undefined) throw "samplesPerCall is undefined";

    return this._impl.setPlaybackAudioFrameParameters(sampleRate,channel,mode,samplesPerCall,);
  }

  setMixedAudioFrameParameters(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sampleRate = obj.sampleRate;
    if (sampleRate === undefined) throw "sampleRate is undefined";
    let channel = obj.channel;
    if (channel === undefined) throw "channel is undefined";
    let samplesPerCall = obj.samplesPerCall;
    if (samplesPerCall === undefined) throw "samplesPerCall is undefined";

    return this._impl.setMixedAudioFrameParameters(sampleRate,channel,samplesPerCall,);
  }

  setEarMonitoringAudioFrameParameters(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sampleRate = obj.sampleRate;
    if (sampleRate === undefined) throw "sampleRate is undefined";
    let channel = obj.channel;
    if (channel === undefined) throw "channel is undefined";
    let mode = obj.mode;
    if (mode === undefined) throw "mode is undefined";
    let samplesPerCall = obj.samplesPerCall;
    if (samplesPerCall === undefined) throw "samplesPerCall is undefined";

    return this._impl.setEarMonitoringAudioFrameParameters(sampleRate,channel,mode,samplesPerCall,);
  }

  setPlaybackAudioFrameBeforeMixingParameters(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sampleRate = obj.sampleRate;
    if (sampleRate === undefined) throw "sampleRate is undefined";
    let channel = obj.channel;
    if (channel === undefined) throw "channel is undefined";

    return this._impl.setPlaybackAudioFrameBeforeMixingParameters(sampleRate,channel,);
  }

  enableAudioSpectrumMonitor(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let intervalInMS = obj.intervalInMS;
    if (intervalInMS === undefined) throw "intervalInMS is undefined";

    return this._impl.enableAudioSpectrumMonitor(intervalInMS,);
  }

  disableAudioSpectrumMonitor(
    
    
    ): CallApiReturnType {

    return this._impl.disableAudioSpectrumMonitor();
  }

  registerAudioSpectrumObserver(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let observer = obj.observer;
    if (observer === undefined) throw "observer is undefined";

    return this._impl.registerAudioSpectrumObserver(observer,);
  }

  unregisterAudioSpectrumObserver(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let observer = obj.observer;
    if (observer === undefined) throw "observer is undefined";

    return this._impl.unregisterAudioSpectrumObserver(observer,);
  }

  adjustRecordingSignalVolume(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.adjustRecordingSignalVolume(volume,);
  }

  muteRecordingSignal(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";

    return this._impl.muteRecordingSignal(mute,);
  }

  adjustPlaybackSignalVolume(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.adjustPlaybackSignalVolume(volume,);
  }

  adjustUserPlaybackSignalVolume(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.adjustUserPlaybackSignalVolume(uid,volume,);
  }

  setLocalPublishFallbackOption(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let option = obj.option;
    if (option === undefined) throw "option is undefined";

    return this._impl.setLocalPublishFallbackOption(option,);
  }

  setRemoteSubscribeFallbackOption(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let option = obj.option;
    if (option === undefined) throw "option is undefined";

    return this._impl.setRemoteSubscribeFallbackOption(option,);
  }

  setHighPriorityUserList(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uidList = obj.uidList;
    if (uidList === undefined) throw "uidList is undefined";
    let uidNum = obj.uidNum;
    if (uidNum === undefined) throw "uidNum is undefined";
    let option = obj.option;
    if (option === undefined) throw "option is undefined";

    return this._impl.setHighPriorityUserList(uidList,uidNum,option,);
  }

  enableLoopbackRecording(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let deviceName = obj.deviceName;
    if (deviceName === undefined) throw "deviceName is undefined";

    return this._impl.enableLoopbackRecording(enabled,deviceName,);
  }

  adjustLoopbackSignalVolume(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.adjustLoopbackSignalVolume(volume,);
  }

  getLoopbackRecordingVolume(
    
    
    ): CallApiReturnType {

    return this._impl.getLoopbackRecordingVolume();
  }

  enableInEarMonitoring(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let includeAudioFilters = obj.includeAudioFilters;
    if (includeAudioFilters === undefined) throw "includeAudioFilters is undefined";

    return this._impl.enableInEarMonitoring(enabled,includeAudioFilters,);
  }

  setInEarMonitoringVolume(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.setInEarMonitoringVolume(volume,);
  }

  loadExtensionProvider(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let path = obj.path;
    if (path === undefined) throw "path is undefined";
    let unload_after_use = obj.unload_after_use;
    if (unload_after_use === undefined) throw "unload_after_use is undefined";

    return this._impl.loadExtensionProvider(path,unload_after_use,);
  }

  setExtensionProviderProperty(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let provider = obj.provider;
    if (provider === undefined) throw "provider is undefined";
    let key = obj.key;
    if (key === undefined) throw "key is undefined";
    let value = obj.value;
    if (value === undefined) throw "value is undefined";

    return this._impl.setExtensionProviderProperty(provider,key,value,);
  }

  registerExtension(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let provider = obj.provider;
    if (provider === undefined) throw "provider is undefined";
    let extension = obj.extension;
    if (extension === undefined) throw "extension is undefined";
    let type = obj.type;
    if (type === undefined) throw "type is undefined";

    return this._impl.registerExtension(provider,extension,type,);
  }

  enableExtension(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let provider = obj.provider;
    if (provider === undefined) throw "provider is undefined";
    let extension = obj.extension;
    if (extension === undefined) throw "extension is undefined";
    let enable = obj.enable;
    if (enable === undefined) throw "enable is undefined";
    let type = obj.type;
    if (type === undefined) throw "type is undefined";

    return this._impl.enableExtension(provider,extension,enable,type,);
  }

  enableExtension2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let provider = obj.provider;
    if (provider === undefined) throw "provider is undefined";
    let extension = obj.extension;
    if (extension === undefined) throw "extension is undefined";
    let extensionInfo = obj.extensionInfo;
    if (extensionInfo === undefined) throw "extensionInfo is undefined";
    let enable = obj.enable;
    if (enable === undefined) throw "enable is undefined";

    return this._impl.enableExtension2(provider,extension,extensionInfo,enable,);
  }

  setExtensionProperty(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let provider = obj.provider;
    if (provider === undefined) throw "provider is undefined";
    let extension = obj.extension;
    if (extension === undefined) throw "extension is undefined";
    let key = obj.key;
    if (key === undefined) throw "key is undefined";
    let value = obj.value;
    if (value === undefined) throw "value is undefined";
    let type = obj.type;
    if (type === undefined) throw "type is undefined";

    return this._impl.setExtensionProperty(provider,extension,key,value,type,);
  }

  getExtensionProperty(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let provider = obj.provider;
    if (provider === undefined) throw "provider is undefined";
    let extension = obj.extension;
    if (extension === undefined) throw "extension is undefined";
    let key = obj.key;
    if (key === undefined) throw "key is undefined";
    let value = obj.value;
    if (value === undefined) throw "value is undefined";
    let buf_len = obj.buf_len;
    if (buf_len === undefined) throw "buf_len is undefined";
    let type = obj.type;
    if (type === undefined) throw "type is undefined";

    return this._impl.getExtensionProperty(provider,extension,key,value,buf_len,type,);
  }

  setExtensionProperty2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let provider = obj.provider;
    if (provider === undefined) throw "provider is undefined";
    let extension = obj.extension;
    if (extension === undefined) throw "extension is undefined";
    let extensionInfo = obj.extensionInfo;
    if (extensionInfo === undefined) throw "extensionInfo is undefined";
    let key = obj.key;
    if (key === undefined) throw "key is undefined";
    let value = obj.value;
    if (value === undefined) throw "value is undefined";

    return this._impl.setExtensionProperty2(provider,extension,extensionInfo,key,value,);
  }

  getExtensionProperty2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let provider = obj.provider;
    if (provider === undefined) throw "provider is undefined";
    let extension = obj.extension;
    if (extension === undefined) throw "extension is undefined";
    let extensionInfo = obj.extensionInfo;
    if (extensionInfo === undefined) throw "extensionInfo is undefined";
    let key = obj.key;
    if (key === undefined) throw "key is undefined";
    let value = obj.value;
    if (value === undefined) throw "value is undefined";
    let buf_len = obj.buf_len;
    if (buf_len === undefined) throw "buf_len is undefined";

    return this._impl.getExtensionProperty2(provider,extension,extensionInfo,key,value,buf_len,);
  }

  setCameraCapturerConfiguration(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.setCameraCapturerConfiguration(config,);
  }

  createCustomVideoTrack(
    
    
    ): CallApiReturnType {

    return this._impl.createCustomVideoTrack();
  }

  createCustomEncodedVideoTrack(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sender_option = obj.sender_option;
    if (sender_option === undefined) throw "sender_option is undefined";

    return this._impl.createCustomEncodedVideoTrack(sender_option,);
  }

  destroyCustomVideoTrack(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let video_track_id = obj.video_track_id;
    if (video_track_id === undefined) throw "video_track_id is undefined";

    return this._impl.destroyCustomVideoTrack(video_track_id,);
  }

  destroyCustomEncodedVideoTrack(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let video_track_id = obj.video_track_id;
    if (video_track_id === undefined) throw "video_track_id is undefined";

    return this._impl.destroyCustomEncodedVideoTrack(video_track_id,);
  }

  switchCamera(
    
    
    ): CallApiReturnType {

    return this._impl.switchCamera();
  }

  isCameraZoomSupported(
    
    
    ): CallApiReturnType {

    return this._impl.isCameraZoomSupported();
  }

  isCameraFaceDetectSupported(
    
    
    ): CallApiReturnType {

    return this._impl.isCameraFaceDetectSupported();
  }

  isCameraTorchSupported(
    
    
    ): CallApiReturnType {

    return this._impl.isCameraTorchSupported();
  }

  isCameraFocusSupported(
    
    
    ): CallApiReturnType {

    return this._impl.isCameraFocusSupported();
  }

  isCameraAutoFocusFaceModeSupported(
    
    
    ): CallApiReturnType {

    return this._impl.isCameraAutoFocusFaceModeSupported();
  }

  setCameraZoomFactor(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let factor = obj.factor;
    if (factor === undefined) throw "factor is undefined";

    return this._impl.setCameraZoomFactor(factor,);
  }

  enableFaceDetection(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";

    return this._impl.enableFaceDetection(enabled,);
  }

  getCameraMaxZoomFactor(
    
    
    ): CallApiReturnType {

    return this._impl.getCameraMaxZoomFactor();
  }

  setCameraFocusPositionInPreview(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let positionX = obj.positionX;
    if (positionX === undefined) throw "positionX is undefined";
    let positionY = obj.positionY;
    if (positionY === undefined) throw "positionY is undefined";

    return this._impl.setCameraFocusPositionInPreview(positionX,positionY,);
  }

  setCameraTorchOn(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let isOn = obj.isOn;
    if (isOn === undefined) throw "isOn is undefined";

    return this._impl.setCameraTorchOn(isOn,);
  }

  setCameraAutoFocusFaceModeEnabled(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";

    return this._impl.setCameraAutoFocusFaceModeEnabled(enabled,);
  }

  isCameraExposurePositionSupported(
    
    
    ): CallApiReturnType {

    return this._impl.isCameraExposurePositionSupported();
  }

  setCameraExposurePosition(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let positionXinView = obj.positionXinView;
    if (positionXinView === undefined) throw "positionXinView is undefined";
    let positionYinView = obj.positionYinView;
    if (positionYinView === undefined) throw "positionYinView is undefined";

    return this._impl.setCameraExposurePosition(positionXinView,positionYinView,);
  }

  isCameraExposureSupported(
    
    
    ): CallApiReturnType {

    return this._impl.isCameraExposureSupported();
  }

  setCameraExposureFactor(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let factor = obj.factor;
    if (factor === undefined) throw "factor is undefined";

    return this._impl.setCameraExposureFactor(factor,);
  }

  isCameraAutoExposureFaceModeSupported(
    
    
    ): CallApiReturnType {

    return this._impl.isCameraAutoExposureFaceModeSupported();
  }

  setCameraAutoExposureFaceModeEnabled(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";

    return this._impl.setCameraAutoExposureFaceModeEnabled(enabled,);
  }

  setDefaultAudioRouteToSpeakerphone(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let defaultToSpeaker = obj.defaultToSpeaker;
    if (defaultToSpeaker === undefined) throw "defaultToSpeaker is undefined";

    return this._impl.setDefaultAudioRouteToSpeakerphone(defaultToSpeaker,);
  }

  setEnableSpeakerphone(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let speakerOn = obj.speakerOn;
    if (speakerOn === undefined) throw "speakerOn is undefined";

    return this._impl.setEnableSpeakerphone(speakerOn,);
  }

  isSpeakerphoneEnabled(
    
    
    ): CallApiReturnType {

    return this._impl.isSpeakerphoneEnabled();
  }

  setRouteInCommunicationMode(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let route = obj.route;
    if (route === undefined) throw "route is undefined";

    return this._impl.setRouteInCommunicationMode(route,);
  }

  getScreenCaptureSources(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let thumbSize = obj.thumbSize;
    if (thumbSize === undefined) throw "thumbSize is undefined";
    let iconSize = obj.iconSize;
    if (iconSize === undefined) throw "iconSize is undefined";
    let includeScreen = obj.includeScreen;
    if (includeScreen === undefined) throw "includeScreen is undefined";

    return this._impl.getScreenCaptureSources(thumbSize,iconSize,includeScreen,);
  }

  setAudioSessionOperationRestriction(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let restriction = obj.restriction;
    if (restriction === undefined) throw "restriction is undefined";

    return this._impl.setAudioSessionOperationRestriction(restriction,);
  }

  startScreenCaptureByDisplayId(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let displayId = obj.displayId;
    if (displayId === undefined) throw "displayId is undefined";
    let regionRect = obj.regionRect;
    if (regionRect === undefined) throw "regionRect is undefined";
    let captureParams = obj.captureParams;
    if (captureParams === undefined) throw "captureParams is undefined";

    return this._impl.startScreenCaptureByDisplayId(displayId,regionRect,captureParams,);
  }

  startScreenCaptureByScreenRect(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let screenRect = obj.screenRect;
    if (screenRect === undefined) throw "screenRect is undefined";
    let regionRect = obj.regionRect;
    if (regionRect === undefined) throw "regionRect is undefined";
    let captureParams = obj.captureParams;
    if (captureParams === undefined) throw "captureParams is undefined";

    return this._impl.startScreenCaptureByScreenRect(screenRect,regionRect,captureParams,);
  }

  getAudioDeviceInfo(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let deviceInfo = obj.deviceInfo;
    if (deviceInfo === undefined) throw "deviceInfo is undefined";

    return this._impl.getAudioDeviceInfo(deviceInfo,);
  }

  startScreenCaptureByWindowId(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let windowId = obj.windowId;
    if (windowId === undefined) throw "windowId is undefined";
    let regionRect = obj.regionRect;
    if (regionRect === undefined) throw "regionRect is undefined";
    let captureParams = obj.captureParams;
    if (captureParams === undefined) throw "captureParams is undefined";

    return this._impl.startScreenCaptureByWindowId(windowId,regionRect,captureParams,);
  }

  setScreenCaptureContentHint(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let contentHint = obj.contentHint;
    if (contentHint === undefined) throw "contentHint is undefined";

    return this._impl.setScreenCaptureContentHint(contentHint,);
  }

  updateScreenCaptureRegion(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let regionRect = obj.regionRect;
    if (regionRect === undefined) throw "regionRect is undefined";

    return this._impl.updateScreenCaptureRegion(regionRect,);
  }

  updateScreenCaptureParameters(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let captureParams = obj.captureParams;
    if (captureParams === undefined) throw "captureParams is undefined";

    return this._impl.updateScreenCaptureParameters(captureParams,);
  }

  startScreenCapture(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let captureParams = obj.captureParams;
    if (captureParams === undefined) throw "captureParams is undefined";

    return this._impl.startScreenCapture(captureParams,);
  }

  updateScreenCapture(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let captureParams = obj.captureParams;
    if (captureParams === undefined) throw "captureParams is undefined";

    return this._impl.updateScreenCapture(captureParams,);
  }

  queryScreenCaptureCapability(
    
    
    ): CallApiReturnType {

    return this._impl.queryScreenCaptureCapability();
  }

  setScreenCaptureScenario(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let screenScenario = obj.screenScenario;
    if (screenScenario === undefined) throw "screenScenario is undefined";

    return this._impl.setScreenCaptureScenario(screenScenario,);
  }

  stopScreenCapture(
    
    
    ): CallApiReturnType {

    return this._impl.stopScreenCapture();
  }

  getCallId(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let callId = obj.callId;
    if (callId === undefined) throw "callId is undefined";

    return this._impl.getCallId(callId,);
  }

  rate(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let callId = obj.callId;
    if (callId === undefined) throw "callId is undefined";
    let rating = obj.rating;
    if (rating === undefined) throw "rating is undefined";
    let description = obj.description;
    if (description === undefined) throw "description is undefined";

    return this._impl.rate(callId,rating,description,);
  }

  complain(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let callId = obj.callId;
    if (callId === undefined) throw "callId is undefined";
    let description = obj.description;
    if (description === undefined) throw "description is undefined";

    return this._impl.complain(callId,description,);
  }

  startRtmpStreamWithoutTranscoding(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let url = obj.url;
    if (url === undefined) throw "url is undefined";

    return this._impl.startRtmpStreamWithoutTranscoding(url,);
  }

  startRtmpStreamWithTranscoding(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let url = obj.url;
    if (url === undefined) throw "url is undefined";
    let transcoding = obj.transcoding;
    if (transcoding === undefined) throw "transcoding is undefined";

    return this._impl.startRtmpStreamWithTranscoding(url,transcoding,);
  }

  updateRtmpTranscoding(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let transcoding = obj.transcoding;
    if (transcoding === undefined) throw "transcoding is undefined";

    return this._impl.updateRtmpTranscoding(transcoding,);
  }

  stopRtmpStream(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let url = obj.url;
    if (url === undefined) throw "url is undefined";

    return this._impl.stopRtmpStream(url,);
  }

  startLocalVideoTranscoder(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.startLocalVideoTranscoder(config,);
  }

  updateLocalTranscoderConfiguration(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.updateLocalTranscoderConfiguration(config,);
  }

  stopLocalVideoTranscoder(
    
    
    ): CallApiReturnType {

    return this._impl.stopLocalVideoTranscoder();
  }

  startCameraCapture(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sourceType = obj.sourceType;
    if (sourceType === undefined) throw "sourceType is undefined";
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.startCameraCapture(sourceType,config,);
  }

  stopCameraCapture(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sourceType = obj.sourceType;
    if (sourceType === undefined) throw "sourceType is undefined";

    return this._impl.stopCameraCapture(sourceType,);
  }

  setCameraDeviceOrientation(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let type = obj.type;
    if (type === undefined) throw "type is undefined";
    let orientation = obj.orientation;
    if (orientation === undefined) throw "orientation is undefined";

    return this._impl.setCameraDeviceOrientation(type,orientation,);
  }

  setScreenCaptureOrientation(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let type = obj.type;
    if (type === undefined) throw "type is undefined";
    let orientation = obj.orientation;
    if (orientation === undefined) throw "orientation is undefined";

    return this._impl.setScreenCaptureOrientation(type,orientation,);
  }

  startScreenCapture2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sourceType = obj.sourceType;
    if (sourceType === undefined) throw "sourceType is undefined";
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.startScreenCapture2(sourceType,config,);
  }

  stopScreenCapture2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sourceType = obj.sourceType;
    if (sourceType === undefined) throw "sourceType is undefined";

    return this._impl.stopScreenCapture2(sourceType,);
  }

  getConnectionState(
    
    
    ): CallApiReturnType {

    return this._impl.getConnectionState();
  }

  registerEventHandler(
    apiParam: ApiParam
    
    ): CallApiReturnType {
    let eventHandler = apiParam.buffer[0]; //obj.eventHandler;
    if (eventHandler === undefined) throw 'eventHandler is undefined';
    return this._impl.registerEventHandler(eventHandler);
  }

  unregisterEventHandler(
    apiParam: ApiParam
    
    ): CallApiReturnType {
    let eventHandler = apiParam.buffer[0]; //obj.eventHandler;
    if (eventHandler === undefined) throw 'eventHandler is undefined';
    return this._impl.registerEventHandler(eventHandler);
  }

  setRemoteUserPriority(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let userPriority = obj.userPriority;
    if (userPriority === undefined) throw "userPriority is undefined";

    return this._impl.setRemoteUserPriority(uid,userPriority,);
  }

  setEncryptionMode(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let encryptionMode = obj.encryptionMode;
    if (encryptionMode === undefined) throw "encryptionMode is undefined";

    return this._impl.setEncryptionMode(encryptionMode,);
  }

  setEncryptionSecret(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let secret = obj.secret;
    if (secret === undefined) throw "secret is undefined";

    return this._impl.setEncryptionSecret(secret,);
  }

  enableEncryption(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.enableEncryption(enabled,config,);
  }

  createDataStream(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let streamId = obj.streamId;
    if (streamId === undefined) throw "streamId is undefined";
    let reliable = obj.reliable;
    if (reliable === undefined) throw "reliable is undefined";
    let ordered = obj.ordered;
    if (ordered === undefined) throw "ordered is undefined";

    return this._impl.createDataStream(streamId,reliable,ordered,);
  }

  createDataStream2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let streamId = obj.streamId;
    if (streamId === undefined) throw "streamId is undefined";
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.createDataStream2(streamId,config,);
  }

  sendStreamMessage(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let streamId = obj.streamId;
    if (streamId === undefined) throw "streamId is undefined";
    let data = obj.data;
    if (data === undefined) throw "data is undefined";
    let length = obj.length;
    if (length === undefined) throw "length is undefined";

    return this._impl.sendStreamMessage(streamId,data,length,);
  }

  addVideoWatermark(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let watermark = obj.watermark;
    if (watermark === undefined) throw "watermark is undefined";

    return this._impl.addVideoWatermark(watermark,);
  }

  addVideoWatermark2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let watermarkUrl = obj.watermarkUrl;
    if (watermarkUrl === undefined) throw "watermarkUrl is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";

    return this._impl.addVideoWatermark2(watermarkUrl,options,);
  }

  clearVideoWatermarks(
    
    
    ): CallApiReturnType {

    return this._impl.clearVideoWatermarks();
  }

  pauseAudio(
    
    
    ): CallApiReturnType {

    return this._impl.pauseAudio();
  }

  resumeAudio(
    
    
    ): CallApiReturnType {

    return this._impl.resumeAudio();
  }

  enableWebSdkInteroperability(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";

    return this._impl.enableWebSdkInteroperability(enabled,);
  }

  sendCustomReportMessage(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let id = obj.id;
    if (id === undefined) throw "id is undefined";
    let category = obj.category;
    if (category === undefined) throw "category is undefined";
    let event = obj.event;
    if (event === undefined) throw "event is undefined";
    let label = obj.label;
    if (label === undefined) throw "label is undefined";
    let value = obj.value;
    if (value === undefined) throw "value is undefined";

    return this._impl.sendCustomReportMessage(id,category,event,label,value,);
  }

  registerMediaMetadataObserver(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let observer = obj.observer;
    if (observer === undefined) throw "observer is undefined";
    let type = obj.type;
    if (type === undefined) throw "type is undefined";

    return this._impl.registerMediaMetadataObserver(observer,type,);
  }

  unregisterMediaMetadataObserver(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let observer = obj.observer;
    if (observer === undefined) throw "observer is undefined";
    let type = obj.type;
    if (type === undefined) throw "type is undefined";

    return this._impl.unregisterMediaMetadataObserver(observer,type,);
  }

  startAudioFrameDump(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let channel_id = obj.channel_id;
    if (channel_id === undefined) throw "channel_id is undefined";
    let user_id = obj.user_id;
    if (user_id === undefined) throw "user_id is undefined";
    let location = obj.location;
    if (location === undefined) throw "location is undefined";
    let uuid = obj.uuid;
    if (uuid === undefined) throw "uuid is undefined";
    let passwd = obj.passwd;
    if (passwd === undefined) throw "passwd is undefined";
    let duration_ms = obj.duration_ms;
    if (duration_ms === undefined) throw "duration_ms is undefined";
    let auto_upload = obj.auto_upload;
    if (auto_upload === undefined) throw "auto_upload is undefined";

    return this._impl.startAudioFrameDump(channel_id,user_id,location,uuid,passwd,duration_ms,auto_upload,);
  }

  stopAudioFrameDump(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let channel_id = obj.channel_id;
    if (channel_id === undefined) throw "channel_id is undefined";
    let user_id = obj.user_id;
    if (user_id === undefined) throw "user_id is undefined";
    let location = obj.location;
    if (location === undefined) throw "location is undefined";

    return this._impl.stopAudioFrameDump(channel_id,user_id,location,);
  }

  setAINSMode(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let mode = obj.mode;
    if (mode === undefined) throw "mode is undefined";

    return this._impl.setAINSMode(enabled,mode,);
  }

  registerLocalUserAccount(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let appId = obj.appId;
    if (appId === undefined) throw "appId is undefined";
    let userAccount = obj.userAccount;
    if (userAccount === undefined) throw "userAccount is undefined";

    return this._impl.registerLocalUserAccount(appId,userAccount,);
  }

  joinChannelWithUserAccount(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) throw "token is undefined";
    let channelId = obj.channelId;
    if (channelId === undefined) throw "channelId is undefined";
    let userAccount = obj.userAccount;
    if (userAccount === undefined) throw "userAccount is undefined";

    return this._impl.joinChannelWithUserAccount(token,channelId,userAccount,);
  }

  joinChannelWithUserAccount2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) throw "token is undefined";
    let channelId = obj.channelId;
    if (channelId === undefined) throw "channelId is undefined";
    let userAccount = obj.userAccount;
    if (userAccount === undefined) throw "userAccount is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";

    return this._impl.joinChannelWithUserAccount2(token,channelId,userAccount,options,);
  }

  joinChannelWithUserAccountEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) throw "token is undefined";
    let channelId = obj.channelId;
    if (channelId === undefined) throw "channelId is undefined";
    let userAccount = obj.userAccount;
    if (userAccount === undefined) throw "userAccount is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";

    return this._impl.joinChannelWithUserAccountEx(token,channelId,userAccount,options,);
  }

  getUserInfoByUserAccount(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let userAccount = obj.userAccount;
    if (userAccount === undefined) throw "userAccount is undefined";
    let userInfo = obj.userInfo;
    if (userInfo === undefined) throw "userInfo is undefined";

    return this._impl.getUserInfoByUserAccount(userAccount,userInfo,);
  }

  getUserInfoByUid(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let userInfo = obj.userInfo;
    if (userInfo === undefined) throw "userInfo is undefined";

    return this._impl.getUserInfoByUid(uid,userInfo,);
  }

  startOrUpdateChannelMediaRelay(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let configuration = obj.configuration;
    if (configuration === undefined) throw "configuration is undefined";

    return this._impl.startOrUpdateChannelMediaRelay(configuration,);
  }

  startChannelMediaRelay(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let configuration = obj.configuration;
    if (configuration === undefined) throw "configuration is undefined";

    return this._impl.startChannelMediaRelay(configuration,);
  }

  updateChannelMediaRelay(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let configuration = obj.configuration;
    if (configuration === undefined) throw "configuration is undefined";

    return this._impl.updateChannelMediaRelay(configuration,);
  }

  stopChannelMediaRelay(
    
    
    ): CallApiReturnType {

    return this._impl.stopChannelMediaRelay();
  }

  pauseAllChannelMediaRelay(
    
    
    ): CallApiReturnType {

    return this._impl.pauseAllChannelMediaRelay();
  }

  resumeAllChannelMediaRelay(
    
    
    ): CallApiReturnType {

    return this._impl.resumeAllChannelMediaRelay();
  }

  setDirectCdnStreamingAudioConfiguration(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let profile = obj.profile;
    if (profile === undefined) throw "profile is undefined";

    return this._impl.setDirectCdnStreamingAudioConfiguration(profile,);
  }

  setDirectCdnStreamingVideoConfiguration(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.setDirectCdnStreamingVideoConfiguration(config,);
  }

  startDirectCdnStreaming(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let eventHandler = obj.eventHandler;
    if (eventHandler === undefined) throw "eventHandler is undefined";
    let publishUrl = obj.publishUrl;
    if (publishUrl === undefined) throw "publishUrl is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";

    return this._impl.startDirectCdnStreaming(eventHandler,publishUrl,options,);
  }

  stopDirectCdnStreaming(
    
    
    ): CallApiReturnType {

    return this._impl.stopDirectCdnStreaming();
  }

  updateDirectCdnStreamingMediaOptions(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let options = obj.options;
    if (options === undefined) throw "options is undefined";

    return this._impl.updateDirectCdnStreamingMediaOptions(options,);
  }

  startRhythmPlayer(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let sound1 = obj.sound1;
    if (sound1 === undefined) throw "sound1 is undefined";
    let sound2 = obj.sound2;
    if (sound2 === undefined) throw "sound2 is undefined";
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.startRhythmPlayer(sound1,sound2,config,);
  }

  stopRhythmPlayer(
    
    
    ): CallApiReturnType {

    return this._impl.stopRhythmPlayer();
  }

  configRhythmPlayer(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.configRhythmPlayer(config,);
  }

  takeSnapshot(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let filePath = obj.filePath;
    if (filePath === undefined) throw "filePath is undefined";

    return this._impl.takeSnapshot(uid,filePath,);
  }

  enableContentInspect(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.enableContentInspect(enabled,config,);
  }

  adjustCustomAudioPublishVolume(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let trackId = obj.trackId;
    if (trackId === undefined) throw "trackId is undefined";
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.adjustCustomAudioPublishVolume(trackId,volume,);
  }

  adjustCustomAudioPlayoutVolume(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let trackId = obj.trackId;
    if (trackId === undefined) throw "trackId is undefined";
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.adjustCustomAudioPlayoutVolume(trackId,volume,);
  }

  setCloudProxy(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let proxyType = obj.proxyType;
    if (proxyType === undefined) throw "proxyType is undefined";

    return this._impl.setCloudProxy(proxyType,);
  }

  setLocalAccessPoint(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.setLocalAccessPoint(config,);
  }

  setAdvancedAudioOptions(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let options = obj.options;
    if (options === undefined) throw "options is undefined";
    let sourceType = obj.sourceType;
    if (sourceType === undefined) throw "sourceType is undefined";

    return this._impl.setAdvancedAudioOptions(options,sourceType,);
  }

  setAVSyncSource(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let channelId = obj.channelId;
    if (channelId === undefined) throw "channelId is undefined";
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";

    return this._impl.setAVSyncSource(channelId,uid,);
  }

  enableVideoImageSource(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enable = obj.enable;
    if (enable === undefined) throw "enable is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";

    return this._impl.enableVideoImageSource(enable,options,);
  }

  getCurrentMonotonicTimeInMs(
    
    
    ): CallApiReturnType {

    return this._impl.getCurrentMonotonicTimeInMs();
  }

  enableWirelessAccelerate(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";

    return this._impl.enableWirelessAccelerate(enabled,);
  }

  getNetworkType(
    
    
    ): CallApiReturnType {

    return this._impl.getNetworkType();
  }

  setParameters(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let parameters = obj.parameters;
    if (parameters === undefined) throw "parameters is undefined";

    return this._impl.setParameters(parameters,);
  }

  startMediaRenderingTracing(
    
    
    ): CallApiReturnType {

    return this._impl.startMediaRenderingTracing();
  }

  enableInstantMediaRendering(
    
    
    ): CallApiReturnType {

    return this._impl.enableInstantMediaRendering();
  }

  getNtpWallTimeInMs(
    
    
    ): CallApiReturnType {

    return this._impl.getNtpWallTimeInMs();
  }

  isFeatureAvailableOnDevice(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let type = obj.type;
    if (type === undefined) throw "type is undefined";

    return this._impl.isFeatureAvailableOnDevice(type,);
  }

}

