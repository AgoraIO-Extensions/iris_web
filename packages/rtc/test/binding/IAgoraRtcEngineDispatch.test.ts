/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  CallIrisApiResult,
  EventParam,
  IrisApiEngine,
  IrisCore,
} from 'iris-web-core';

import { initIrisRtc } from '../../src/index';
import { IrisRtcEngine } from '../engine/IrisRtcEngine';

let apiEnginePtr: IrisApiEngine;
let irisRtcEngine: IrisRtcEngine;
beforeAll(() => {
  apiEnginePtr = IrisCore.createIrisApiEngine();
  initIrisRtc(apiEnginePtr);
  irisRtcEngine = apiEnginePtr['apiInterceptors'][0];
});

afterAll(() => {
  IrisCore.disposeIrisApiEngine(apiEnginePtr);
});

describe('IVideoDeviceManager', () => {
  test('enumerateVideoDevices impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl,
        'enumerateVideoDevices'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'VideoDeviceManager_enumerateVideoDevices',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl
        .enumerateVideoDevices
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl
        .enumerateVideoDevices
    ).toBeCalledWith();
  });
  test('setDevice parameter', async () => {
    let nParam = {
      deviceIdUTF8: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'VideoDeviceManager_setDevice',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setDevice impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl,
        'setDevice'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      deviceIdUTF8: 'test',
    };
    let apiParam = new EventParam(
      'VideoDeviceManager_setDevice',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl.setDevice
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl.setDevice
    ).toBeCalledWith('test');
  });

  test('getDevice impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl,
        'getDevice'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'VideoDeviceManager_getDevice',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl.getDevice
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl.getDevice
    ).toBeCalledWith();
  });
  test('numberOfCapabilities parameter', async () => {
    let nParam = {
      deviceIdUTF8: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'VideoDeviceManager_numberOfCapabilities',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('numberOfCapabilities impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl,
        'numberOfCapabilities'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      deviceIdUTF8: 'test',
    };
    let apiParam = new EventParam(
      'VideoDeviceManager_numberOfCapabilities',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl
        .numberOfCapabilities
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl
        .numberOfCapabilities
    ).toBeCalledWith('test');
  });
  test('getCapability parameter', async () => {
    let nParam = {
      deviceIdUTF8: undefined,
      deviceCapabilityNumber: undefined,
      capability: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'VideoDeviceManager_getCapability',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getCapability impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl,
        'getCapability'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      deviceIdUTF8: 'test',
      deviceCapabilityNumber: 'test',
      capability: 'test',
    };
    let apiParam = new EventParam(
      'VideoDeviceManager_getCapability',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl
        .getCapability
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl
        .getCapability
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('startDeviceTest parameter', async () => {
    let nParam = {
      hwnd: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'VideoDeviceManager_startDeviceTest',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startDeviceTest impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl,
        'startDeviceTest'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      hwnd: 'test',
    };
    let apiParam = new EventParam(
      'VideoDeviceManager_startDeviceTest',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl
        .startDeviceTest
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl
        .startDeviceTest
    ).toBeCalledWith('test');
  });

  test('stopDeviceTest impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl,
        'stopDeviceTest'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'VideoDeviceManager_stopDeviceTest',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl
        .stopDeviceTest
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl
        .stopDeviceTest
    ).toBeCalledWith();
  });

  test('release impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl,
        'release'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'VideoDeviceManager_release',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl.release
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('VideoDeviceManager')._impl.release
    ).toBeCalledWith();
  });
});

describe('IRtcEngine', () => {
  test('release parameter', async () => {
    let nParam = {
      sync: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_release',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('release impl call', async () => {
    jest
      .spyOn(irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl, 'release')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      sync: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_release',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.release
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.release
    ).toBeCalledWith('test');
  });
  test('initialize parameter', async () => {
    let nParam = {
      context: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_initialize',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('initialize impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'initialize'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      context: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_initialize',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.initialize
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.initialize
    ).toBeCalledWith('test');
  });

  test('getVersion impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getVersion'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_getVersion',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getVersion
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getVersion
    ).toBeCalledWith();
  });
  test('getErrorDescription parameter', async () => {
    let nParam = {
      code: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_getErrorDescription',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getErrorDescription impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getErrorDescription'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      code: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_getErrorDescription',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getErrorDescription
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getErrorDescription
    ).toBeCalledWith('test');
  });
  test('queryCodecCapability parameter', async () => {
    let nParam = {
      codecInfo: undefined,
      size: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_queryCodecCapability',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('queryCodecCapability impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'queryCodecCapability'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      codecInfo: 'test',
      size: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_queryCodecCapability',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .queryCodecCapability
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .queryCodecCapability
    ).toBeCalledWith('test', 'test');
  });
  test('preloadChannel parameter', async () => {
    let nParam = {
      token: undefined,
      channelId: undefined,
      uid: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_preloadChannel',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('preloadChannel impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'preloadChannel'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      token: 'test',
      channelId: 'test',
      uid: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_preloadChannel',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.preloadChannel
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.preloadChannel
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('preloadChannel2 parameter', async () => {
    let nParam = {
      token: undefined,
      channelId: undefined,
      userAccount: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_preloadChannel2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('preloadChannel2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'preloadChannel2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      token: 'test',
      channelId: 'test',
      userAccount: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_preloadChannel2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.preloadChannel2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.preloadChannel2
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('updatePreloadChannelToken parameter', async () => {
    let nParam = {
      token: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_updatePreloadChannelToken',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('updatePreloadChannelToken impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'updatePreloadChannelToken'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      token: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_updatePreloadChannelToken',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updatePreloadChannelToken
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updatePreloadChannelToken
    ).toBeCalledWith('test');
  });
  test('joinChannel parameter', async () => {
    let nParam = {
      token: undefined,
      channelId: undefined,
      info: undefined,
      uid: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_joinChannel',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('joinChannel impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'joinChannel'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      token: 'test',
      channelId: 'test',
      info: 'test',
      uid: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_joinChannel',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.joinChannel
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.joinChannel
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('joinChannel2 parameter', async () => {
    let nParam = {
      token: undefined,
      channelId: undefined,
      uid: undefined,
      options: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_joinChannel2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('joinChannel2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'joinChannel2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      token: 'test',
      channelId: 'test',
      uid: 'test',
      options: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_joinChannel2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.joinChannel2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.joinChannel2
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('updateChannelMediaOptions parameter', async () => {
    let nParam = {
      options: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_updateChannelMediaOptions',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('updateChannelMediaOptions impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'updateChannelMediaOptions'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      options: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_updateChannelMediaOptions',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updateChannelMediaOptions
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updateChannelMediaOptions
    ).toBeCalledWith('test');
  });

  test('leaveChannel impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'leaveChannel'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_leaveChannel',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.leaveChannel
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.leaveChannel
    ).toBeCalledWith();
  });
  test('leaveChannel2 parameter', async () => {
    let nParam = {
      options: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_leaveChannel2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('leaveChannel2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'leaveChannel2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      options: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_leaveChannel2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.leaveChannel2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.leaveChannel2
    ).toBeCalledWith('test');
  });
  test('renewToken parameter', async () => {
    let nParam = {
      token: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_renewToken',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('renewToken impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'renewToken'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      token: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_renewToken',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.renewToken
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.renewToken
    ).toBeCalledWith('test');
  });
  test('setChannelProfile parameter', async () => {
    let nParam = {
      profile: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setChannelProfile',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setChannelProfile impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setChannelProfile'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      profile: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setChannelProfile',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setChannelProfile
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setChannelProfile
    ).toBeCalledWith('test');
  });
  test('setClientRole parameter', async () => {
    let nParam = {
      role: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setClientRole',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setClientRole impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setClientRole'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      role: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setClientRole',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setClientRole
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setClientRole
    ).toBeCalledWith('test');
  });
  test('setClientRole2 parameter', async () => {
    let nParam = {
      role: undefined,
      options: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setClientRole2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setClientRole2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setClientRole2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      role: 'test',
      options: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setClientRole2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setClientRole2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setClientRole2
    ).toBeCalledWith('test', 'test');
  });

  test('startEchoTest impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startEchoTest'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_startEchoTest',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startEchoTest
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startEchoTest
    ).toBeCalledWith();
  });
  test('startEchoTest2 parameter', async () => {
    let nParam = {
      intervalInSeconds: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startEchoTest2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startEchoTest2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startEchoTest2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      intervalInSeconds: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startEchoTest2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startEchoTest2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startEchoTest2
    ).toBeCalledWith('test');
  });
  test('startEchoTest3 parameter', async () => {
    let nParam = {
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startEchoTest3',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startEchoTest3 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startEchoTest3'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startEchoTest3',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startEchoTest3
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startEchoTest3
    ).toBeCalledWith('test');
  });

  test('stopEchoTest impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopEchoTest'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_stopEchoTest',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopEchoTest
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopEchoTest
    ).toBeCalledWith();
  });
  test('enableMultiCamera parameter', async () => {
    let nParam = {
      enabled: undefined,
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableMultiCamera',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableMultiCamera impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableMultiCamera'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableMultiCamera',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableMultiCamera
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableMultiCamera
    ).toBeCalledWith('test', 'test');
  });

  test('enableVideo impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableVideo'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_enableVideo',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableVideo
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableVideo
    ).toBeCalledWith();
  });

  test('disableVideo impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'disableVideo'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_disableVideo',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.disableVideo
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.disableVideo
    ).toBeCalledWith();
  });

  test('startPreview impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startPreview'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_startPreview',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startPreview
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startPreview
    ).toBeCalledWith();
  });
  test('startPreview2 parameter', async () => {
    let nParam = {
      sourceType: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startPreview2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startPreview2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startPreview2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      sourceType: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startPreview2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startPreview2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startPreview2
    ).toBeCalledWith('test');
  });

  test('stopPreview impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopPreview'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_stopPreview',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopPreview
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopPreview
    ).toBeCalledWith();
  });
  test('stopPreview2 parameter', async () => {
    let nParam = {
      sourceType: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_stopPreview2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('stopPreview2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopPreview2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      sourceType: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_stopPreview2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopPreview2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopPreview2
    ).toBeCalledWith('test');
  });
  test('startLastmileProbeTest parameter', async () => {
    let nParam = {
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startLastmileProbeTest',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startLastmileProbeTest impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startLastmileProbeTest'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startLastmileProbeTest',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startLastmileProbeTest
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startLastmileProbeTest
    ).toBeCalledWith('test');
  });

  test('stopLastmileProbeTest impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopLastmileProbeTest'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_stopLastmileProbeTest',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .stopLastmileProbeTest
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .stopLastmileProbeTest
    ).toBeCalledWith();
  });
  test('setVideoEncoderConfiguration parameter', async () => {
    let nParam = {
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setVideoEncoderConfiguration',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setVideoEncoderConfiguration impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setVideoEncoderConfiguration'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setVideoEncoderConfiguration',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setVideoEncoderConfiguration
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setVideoEncoderConfiguration
    ).toBeCalledWith('test');
  });
  test('setBeautyEffectOptions parameter', async () => {
    let nParam = {
      enabled: undefined,
      options: undefined,
      type: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setBeautyEffectOptions',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setBeautyEffectOptions impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setBeautyEffectOptions'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      options: 'test',
      type: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setBeautyEffectOptions',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setBeautyEffectOptions
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setBeautyEffectOptions
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setLowlightEnhanceOptions parameter', async () => {
    let nParam = {
      enabled: undefined,
      options: undefined,
      type: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setLowlightEnhanceOptions',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLowlightEnhanceOptions impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setLowlightEnhanceOptions'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      options: 'test',
      type: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setLowlightEnhanceOptions',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setLowlightEnhanceOptions
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setLowlightEnhanceOptions
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setVideoDenoiserOptions parameter', async () => {
    let nParam = {
      enabled: undefined,
      options: undefined,
      type: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setVideoDenoiserOptions',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setVideoDenoiserOptions impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setVideoDenoiserOptions'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      options: 'test',
      type: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setVideoDenoiserOptions',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setVideoDenoiserOptions
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setVideoDenoiserOptions
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setColorEnhanceOptions parameter', async () => {
    let nParam = {
      enabled: undefined,
      options: undefined,
      type: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setColorEnhanceOptions',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setColorEnhanceOptions impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setColorEnhanceOptions'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      options: 'test',
      type: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setColorEnhanceOptions',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setColorEnhanceOptions
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setColorEnhanceOptions
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('enableVirtualBackground parameter', async () => {
    let nParam = {
      enabled: undefined,
      backgroundSource: undefined,
      segproperty: undefined,
      type: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableVirtualBackground',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableVirtualBackground impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableVirtualBackground'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      backgroundSource: 'test',
      segproperty: 'test',
      type: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableVirtualBackground',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableVirtualBackground
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableVirtualBackground
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('setupRemoteVideo parameter', async () => {
    let nParam = {
      canvas: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setupRemoteVideo',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setupRemoteVideo impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setupRemoteVideo'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      canvas: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setupRemoteVideo',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setupRemoteVideo
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setupRemoteVideo
    ).toBeCalledWith('test');
  });
  test('setupLocalVideo parameter', async () => {
    let nParam = {
      canvas: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setupLocalVideo',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setupLocalVideo impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setupLocalVideo'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      canvas: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setupLocalVideo',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setupLocalVideo
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setupLocalVideo
    ).toBeCalledWith('test');
  });
  test('setVideoScenario parameter', async () => {
    let nParam = {
      scenarioType: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setVideoScenario',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setVideoScenario impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setVideoScenario'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      scenarioType: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setVideoScenario',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setVideoScenario
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setVideoScenario
    ).toBeCalledWith('test');
  });

  test('enableAudio impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableAudio'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_enableAudio',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableAudio
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableAudio
    ).toBeCalledWith();
  });

  test('disableAudio impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'disableAudio'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_disableAudio',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.disableAudio
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.disableAudio
    ).toBeCalledWith();
  });
  test('setAudioProfile parameter', async () => {
    let nParam = {
      profile: undefined,
      scenario: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setAudioProfile',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setAudioProfile impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setAudioProfile'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      profile: 'test',
      scenario: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setAudioProfile',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setAudioProfile
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setAudioProfile
    ).toBeCalledWith('test', 'test');
  });
  test('setAudioProfile2 parameter', async () => {
    let nParam = {
      profile: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setAudioProfile2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setAudioProfile2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setAudioProfile2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      profile: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setAudioProfile2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setAudioProfile2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setAudioProfile2
    ).toBeCalledWith('test');
  });
  test('setAudioScenario parameter', async () => {
    let nParam = {
      scenario: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setAudioScenario',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setAudioScenario impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setAudioScenario'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      scenario: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setAudioScenario',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setAudioScenario
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setAudioScenario
    ).toBeCalledWith('test');
  });
  test('enableLocalAudio parameter', async () => {
    let nParam = {
      enabled: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableLocalAudio',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableLocalAudio impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableLocalAudio'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableLocalAudio',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableLocalAudio
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableLocalAudio
    ).toBeCalledWith('test');
  });
  test('muteLocalAudioStream parameter', async () => {
    let nParam = {
      mute: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_muteLocalAudioStream',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('muteLocalAudioStream impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'muteLocalAudioStream'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_muteLocalAudioStream',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .muteLocalAudioStream
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .muteLocalAudioStream
    ).toBeCalledWith('test');
  });
  test('muteAllRemoteAudioStreams parameter', async () => {
    let nParam = {
      mute: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_muteAllRemoteAudioStreams',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('muteAllRemoteAudioStreams impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'muteAllRemoteAudioStreams'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_muteAllRemoteAudioStreams',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .muteAllRemoteAudioStreams
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .muteAllRemoteAudioStreams
    ).toBeCalledWith('test');
  });
  test('setDefaultMuteAllRemoteAudioStreams parameter', async () => {
    let nParam = {
      mute: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setDefaultMuteAllRemoteAudioStreams',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setDefaultMuteAllRemoteAudioStreams impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setDefaultMuteAllRemoteAudioStreams'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setDefaultMuteAllRemoteAudioStreams',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setDefaultMuteAllRemoteAudioStreams
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setDefaultMuteAllRemoteAudioStreams
    ).toBeCalledWith('test');
  });
  test('muteRemoteAudioStream parameter', async () => {
    let nParam = {
      uid: undefined,
      mute: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_muteRemoteAudioStream',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('muteRemoteAudioStream impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'muteRemoteAudioStream'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      mute: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_muteRemoteAudioStream',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .muteRemoteAudioStream
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .muteRemoteAudioStream
    ).toBeCalledWith('test', 'test');
  });
  test('muteLocalVideoStream parameter', async () => {
    let nParam = {
      mute: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_muteLocalVideoStream',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('muteLocalVideoStream impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'muteLocalVideoStream'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_muteLocalVideoStream',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .muteLocalVideoStream
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .muteLocalVideoStream
    ).toBeCalledWith('test');
  });
  test('enableLocalVideo parameter', async () => {
    let nParam = {
      enabled: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableLocalVideo',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableLocalVideo impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableLocalVideo'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableLocalVideo',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableLocalVideo
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableLocalVideo
    ).toBeCalledWith('test');
  });
  test('muteAllRemoteVideoStreams parameter', async () => {
    let nParam = {
      mute: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_muteAllRemoteVideoStreams',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('muteAllRemoteVideoStreams impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'muteAllRemoteVideoStreams'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_muteAllRemoteVideoStreams',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .muteAllRemoteVideoStreams
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .muteAllRemoteVideoStreams
    ).toBeCalledWith('test');
  });
  test('setDefaultMuteAllRemoteVideoStreams parameter', async () => {
    let nParam = {
      mute: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setDefaultMuteAllRemoteVideoStreams',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setDefaultMuteAllRemoteVideoStreams impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setDefaultMuteAllRemoteVideoStreams'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setDefaultMuteAllRemoteVideoStreams',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setDefaultMuteAllRemoteVideoStreams
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setDefaultMuteAllRemoteVideoStreams
    ).toBeCalledWith('test');
  });
  test('muteRemoteVideoStream parameter', async () => {
    let nParam = {
      uid: undefined,
      mute: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_muteRemoteVideoStream',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('muteRemoteVideoStream impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'muteRemoteVideoStream'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      mute: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_muteRemoteVideoStream',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .muteRemoteVideoStream
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .muteRemoteVideoStream
    ).toBeCalledWith('test', 'test');
  });
  test('setRemoteVideoStreamType parameter', async () => {
    let nParam = {
      uid: undefined,
      streamType: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setRemoteVideoStreamType',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRemoteVideoStreamType impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setRemoteVideoStreamType'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      streamType: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setRemoteVideoStreamType',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRemoteVideoStreamType
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRemoteVideoStreamType
    ).toBeCalledWith('test', 'test');
  });
  test('setRemoteVideoSubscriptionOptions parameter', async () => {
    let nParam = {
      uid: undefined,
      options: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setRemoteVideoSubscriptionOptions',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRemoteVideoSubscriptionOptions impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setRemoteVideoSubscriptionOptions'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      options: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setRemoteVideoSubscriptionOptions',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRemoteVideoSubscriptionOptions
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRemoteVideoSubscriptionOptions
    ).toBeCalledWith('test', 'test');
  });
  test('setRemoteDefaultVideoStreamType parameter', async () => {
    let nParam = {
      streamType: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setRemoteDefaultVideoStreamType',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRemoteDefaultVideoStreamType impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setRemoteDefaultVideoStreamType'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      streamType: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setRemoteDefaultVideoStreamType',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRemoteDefaultVideoStreamType
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRemoteDefaultVideoStreamType
    ).toBeCalledWith('test');
  });
  test('setSubscribeAudioBlocklist parameter', async () => {
    let nParam = {
      uidList: undefined,
      uidNumber: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setSubscribeAudioBlocklist',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setSubscribeAudioBlocklist impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setSubscribeAudioBlocklist'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uidList: 'test',
      uidNumber: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setSubscribeAudioBlocklist',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setSubscribeAudioBlocklist
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setSubscribeAudioBlocklist
    ).toBeCalledWith('test', 'test');
  });
  test('setSubscribeAudioAllowlist parameter', async () => {
    let nParam = {
      uidList: undefined,
      uidNumber: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setSubscribeAudioAllowlist',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setSubscribeAudioAllowlist impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setSubscribeAudioAllowlist'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uidList: 'test',
      uidNumber: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setSubscribeAudioAllowlist',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setSubscribeAudioAllowlist
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setSubscribeAudioAllowlist
    ).toBeCalledWith('test', 'test');
  });
  test('setSubscribeVideoBlocklist parameter', async () => {
    let nParam = {
      uidList: undefined,
      uidNumber: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setSubscribeVideoBlocklist',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setSubscribeVideoBlocklist impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setSubscribeVideoBlocklist'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uidList: 'test',
      uidNumber: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setSubscribeVideoBlocklist',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setSubscribeVideoBlocklist
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setSubscribeVideoBlocklist
    ).toBeCalledWith('test', 'test');
  });
  test('setSubscribeVideoAllowlist parameter', async () => {
    let nParam = {
      uidList: undefined,
      uidNumber: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setSubscribeVideoAllowlist',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setSubscribeVideoAllowlist impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setSubscribeVideoAllowlist'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uidList: 'test',
      uidNumber: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setSubscribeVideoAllowlist',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setSubscribeVideoAllowlist
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setSubscribeVideoAllowlist
    ).toBeCalledWith('test', 'test');
  });
  test('enableAudioVolumeIndication parameter', async () => {
    let nParam = {
      interval: undefined,
      smooth: undefined,
      reportVad: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableAudioVolumeIndication',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableAudioVolumeIndication impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableAudioVolumeIndication'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      interval: 'test',
      smooth: 'test',
      reportVad: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableAudioVolumeIndication',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableAudioVolumeIndication
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableAudioVolumeIndication
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('startAudioRecording parameter', async () => {
    let nParam = {
      filePath: undefined,
      quality: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startAudioRecording',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startAudioRecording impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startAudioRecording'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      filePath: 'test',
      quality: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startAudioRecording',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startAudioRecording
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startAudioRecording
    ).toBeCalledWith('test', 'test');
  });
  test('startAudioRecording2 parameter', async () => {
    let nParam = {
      filePath: undefined,
      sampleRate: undefined,
      quality: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startAudioRecording2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startAudioRecording2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startAudioRecording2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      filePath: 'test',
      sampleRate: 'test',
      quality: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startAudioRecording2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startAudioRecording2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startAudioRecording2
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('startAudioRecording3 parameter', async () => {
    let nParam = {
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startAudioRecording3',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startAudioRecording3 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startAudioRecording3'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startAudioRecording3',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startAudioRecording3
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startAudioRecording3
    ).toBeCalledWith('test');
  });
  test('registerAudioEncodedFrameObserver parameter', async () => {
    let nParam = {
      config: undefined,
      observer: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_registerAudioEncodedFrameObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('registerAudioEncodedFrameObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'registerAudioEncodedFrameObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      config: 'test',
      observer: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_registerAudioEncodedFrameObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .registerAudioEncodedFrameObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .registerAudioEncodedFrameObserver
    ).toBeCalledWith('test', 'test');
  });

  test('stopAudioRecording impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopAudioRecording'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_stopAudioRecording',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopAudioRecording
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopAudioRecording
    ).toBeCalledWith();
  });

  test('createMediaPlayer impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'createMediaPlayer'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_createMediaPlayer',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.createMediaPlayer
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.createMediaPlayer
    ).toBeCalledWith();
  });
  test('destroyMediaPlayer parameter', async () => {
    let nParam = {
      media_player: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_destroyMediaPlayer',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('destroyMediaPlayer impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'destroyMediaPlayer'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      media_player: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_destroyMediaPlayer',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.destroyMediaPlayer
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.destroyMediaPlayer
    ).toBeCalledWith('test');
  });
  test('createMediaRecorder parameter', async () => {
    let nParam = {
      info: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_createMediaRecorder',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('createMediaRecorder impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'createMediaRecorder'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      info: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_createMediaRecorder',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.createMediaRecorder
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.createMediaRecorder
    ).toBeCalledWith('test');
  });
  test('destroyMediaRecorder parameter', async () => {
    let nParam = {
      mediaRecorder: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_destroyMediaRecorder',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('destroyMediaRecorder impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'destroyMediaRecorder'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mediaRecorder: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_destroyMediaRecorder',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .destroyMediaRecorder
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .destroyMediaRecorder
    ).toBeCalledWith('test');
  });
  test('startAudioMixing parameter', async () => {
    let nParam = {
      filePath: undefined,
      loopback: undefined,
      cycle: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startAudioMixing',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startAudioMixing impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startAudioMixing'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      filePath: 'test',
      loopback: 'test',
      cycle: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startAudioMixing',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startAudioMixing
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startAudioMixing
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('startAudioMixing2 parameter', async () => {
    let nParam = {
      filePath: undefined,
      loopback: undefined,
      cycle: undefined,
      startPos: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startAudioMixing2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startAudioMixing2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startAudioMixing2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      filePath: 'test',
      loopback: 'test',
      cycle: 'test',
      startPos: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startAudioMixing2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startAudioMixing2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startAudioMixing2
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });

  test('stopAudioMixing impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopAudioMixing'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_stopAudioMixing',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopAudioMixing
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopAudioMixing
    ).toBeCalledWith();
  });

  test('pauseAudioMixing impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'pauseAudioMixing'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_pauseAudioMixing',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.pauseAudioMixing
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.pauseAudioMixing
    ).toBeCalledWith();
  });

  test('resumeAudioMixing impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'resumeAudioMixing'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_resumeAudioMixing',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.resumeAudioMixing
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.resumeAudioMixing
    ).toBeCalledWith();
  });
  test('selectAudioTrack parameter', async () => {
    let nParam = {
      index: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_selectAudioTrack',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('selectAudioTrack impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'selectAudioTrack'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      index: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_selectAudioTrack',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.selectAudioTrack
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.selectAudioTrack
    ).toBeCalledWith('test');
  });

  test('getAudioTrackCount impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getAudioTrackCount'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_getAudioTrackCount',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getAudioTrackCount
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getAudioTrackCount
    ).toBeCalledWith();
  });
  test('adjustAudioMixingVolume parameter', async () => {
    let nParam = {
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_adjustAudioMixingVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('adjustAudioMixingVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'adjustAudioMixingVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_adjustAudioMixingVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustAudioMixingVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustAudioMixingVolume
    ).toBeCalledWith('test');
  });
  test('adjustAudioMixingPublishVolume parameter', async () => {
    let nParam = {
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_adjustAudioMixingPublishVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('adjustAudioMixingPublishVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'adjustAudioMixingPublishVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_adjustAudioMixingPublishVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustAudioMixingPublishVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustAudioMixingPublishVolume
    ).toBeCalledWith('test');
  });

  test('getAudioMixingPublishVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getAudioMixingPublishVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_getAudioMixingPublishVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getAudioMixingPublishVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getAudioMixingPublishVolume
    ).toBeCalledWith();
  });
  test('adjustAudioMixingPlayoutVolume parameter', async () => {
    let nParam = {
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_adjustAudioMixingPlayoutVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('adjustAudioMixingPlayoutVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'adjustAudioMixingPlayoutVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_adjustAudioMixingPlayoutVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustAudioMixingPlayoutVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustAudioMixingPlayoutVolume
    ).toBeCalledWith('test');
  });

  test('getAudioMixingPlayoutVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getAudioMixingPlayoutVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_getAudioMixingPlayoutVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getAudioMixingPlayoutVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getAudioMixingPlayoutVolume
    ).toBeCalledWith();
  });

  test('getAudioMixingDuration impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getAudioMixingDuration'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_getAudioMixingDuration',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getAudioMixingDuration
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getAudioMixingDuration
    ).toBeCalledWith();
  });

  test('getAudioMixingCurrentPosition impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getAudioMixingCurrentPosition'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_getAudioMixingCurrentPosition',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getAudioMixingCurrentPosition
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getAudioMixingCurrentPosition
    ).toBeCalledWith();
  });
  test('setAudioMixingPosition parameter', async () => {
    let nParam = {
      pos: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setAudioMixingPosition',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setAudioMixingPosition impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setAudioMixingPosition'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      pos: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setAudioMixingPosition',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setAudioMixingPosition
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setAudioMixingPosition
    ).toBeCalledWith('test');
  });
  test('setAudioMixingDualMonoMode parameter', async () => {
    let nParam = {
      mode: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setAudioMixingDualMonoMode',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setAudioMixingDualMonoMode impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setAudioMixingDualMonoMode'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mode: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setAudioMixingDualMonoMode',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setAudioMixingDualMonoMode
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setAudioMixingDualMonoMode
    ).toBeCalledWith('test');
  });
  test('setAudioMixingPitch parameter', async () => {
    let nParam = {
      pitch: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setAudioMixingPitch',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setAudioMixingPitch impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setAudioMixingPitch'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      pitch: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setAudioMixingPitch',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setAudioMixingPitch
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setAudioMixingPitch
    ).toBeCalledWith('test');
  });

  test('getEffectsVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getEffectsVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_getEffectsVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getEffectsVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getEffectsVolume
    ).toBeCalledWith();
  });
  test('setEffectsVolume parameter', async () => {
    let nParam = {
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setEffectsVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setEffectsVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setEffectsVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setEffectsVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setEffectsVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setEffectsVolume
    ).toBeCalledWith('test');
  });
  test('preloadEffect parameter', async () => {
    let nParam = {
      soundId: undefined,
      filePath: undefined,
      startPos: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_preloadEffect',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('preloadEffect impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'preloadEffect'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      soundId: 'test',
      filePath: 'test',
      startPos: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_preloadEffect',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.preloadEffect
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.preloadEffect
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('playEffect parameter', async () => {
    let nParam = {
      soundId: undefined,
      filePath: undefined,
      loopCount: undefined,
      pitch: undefined,
      pan: undefined,
      gain: undefined,
      publish: undefined,
      startPos: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_playEffect',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('playEffect impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'playEffect'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      soundId: 'test',
      filePath: 'test',
      loopCount: 'test',
      pitch: 'test',
      pan: 'test',
      gain: 'test',
      publish: 'test',
      startPos: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_playEffect',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.playEffect
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.playEffect
    ).toBeCalledWith(
      'test',
      'test',
      'test',
      'test',
      'test',
      'test',
      'test',
      'test'
    );
  });
  test('playAllEffects parameter', async () => {
    let nParam = {
      loopCount: undefined,
      pitch: undefined,
      pan: undefined,
      gain: undefined,
      publish: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_playAllEffects',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('playAllEffects impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'playAllEffects'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      loopCount: 'test',
      pitch: 'test',
      pan: 'test',
      gain: 'test',
      publish: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_playAllEffects',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.playAllEffects
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.playAllEffects
    ).toBeCalledWith('test', 'test', 'test', 'test', 'test');
  });
  test('getVolumeOfEffect parameter', async () => {
    let nParam = {
      soundId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_getVolumeOfEffect',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getVolumeOfEffect impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getVolumeOfEffect'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      soundId: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_getVolumeOfEffect',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getVolumeOfEffect
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getVolumeOfEffect
    ).toBeCalledWith('test');
  });
  test('setVolumeOfEffect parameter', async () => {
    let nParam = {
      soundId: undefined,
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setVolumeOfEffect',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setVolumeOfEffect impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setVolumeOfEffect'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      soundId: 'test',
      volume: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setVolumeOfEffect',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setVolumeOfEffect
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setVolumeOfEffect
    ).toBeCalledWith('test', 'test');
  });
  test('pauseEffect parameter', async () => {
    let nParam = {
      soundId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_pauseEffect',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('pauseEffect impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'pauseEffect'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      soundId: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_pauseEffect',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.pauseEffect
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.pauseEffect
    ).toBeCalledWith('test');
  });

  test('pauseAllEffects impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'pauseAllEffects'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_pauseAllEffects',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.pauseAllEffects
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.pauseAllEffects
    ).toBeCalledWith();
  });
  test('resumeEffect parameter', async () => {
    let nParam = {
      soundId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_resumeEffect',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('resumeEffect impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'resumeEffect'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      soundId: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_resumeEffect',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.resumeEffect
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.resumeEffect
    ).toBeCalledWith('test');
  });

  test('resumeAllEffects impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'resumeAllEffects'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_resumeAllEffects',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.resumeAllEffects
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.resumeAllEffects
    ).toBeCalledWith();
  });
  test('stopEffect parameter', async () => {
    let nParam = {
      soundId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_stopEffect',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('stopEffect impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopEffect'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      soundId: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_stopEffect',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopEffect
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopEffect
    ).toBeCalledWith('test');
  });

  test('stopAllEffects impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopAllEffects'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_stopAllEffects',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopAllEffects
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopAllEffects
    ).toBeCalledWith();
  });
  test('unloadEffect parameter', async () => {
    let nParam = {
      soundId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_unloadEffect',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('unloadEffect impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'unloadEffect'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      soundId: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_unloadEffect',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.unloadEffect
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.unloadEffect
    ).toBeCalledWith('test');
  });

  test('unloadAllEffects impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'unloadAllEffects'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_unloadAllEffects',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.unloadAllEffects
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.unloadAllEffects
    ).toBeCalledWith();
  });
  test('getEffectDuration parameter', async () => {
    let nParam = {
      filePath: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_getEffectDuration',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getEffectDuration impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getEffectDuration'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      filePath: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_getEffectDuration',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getEffectDuration
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getEffectDuration
    ).toBeCalledWith('test');
  });
  test('setEffectPosition parameter', async () => {
    let nParam = {
      soundId: undefined,
      pos: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setEffectPosition',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setEffectPosition impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setEffectPosition'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      soundId: 'test',
      pos: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setEffectPosition',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setEffectPosition
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setEffectPosition
    ).toBeCalledWith('test', 'test');
  });
  test('getEffectCurrentPosition parameter', async () => {
    let nParam = {
      soundId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_getEffectCurrentPosition',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getEffectCurrentPosition impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getEffectCurrentPosition'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      soundId: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_getEffectCurrentPosition',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getEffectCurrentPosition
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getEffectCurrentPosition
    ).toBeCalledWith('test');
  });
  test('enableSoundPositionIndication parameter', async () => {
    let nParam = {
      enabled: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableSoundPositionIndication',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableSoundPositionIndication impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableSoundPositionIndication'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableSoundPositionIndication',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableSoundPositionIndication
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableSoundPositionIndication
    ).toBeCalledWith('test');
  });
  test('setRemoteVoicePosition parameter', async () => {
    let nParam = {
      uid: undefined,
      pan: undefined,
      gain: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setRemoteVoicePosition',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRemoteVoicePosition impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setRemoteVoicePosition'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      pan: 'test',
      gain: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setRemoteVoicePosition',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRemoteVoicePosition
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRemoteVoicePosition
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('enableSpatialAudio parameter', async () => {
    let nParam = {
      enabled: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableSpatialAudio',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableSpatialAudio impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableSpatialAudio'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableSpatialAudio',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableSpatialAudio
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableSpatialAudio
    ).toBeCalledWith('test');
  });
  test('setRemoteUserSpatialAudioParams parameter', async () => {
    let nParam = {
      uid: undefined,
      params: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setRemoteUserSpatialAudioParams',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRemoteUserSpatialAudioParams impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setRemoteUserSpatialAudioParams'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      params: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setRemoteUserSpatialAudioParams',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRemoteUserSpatialAudioParams
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRemoteUserSpatialAudioParams
    ).toBeCalledWith('test', 'test');
  });
  test('setVoiceBeautifierPreset parameter', async () => {
    let nParam = {
      preset: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setVoiceBeautifierPreset',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setVoiceBeautifierPreset impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setVoiceBeautifierPreset'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      preset: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setVoiceBeautifierPreset',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setVoiceBeautifierPreset
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setVoiceBeautifierPreset
    ).toBeCalledWith('test');
  });
  test('setAudioEffectPreset parameter', async () => {
    let nParam = {
      preset: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setAudioEffectPreset',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setAudioEffectPreset impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setAudioEffectPreset'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      preset: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setAudioEffectPreset',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setAudioEffectPreset
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setAudioEffectPreset
    ).toBeCalledWith('test');
  });
  test('setVoiceConversionPreset parameter', async () => {
    let nParam = {
      preset: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setVoiceConversionPreset',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setVoiceConversionPreset impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setVoiceConversionPreset'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      preset: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setVoiceConversionPreset',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setVoiceConversionPreset
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setVoiceConversionPreset
    ).toBeCalledWith('test');
  });
  test('setAudioEffectParameters parameter', async () => {
    let nParam = {
      preset: undefined,
      param1: undefined,
      param2: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setAudioEffectParameters',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setAudioEffectParameters impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setAudioEffectParameters'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      preset: 'test',
      param1: 'test',
      param2: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setAudioEffectParameters',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setAudioEffectParameters
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setAudioEffectParameters
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setVoiceBeautifierParameters parameter', async () => {
    let nParam = {
      preset: undefined,
      param1: undefined,
      param2: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setVoiceBeautifierParameters',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setVoiceBeautifierParameters impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setVoiceBeautifierParameters'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      preset: 'test',
      param1: 'test',
      param2: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setVoiceBeautifierParameters',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setVoiceBeautifierParameters
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setVoiceBeautifierParameters
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setVoiceConversionParameters parameter', async () => {
    let nParam = {
      preset: undefined,
      param1: undefined,
      param2: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setVoiceConversionParameters',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setVoiceConversionParameters impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setVoiceConversionParameters'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      preset: 'test',
      param1: 'test',
      param2: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setVoiceConversionParameters',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setVoiceConversionParameters
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setVoiceConversionParameters
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setLocalVoicePitch parameter', async () => {
    let nParam = {
      pitch: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setLocalVoicePitch',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLocalVoicePitch impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setLocalVoicePitch'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      pitch: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setLocalVoicePitch',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLocalVoicePitch
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLocalVoicePitch
    ).toBeCalledWith('test');
  });
  test('setLocalVoiceFormant parameter', async () => {
    let nParam = {
      formantRatio: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setLocalVoiceFormant',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLocalVoiceFormant impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setLocalVoiceFormant'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      formantRatio: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setLocalVoiceFormant',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setLocalVoiceFormant
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setLocalVoiceFormant
    ).toBeCalledWith('test');
  });
  test('setLocalVoiceEqualization parameter', async () => {
    let nParam = {
      bandFrequency: undefined,
      bandGain: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setLocalVoiceEqualization',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLocalVoiceEqualization impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setLocalVoiceEqualization'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      bandFrequency: 'test',
      bandGain: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setLocalVoiceEqualization',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setLocalVoiceEqualization
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setLocalVoiceEqualization
    ).toBeCalledWith('test', 'test');
  });
  test('setLocalVoiceReverb parameter', async () => {
    let nParam = {
      reverbKey: undefined,
      value: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setLocalVoiceReverb',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLocalVoiceReverb impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setLocalVoiceReverb'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      reverbKey: 'test',
      value: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setLocalVoiceReverb',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLocalVoiceReverb
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLocalVoiceReverb
    ).toBeCalledWith('test', 'test');
  });
  test('setHeadphoneEQPreset parameter', async () => {
    let nParam = {
      preset: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setHeadphoneEQPreset',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setHeadphoneEQPreset impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setHeadphoneEQPreset'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      preset: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setHeadphoneEQPreset',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setHeadphoneEQPreset
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setHeadphoneEQPreset
    ).toBeCalledWith('test');
  });
  test('setHeadphoneEQParameters parameter', async () => {
    let nParam = {
      lowGain: undefined,
      highGain: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setHeadphoneEQParameters',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setHeadphoneEQParameters impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setHeadphoneEQParameters'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      lowGain: 'test',
      highGain: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setHeadphoneEQParameters',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setHeadphoneEQParameters
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setHeadphoneEQParameters
    ).toBeCalledWith('test', 'test');
  });
  test('setLogFile parameter', async () => {
    let nParam = {
      filePath: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setLogFile',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLogFile impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setLogFile'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      filePath: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setLogFile',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLogFile
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLogFile
    ).toBeCalledWith('test');
  });
  test('setLogFilter parameter', async () => {
    let nParam = {
      filter: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setLogFilter',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLogFilter impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setLogFilter'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      filter: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setLogFilter',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLogFilter
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLogFilter
    ).toBeCalledWith('test');
  });
  test('setLogLevel parameter', async () => {
    let nParam = {
      level: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setLogLevel',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLogLevel impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setLogLevel'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      level: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setLogLevel',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLogLevel
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLogLevel
    ).toBeCalledWith('test');
  });
  test('setLogFileSize parameter', async () => {
    let nParam = {
      fileSizeInKBytes: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setLogFileSize',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLogFileSize impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setLogFileSize'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      fileSizeInKBytes: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setLogFileSize',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLogFileSize
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLogFileSize
    ).toBeCalledWith('test');
  });
  test('uploadLogFile parameter', async () => {
    let nParam = {
      requestId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_uploadLogFile',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('uploadLogFile impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'uploadLogFile'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      requestId: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_uploadLogFile',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.uploadLogFile
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.uploadLogFile
    ).toBeCalledWith('test');
  });
  test('setLocalRenderMode parameter', async () => {
    let nParam = {
      renderMode: undefined,
      mirrorMode: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setLocalRenderMode',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLocalRenderMode impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setLocalRenderMode'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      renderMode: 'test',
      mirrorMode: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setLocalRenderMode',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLocalRenderMode
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLocalRenderMode
    ).toBeCalledWith('test', 'test');
  });
  test('setRemoteRenderMode parameter', async () => {
    let nParam = {
      uid: undefined,
      renderMode: undefined,
      mirrorMode: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setRemoteRenderMode',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRemoteRenderMode impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setRemoteRenderMode'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      renderMode: 'test',
      mirrorMode: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setRemoteRenderMode',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setRemoteRenderMode
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setRemoteRenderMode
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setLocalRenderMode2 parameter', async () => {
    let nParam = {
      renderMode: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setLocalRenderMode2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLocalRenderMode2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setLocalRenderMode2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      renderMode: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setLocalRenderMode2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLocalRenderMode2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLocalRenderMode2
    ).toBeCalledWith('test');
  });
  test('setLocalVideoMirrorMode parameter', async () => {
    let nParam = {
      mirrorMode: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setLocalVideoMirrorMode',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLocalVideoMirrorMode impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setLocalVideoMirrorMode'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mirrorMode: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setLocalVideoMirrorMode',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setLocalVideoMirrorMode
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setLocalVideoMirrorMode
    ).toBeCalledWith('test');
  });
  test('enableDualStreamMode parameter', async () => {
    let nParam = {
      enabled: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableDualStreamMode',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableDualStreamMode impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableDualStreamMode'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableDualStreamMode',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableDualStreamMode
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableDualStreamMode
    ).toBeCalledWith('test');
  });
  test('enableDualStreamMode2 parameter', async () => {
    let nParam = {
      enabled: undefined,
      streamConfig: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableDualStreamMode2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableDualStreamMode2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableDualStreamMode2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      streamConfig: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableDualStreamMode2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableDualStreamMode2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableDualStreamMode2
    ).toBeCalledWith('test', 'test');
  });
  test('setDualStreamMode parameter', async () => {
    let nParam = {
      mode: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setDualStreamMode',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setDualStreamMode impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setDualStreamMode'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mode: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setDualStreamMode',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setDualStreamMode
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setDualStreamMode
    ).toBeCalledWith('test');
  });
  test('setDualStreamMode2 parameter', async () => {
    let nParam = {
      mode: undefined,
      streamConfig: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setDualStreamMode2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setDualStreamMode2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setDualStreamMode2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mode: 'test',
      streamConfig: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setDualStreamMode2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setDualStreamMode2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setDualStreamMode2
    ).toBeCalledWith('test', 'test');
  });
  test('enableCustomAudioLocalPlayback parameter', async () => {
    let nParam = {
      trackId: undefined,
      enabled: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableCustomAudioLocalPlayback',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableCustomAudioLocalPlayback impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableCustomAudioLocalPlayback'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      trackId: 'test',
      enabled: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableCustomAudioLocalPlayback',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableCustomAudioLocalPlayback
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableCustomAudioLocalPlayback
    ).toBeCalledWith('test', 'test');
  });
  test('setRecordingAudioFrameParameters parameter', async () => {
    let nParam = {
      sampleRate: undefined,
      channel: undefined,
      mode: undefined,
      samplesPerCall: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setRecordingAudioFrameParameters',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRecordingAudioFrameParameters impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setRecordingAudioFrameParameters'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      sampleRate: 'test',
      channel: 'test',
      mode: 'test',
      samplesPerCall: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setRecordingAudioFrameParameters',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRecordingAudioFrameParameters
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRecordingAudioFrameParameters
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('setPlaybackAudioFrameParameters parameter', async () => {
    let nParam = {
      sampleRate: undefined,
      channel: undefined,
      mode: undefined,
      samplesPerCall: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setPlaybackAudioFrameParameters',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setPlaybackAudioFrameParameters impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setPlaybackAudioFrameParameters'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      sampleRate: 'test',
      channel: 'test',
      mode: 'test',
      samplesPerCall: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setPlaybackAudioFrameParameters',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setPlaybackAudioFrameParameters
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setPlaybackAudioFrameParameters
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('setMixedAudioFrameParameters parameter', async () => {
    let nParam = {
      sampleRate: undefined,
      channel: undefined,
      samplesPerCall: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setMixedAudioFrameParameters',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setMixedAudioFrameParameters impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setMixedAudioFrameParameters'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      sampleRate: 'test',
      channel: 'test',
      samplesPerCall: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setMixedAudioFrameParameters',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setMixedAudioFrameParameters
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setMixedAudioFrameParameters
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setEarMonitoringAudioFrameParameters parameter', async () => {
    let nParam = {
      sampleRate: undefined,
      channel: undefined,
      mode: undefined,
      samplesPerCall: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setEarMonitoringAudioFrameParameters',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setEarMonitoringAudioFrameParameters impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setEarMonitoringAudioFrameParameters'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      sampleRate: 'test',
      channel: 'test',
      mode: 'test',
      samplesPerCall: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setEarMonitoringAudioFrameParameters',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setEarMonitoringAudioFrameParameters
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setEarMonitoringAudioFrameParameters
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('setPlaybackAudioFrameBeforeMixingParameters parameter', async () => {
    let nParam = {
      sampleRate: undefined,
      channel: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setPlaybackAudioFrameBeforeMixingParameters',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setPlaybackAudioFrameBeforeMixingParameters impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setPlaybackAudioFrameBeforeMixingParameters'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      sampleRate: 'test',
      channel: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setPlaybackAudioFrameBeforeMixingParameters',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setPlaybackAudioFrameBeforeMixingParameters
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setPlaybackAudioFrameBeforeMixingParameters
    ).toBeCalledWith('test', 'test');
  });
  test('enableAudioSpectrumMonitor parameter', async () => {
    let nParam = {
      intervalInMS: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableAudioSpectrumMonitor',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableAudioSpectrumMonitor impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableAudioSpectrumMonitor'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      intervalInMS: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableAudioSpectrumMonitor',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableAudioSpectrumMonitor
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableAudioSpectrumMonitor
    ).toBeCalledWith('test');
  });

  test('disableAudioSpectrumMonitor impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'disableAudioSpectrumMonitor'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_disableAudioSpectrumMonitor',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .disableAudioSpectrumMonitor
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .disableAudioSpectrumMonitor
    ).toBeCalledWith();
  });
  test('registerAudioSpectrumObserver parameter', async () => {
    let nParam = {
      observer: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_registerAudioSpectrumObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('registerAudioSpectrumObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'registerAudioSpectrumObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_registerAudioSpectrumObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .registerAudioSpectrumObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .registerAudioSpectrumObserver
    ).toBeCalledWith('test');
  });
  test('unregisterAudioSpectrumObserver parameter', async () => {
    let nParam = {
      observer: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_unregisterAudioSpectrumObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('unregisterAudioSpectrumObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'unregisterAudioSpectrumObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_unregisterAudioSpectrumObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .unregisterAudioSpectrumObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .unregisterAudioSpectrumObserver
    ).toBeCalledWith('test');
  });
  test('adjustRecordingSignalVolume parameter', async () => {
    let nParam = {
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_adjustRecordingSignalVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('adjustRecordingSignalVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'adjustRecordingSignalVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_adjustRecordingSignalVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustRecordingSignalVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustRecordingSignalVolume
    ).toBeCalledWith('test');
  });
  test('muteRecordingSignal parameter', async () => {
    let nParam = {
      mute: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_muteRecordingSignal',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('muteRecordingSignal impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'muteRecordingSignal'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_muteRecordingSignal',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.muteRecordingSignal
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.muteRecordingSignal
    ).toBeCalledWith('test');
  });
  test('adjustPlaybackSignalVolume parameter', async () => {
    let nParam = {
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_adjustPlaybackSignalVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('adjustPlaybackSignalVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'adjustPlaybackSignalVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_adjustPlaybackSignalVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustPlaybackSignalVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustPlaybackSignalVolume
    ).toBeCalledWith('test');
  });
  test('adjustUserPlaybackSignalVolume parameter', async () => {
    let nParam = {
      uid: undefined,
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_adjustUserPlaybackSignalVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('adjustUserPlaybackSignalVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'adjustUserPlaybackSignalVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      volume: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_adjustUserPlaybackSignalVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustUserPlaybackSignalVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustUserPlaybackSignalVolume
    ).toBeCalledWith('test', 'test');
  });
  test('setLocalPublishFallbackOption parameter', async () => {
    let nParam = {
      option: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setLocalPublishFallbackOption',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLocalPublishFallbackOption impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setLocalPublishFallbackOption'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      option: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setLocalPublishFallbackOption',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setLocalPublishFallbackOption
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setLocalPublishFallbackOption
    ).toBeCalledWith('test');
  });
  test('setRemoteSubscribeFallbackOption parameter', async () => {
    let nParam = {
      option: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setRemoteSubscribeFallbackOption',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRemoteSubscribeFallbackOption impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setRemoteSubscribeFallbackOption'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      option: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setRemoteSubscribeFallbackOption',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRemoteSubscribeFallbackOption
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRemoteSubscribeFallbackOption
    ).toBeCalledWith('test');
  });
  test('setHighPriorityUserList parameter', async () => {
    let nParam = {
      uidList: undefined,
      uidNum: undefined,
      option: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setHighPriorityUserList',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setHighPriorityUserList impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setHighPriorityUserList'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uidList: 'test',
      uidNum: 'test',
      option: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setHighPriorityUserList',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setHighPriorityUserList
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setHighPriorityUserList
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('enableLoopbackRecording parameter', async () => {
    let nParam = {
      enabled: undefined,
      deviceName: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableLoopbackRecording',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableLoopbackRecording impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableLoopbackRecording'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      deviceName: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableLoopbackRecording',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableLoopbackRecording
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableLoopbackRecording
    ).toBeCalledWith('test', 'test');
  });
  test('adjustLoopbackSignalVolume parameter', async () => {
    let nParam = {
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_adjustLoopbackSignalVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('adjustLoopbackSignalVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'adjustLoopbackSignalVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_adjustLoopbackSignalVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustLoopbackSignalVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustLoopbackSignalVolume
    ).toBeCalledWith('test');
  });

  test('getLoopbackRecordingVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getLoopbackRecordingVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_getLoopbackRecordingVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getLoopbackRecordingVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getLoopbackRecordingVolume
    ).toBeCalledWith();
  });
  test('enableInEarMonitoring parameter', async () => {
    let nParam = {
      enabled: undefined,
      includeAudioFilters: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableInEarMonitoring',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableInEarMonitoring impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableInEarMonitoring'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      includeAudioFilters: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableInEarMonitoring',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableInEarMonitoring
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableInEarMonitoring
    ).toBeCalledWith('test', 'test');
  });
  test('setInEarMonitoringVolume parameter', async () => {
    let nParam = {
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setInEarMonitoringVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setInEarMonitoringVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setInEarMonitoringVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setInEarMonitoringVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setInEarMonitoringVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setInEarMonitoringVolume
    ).toBeCalledWith('test');
  });
  test('loadExtensionProvider parameter', async () => {
    let nParam = {
      path: undefined,
      unload_after_use: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_loadExtensionProvider',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('loadExtensionProvider impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'loadExtensionProvider'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      path: 'test',
      unload_after_use: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_loadExtensionProvider',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .loadExtensionProvider
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .loadExtensionProvider
    ).toBeCalledWith('test', 'test');
  });
  test('setExtensionProviderProperty parameter', async () => {
    let nParam = {
      provider: undefined,
      key: undefined,
      value: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setExtensionProviderProperty',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setExtensionProviderProperty impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setExtensionProviderProperty'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      provider: 'test',
      key: 'test',
      value: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setExtensionProviderProperty',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setExtensionProviderProperty
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setExtensionProviderProperty
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('registerExtension parameter', async () => {
    let nParam = {
      provider: undefined,
      extension: undefined,
      type: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_registerExtension',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('registerExtension impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'registerExtension'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      provider: 'test',
      extension: 'test',
      type: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_registerExtension',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.registerExtension
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.registerExtension
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('enableExtension parameter', async () => {
    let nParam = {
      provider: undefined,
      extension: undefined,
      enable: undefined,
      type: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableExtension',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableExtension impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableExtension'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      provider: 'test',
      extension: 'test',
      enable: 'test',
      type: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableExtension',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableExtension
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableExtension
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('enableExtension2 parameter', async () => {
    let nParam = {
      provider: undefined,
      extension: undefined,
      extensionInfo: undefined,
      enable: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableExtension2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableExtension2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableExtension2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      provider: 'test',
      extension: 'test',
      extensionInfo: 'test',
      enable: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableExtension2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableExtension2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableExtension2
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('setExtensionProperty parameter', async () => {
    let nParam = {
      provider: undefined,
      extension: undefined,
      key: undefined,
      value: undefined,
      type: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setExtensionProperty',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setExtensionProperty impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setExtensionProperty'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      provider: 'test',
      extension: 'test',
      key: 'test',
      value: 'test',
      type: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setExtensionProperty',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setExtensionProperty
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setExtensionProperty
    ).toBeCalledWith('test', 'test', 'test', 'test', 'test');
  });
  test('getExtensionProperty parameter', async () => {
    let nParam = {
      provider: undefined,
      extension: undefined,
      key: undefined,
      value: undefined,
      buf_len: undefined,
      type: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_getExtensionProperty',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getExtensionProperty impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getExtensionProperty'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      provider: 'test',
      extension: 'test',
      key: 'test',
      value: 'test',
      buf_len: 'test',
      type: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_getExtensionProperty',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getExtensionProperty
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getExtensionProperty
    ).toBeCalledWith('test', 'test', 'test', 'test', 'test', 'test');
  });
  test('setExtensionProperty2 parameter', async () => {
    let nParam = {
      provider: undefined,
      extension: undefined,
      extensionInfo: undefined,
      key: undefined,
      value: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setExtensionProperty2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setExtensionProperty2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setExtensionProperty2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      provider: 'test',
      extension: 'test',
      extensionInfo: 'test',
      key: 'test',
      value: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setExtensionProperty2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setExtensionProperty2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setExtensionProperty2
    ).toBeCalledWith('test', 'test', 'test', 'test', 'test');
  });
  test('getExtensionProperty2 parameter', async () => {
    let nParam = {
      provider: undefined,
      extension: undefined,
      extensionInfo: undefined,
      key: undefined,
      value: undefined,
      buf_len: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_getExtensionProperty2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getExtensionProperty2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getExtensionProperty2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      provider: 'test',
      extension: 'test',
      extensionInfo: 'test',
      key: 'test',
      value: 'test',
      buf_len: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_getExtensionProperty2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getExtensionProperty2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getExtensionProperty2
    ).toBeCalledWith('test', 'test', 'test', 'test', 'test', 'test');
  });
  test('setCameraCapturerConfiguration parameter', async () => {
    let nParam = {
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setCameraCapturerConfiguration',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setCameraCapturerConfiguration impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setCameraCapturerConfiguration'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setCameraCapturerConfiguration',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setCameraCapturerConfiguration
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setCameraCapturerConfiguration
    ).toBeCalledWith('test');
  });

  test('createCustomVideoTrack impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'createCustomVideoTrack'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_createCustomVideoTrack',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .createCustomVideoTrack
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .createCustomVideoTrack
    ).toBeCalledWith();
  });
  test('createCustomEncodedVideoTrack parameter', async () => {
    let nParam = {
      sender_option: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_createCustomEncodedVideoTrack',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('createCustomEncodedVideoTrack impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'createCustomEncodedVideoTrack'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      sender_option: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_createCustomEncodedVideoTrack',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .createCustomEncodedVideoTrack
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .createCustomEncodedVideoTrack
    ).toBeCalledWith('test');
  });
  test('destroyCustomVideoTrack parameter', async () => {
    let nParam = {
      video_track_id: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_destroyCustomVideoTrack',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('destroyCustomVideoTrack impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'destroyCustomVideoTrack'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      video_track_id: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_destroyCustomVideoTrack',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .destroyCustomVideoTrack
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .destroyCustomVideoTrack
    ).toBeCalledWith('test');
  });
  test('destroyCustomEncodedVideoTrack parameter', async () => {
    let nParam = {
      video_track_id: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_destroyCustomEncodedVideoTrack',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('destroyCustomEncodedVideoTrack impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'destroyCustomEncodedVideoTrack'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      video_track_id: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_destroyCustomEncodedVideoTrack',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .destroyCustomEncodedVideoTrack
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .destroyCustomEncodedVideoTrack
    ).toBeCalledWith('test');
  });

  test('switchCamera impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'switchCamera'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_switchCamera',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.switchCamera
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.switchCamera
    ).toBeCalledWith();
  });

  test('isCameraZoomSupported impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'isCameraZoomSupported'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_isCameraZoomSupported',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraZoomSupported
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraZoomSupported
    ).toBeCalledWith();
  });

  test('isCameraFaceDetectSupported impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'isCameraFaceDetectSupported'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_isCameraFaceDetectSupported',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraFaceDetectSupported
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraFaceDetectSupported
    ).toBeCalledWith();
  });

  test('isCameraTorchSupported impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'isCameraTorchSupported'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_isCameraTorchSupported',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraTorchSupported
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraTorchSupported
    ).toBeCalledWith();
  });

  test('isCameraFocusSupported impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'isCameraFocusSupported'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_isCameraFocusSupported',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraFocusSupported
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraFocusSupported
    ).toBeCalledWith();
  });

  test('isCameraAutoFocusFaceModeSupported impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'isCameraAutoFocusFaceModeSupported'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_isCameraAutoFocusFaceModeSupported',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraAutoFocusFaceModeSupported
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraAutoFocusFaceModeSupported
    ).toBeCalledWith();
  });
  test('setCameraZoomFactor parameter', async () => {
    let nParam = {
      factor: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setCameraZoomFactor',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setCameraZoomFactor impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setCameraZoomFactor'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      factor: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setCameraZoomFactor',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setCameraZoomFactor
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setCameraZoomFactor
    ).toBeCalledWith('test');
  });
  test('enableFaceDetection parameter', async () => {
    let nParam = {
      enabled: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableFaceDetection',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableFaceDetection impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableFaceDetection'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableFaceDetection',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableFaceDetection
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableFaceDetection
    ).toBeCalledWith('test');
  });

  test('getCameraMaxZoomFactor impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getCameraMaxZoomFactor'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_getCameraMaxZoomFactor',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getCameraMaxZoomFactor
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getCameraMaxZoomFactor
    ).toBeCalledWith();
  });
  test('setCameraFocusPositionInPreview parameter', async () => {
    let nParam = {
      positionX: undefined,
      positionY: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setCameraFocusPositionInPreview',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setCameraFocusPositionInPreview impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setCameraFocusPositionInPreview'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      positionX: 'test',
      positionY: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setCameraFocusPositionInPreview',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setCameraFocusPositionInPreview
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setCameraFocusPositionInPreview
    ).toBeCalledWith('test', 'test');
  });
  test('setCameraTorchOn parameter', async () => {
    let nParam = {
      isOn: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setCameraTorchOn',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setCameraTorchOn impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setCameraTorchOn'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      isOn: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setCameraTorchOn',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setCameraTorchOn
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setCameraTorchOn
    ).toBeCalledWith('test');
  });
  test('setCameraAutoFocusFaceModeEnabled parameter', async () => {
    let nParam = {
      enabled: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setCameraAutoFocusFaceModeEnabled',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setCameraAutoFocusFaceModeEnabled impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setCameraAutoFocusFaceModeEnabled'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setCameraAutoFocusFaceModeEnabled',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setCameraAutoFocusFaceModeEnabled
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setCameraAutoFocusFaceModeEnabled
    ).toBeCalledWith('test');
  });

  test('isCameraExposurePositionSupported impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'isCameraExposurePositionSupported'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_isCameraExposurePositionSupported',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraExposurePositionSupported
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraExposurePositionSupported
    ).toBeCalledWith();
  });
  test('setCameraExposurePosition parameter', async () => {
    let nParam = {
      positionXinView: undefined,
      positionYinView: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setCameraExposurePosition',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setCameraExposurePosition impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setCameraExposurePosition'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      positionXinView: 'test',
      positionYinView: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setCameraExposurePosition',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setCameraExposurePosition
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setCameraExposurePosition
    ).toBeCalledWith('test', 'test');
  });

  test('isCameraExposureSupported impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'isCameraExposureSupported'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_isCameraExposureSupported',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraExposureSupported
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraExposureSupported
    ).toBeCalledWith();
  });
  test('setCameraExposureFactor parameter', async () => {
    let nParam = {
      factor: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setCameraExposureFactor',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setCameraExposureFactor impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setCameraExposureFactor'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      factor: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setCameraExposureFactor',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setCameraExposureFactor
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setCameraExposureFactor
    ).toBeCalledWith('test');
  });

  test('isCameraAutoExposureFaceModeSupported impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'isCameraAutoExposureFaceModeSupported'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_isCameraAutoExposureFaceModeSupported',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraAutoExposureFaceModeSupported
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isCameraAutoExposureFaceModeSupported
    ).toBeCalledWith();
  });
  test('setCameraAutoExposureFaceModeEnabled parameter', async () => {
    let nParam = {
      enabled: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setCameraAutoExposureFaceModeEnabled',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setCameraAutoExposureFaceModeEnabled impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setCameraAutoExposureFaceModeEnabled'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setCameraAutoExposureFaceModeEnabled',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setCameraAutoExposureFaceModeEnabled
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setCameraAutoExposureFaceModeEnabled
    ).toBeCalledWith('test');
  });
  test('setDefaultAudioRouteToSpeakerphone parameter', async () => {
    let nParam = {
      defaultToSpeaker: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setDefaultAudioRouteToSpeakerphone',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setDefaultAudioRouteToSpeakerphone impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setDefaultAudioRouteToSpeakerphone'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      defaultToSpeaker: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setDefaultAudioRouteToSpeakerphone',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setDefaultAudioRouteToSpeakerphone
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setDefaultAudioRouteToSpeakerphone
    ).toBeCalledWith('test');
  });
  test('setEnableSpeakerphone parameter', async () => {
    let nParam = {
      speakerOn: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setEnableSpeakerphone',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setEnableSpeakerphone impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setEnableSpeakerphone'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      speakerOn: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setEnableSpeakerphone',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setEnableSpeakerphone
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setEnableSpeakerphone
    ).toBeCalledWith('test');
  });

  test('isSpeakerphoneEnabled impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'isSpeakerphoneEnabled'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_isSpeakerphoneEnabled',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isSpeakerphoneEnabled
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isSpeakerphoneEnabled
    ).toBeCalledWith();
  });
  test('setRouteInCommunicationMode parameter', async () => {
    let nParam = {
      route: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setRouteInCommunicationMode',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRouteInCommunicationMode impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setRouteInCommunicationMode'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      route: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setRouteInCommunicationMode',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRouteInCommunicationMode
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRouteInCommunicationMode
    ).toBeCalledWith('test');
  });
  test('getScreenCaptureSources parameter', async () => {
    let nParam = {
      thumbSize: undefined,
      iconSize: undefined,
      includeScreen: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_getScreenCaptureSources',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getScreenCaptureSources impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getScreenCaptureSources'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      thumbSize: 'test',
      iconSize: 'test',
      includeScreen: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_getScreenCaptureSources',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getScreenCaptureSources
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getScreenCaptureSources
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setAudioSessionOperationRestriction parameter', async () => {
    let nParam = {
      restriction: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setAudioSessionOperationRestriction',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setAudioSessionOperationRestriction impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setAudioSessionOperationRestriction'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      restriction: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setAudioSessionOperationRestriction',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setAudioSessionOperationRestriction
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setAudioSessionOperationRestriction
    ).toBeCalledWith('test');
  });
  test('startScreenCaptureByDisplayId parameter', async () => {
    let nParam = {
      displayId: undefined,
      regionRect: undefined,
      captureParams: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startScreenCaptureByDisplayId',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startScreenCaptureByDisplayId impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startScreenCaptureByDisplayId'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      displayId: 'test',
      regionRect: 'test',
      captureParams: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startScreenCaptureByDisplayId',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startScreenCaptureByDisplayId
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startScreenCaptureByDisplayId
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('startScreenCaptureByScreenRect parameter', async () => {
    let nParam = {
      screenRect: undefined,
      regionRect: undefined,
      captureParams: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startScreenCaptureByScreenRect',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startScreenCaptureByScreenRect impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startScreenCaptureByScreenRect'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      screenRect: 'test',
      regionRect: 'test',
      captureParams: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startScreenCaptureByScreenRect',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startScreenCaptureByScreenRect
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startScreenCaptureByScreenRect
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('getAudioDeviceInfo parameter', async () => {
    let nParam = {
      deviceInfo: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_getAudioDeviceInfo',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getAudioDeviceInfo impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getAudioDeviceInfo'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      deviceInfo: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_getAudioDeviceInfo',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getAudioDeviceInfo
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getAudioDeviceInfo
    ).toBeCalledWith('test');
  });
  test('startScreenCaptureByWindowId parameter', async () => {
    let nParam = {
      windowId: undefined,
      regionRect: undefined,
      captureParams: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startScreenCaptureByWindowId',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startScreenCaptureByWindowId impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startScreenCaptureByWindowId'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      windowId: 'test',
      regionRect: 'test',
      captureParams: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startScreenCaptureByWindowId',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startScreenCaptureByWindowId
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startScreenCaptureByWindowId
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setScreenCaptureContentHint parameter', async () => {
    let nParam = {
      contentHint: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setScreenCaptureContentHint',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setScreenCaptureContentHint impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setScreenCaptureContentHint'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      contentHint: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setScreenCaptureContentHint',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setScreenCaptureContentHint
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setScreenCaptureContentHint
    ).toBeCalledWith('test');
  });
  test('updateScreenCaptureRegion parameter', async () => {
    let nParam = {
      regionRect: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_updateScreenCaptureRegion',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('updateScreenCaptureRegion impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'updateScreenCaptureRegion'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      regionRect: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_updateScreenCaptureRegion',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updateScreenCaptureRegion
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updateScreenCaptureRegion
    ).toBeCalledWith('test');
  });
  test('updateScreenCaptureParameters parameter', async () => {
    let nParam = {
      captureParams: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_updateScreenCaptureParameters',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('updateScreenCaptureParameters impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'updateScreenCaptureParameters'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      captureParams: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_updateScreenCaptureParameters',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updateScreenCaptureParameters
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updateScreenCaptureParameters
    ).toBeCalledWith('test');
  });
  test('startScreenCapture parameter', async () => {
    let nParam = {
      captureParams: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startScreenCapture',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startScreenCapture impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startScreenCapture'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      captureParams: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startScreenCapture',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startScreenCapture
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startScreenCapture
    ).toBeCalledWith('test');
  });
  test('updateScreenCapture parameter', async () => {
    let nParam = {
      captureParams: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_updateScreenCapture',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('updateScreenCapture impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'updateScreenCapture'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      captureParams: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_updateScreenCapture',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.updateScreenCapture
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.updateScreenCapture
    ).toBeCalledWith('test');
  });

  test('queryScreenCaptureCapability impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'queryScreenCaptureCapability'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_queryScreenCaptureCapability',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .queryScreenCaptureCapability
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .queryScreenCaptureCapability
    ).toBeCalledWith();
  });
  test('setScreenCaptureScenario parameter', async () => {
    let nParam = {
      screenScenario: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setScreenCaptureScenario',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setScreenCaptureScenario impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setScreenCaptureScenario'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      screenScenario: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setScreenCaptureScenario',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setScreenCaptureScenario
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setScreenCaptureScenario
    ).toBeCalledWith('test');
  });

  test('stopScreenCapture impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopScreenCapture'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_stopScreenCapture',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopScreenCapture
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopScreenCapture
    ).toBeCalledWith();
  });
  test('getCallId parameter', async () => {
    let nParam = {
      callId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_getCallId',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getCallId impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getCallId'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      callId: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_getCallId',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getCallId
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getCallId
    ).toBeCalledWith('test');
  });
  test('rate parameter', async () => {
    let nParam = {
      callId: undefined,
      rating: undefined,
      description: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_rate',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('rate impl call', async () => {
    jest
      .spyOn(irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl, 'rate')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      callId: 'test',
      rating: 'test',
      description: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_rate',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.rate
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.rate
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('complain parameter', async () => {
    let nParam = {
      callId: undefined,
      description: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_complain',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('complain impl call', async () => {
    jest
      .spyOn(irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl, 'complain')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      callId: 'test',
      description: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_complain',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.complain
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.complain
    ).toBeCalledWith('test', 'test');
  });
  test('startRtmpStreamWithoutTranscoding parameter', async () => {
    let nParam = {
      url: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startRtmpStreamWithoutTranscoding',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startRtmpStreamWithoutTranscoding impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startRtmpStreamWithoutTranscoding'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      url: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startRtmpStreamWithoutTranscoding',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startRtmpStreamWithoutTranscoding
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startRtmpStreamWithoutTranscoding
    ).toBeCalledWith('test');
  });
  test('startRtmpStreamWithTranscoding parameter', async () => {
    let nParam = {
      url: undefined,
      transcoding: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startRtmpStreamWithTranscoding',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startRtmpStreamWithTranscoding impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startRtmpStreamWithTranscoding'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      url: 'test',
      transcoding: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startRtmpStreamWithTranscoding',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startRtmpStreamWithTranscoding
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startRtmpStreamWithTranscoding
    ).toBeCalledWith('test', 'test');
  });
  test('updateRtmpTranscoding parameter', async () => {
    let nParam = {
      transcoding: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_updateRtmpTranscoding',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('updateRtmpTranscoding impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'updateRtmpTranscoding'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      transcoding: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_updateRtmpTranscoding',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updateRtmpTranscoding
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updateRtmpTranscoding
    ).toBeCalledWith('test');
  });
  test('stopRtmpStream parameter', async () => {
    let nParam = {
      url: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_stopRtmpStream',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('stopRtmpStream impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopRtmpStream'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      url: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_stopRtmpStream',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopRtmpStream
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopRtmpStream
    ).toBeCalledWith('test');
  });
  test('startLocalVideoTranscoder parameter', async () => {
    let nParam = {
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startLocalVideoTranscoder',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startLocalVideoTranscoder impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startLocalVideoTranscoder'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startLocalVideoTranscoder',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startLocalVideoTranscoder
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startLocalVideoTranscoder
    ).toBeCalledWith('test');
  });
  test('updateLocalTranscoderConfiguration parameter', async () => {
    let nParam = {
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_updateLocalTranscoderConfiguration',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('updateLocalTranscoderConfiguration impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'updateLocalTranscoderConfiguration'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_updateLocalTranscoderConfiguration',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updateLocalTranscoderConfiguration
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updateLocalTranscoderConfiguration
    ).toBeCalledWith('test');
  });

  test('stopLocalVideoTranscoder impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopLocalVideoTranscoder'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_stopLocalVideoTranscoder',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .stopLocalVideoTranscoder
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .stopLocalVideoTranscoder
    ).toBeCalledWith();
  });
  test('startCameraCapture parameter', async () => {
    let nParam = {
      sourceType: undefined,
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startCameraCapture',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startCameraCapture impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startCameraCapture'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      sourceType: 'test',
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startCameraCapture',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startCameraCapture
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startCameraCapture
    ).toBeCalledWith('test', 'test');
  });
  test('stopCameraCapture parameter', async () => {
    let nParam = {
      sourceType: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_stopCameraCapture',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('stopCameraCapture impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopCameraCapture'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      sourceType: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_stopCameraCapture',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopCameraCapture
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopCameraCapture
    ).toBeCalledWith('test');
  });
  test('setCameraDeviceOrientation parameter', async () => {
    let nParam = {
      type: undefined,
      orientation: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setCameraDeviceOrientation',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setCameraDeviceOrientation impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setCameraDeviceOrientation'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      type: 'test',
      orientation: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setCameraDeviceOrientation',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setCameraDeviceOrientation
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setCameraDeviceOrientation
    ).toBeCalledWith('test', 'test');
  });
  test('setScreenCaptureOrientation parameter', async () => {
    let nParam = {
      type: undefined,
      orientation: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setScreenCaptureOrientation',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setScreenCaptureOrientation impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setScreenCaptureOrientation'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      type: 'test',
      orientation: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setScreenCaptureOrientation',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setScreenCaptureOrientation
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setScreenCaptureOrientation
    ).toBeCalledWith('test', 'test');
  });
  test('startScreenCapture2 parameter', async () => {
    let nParam = {
      sourceType: undefined,
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startScreenCapture2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startScreenCapture2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startScreenCapture2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      sourceType: 'test',
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startScreenCapture2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startScreenCapture2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startScreenCapture2
    ).toBeCalledWith('test', 'test');
  });
  test('stopScreenCapture2 parameter', async () => {
    let nParam = {
      sourceType: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_stopScreenCapture2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('stopScreenCapture2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopScreenCapture2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      sourceType: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_stopScreenCapture2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopScreenCapture2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopScreenCapture2
    ).toBeCalledWith('test');
  });

  test('getConnectionState impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getConnectionState'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_getConnectionState',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getConnectionState
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getConnectionState
    ).toBeCalledWith();
  });
  test('registerEventHandler parameter', async () => {
    let nParam = {
      eventHandler: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_registerEventHandler',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('registerEventHandler impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'registerEventHandler'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      eventHandler: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_registerEventHandler',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .registerEventHandler
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .registerEventHandler
    ).toBeCalledWith('test');
  });
  test('unregisterEventHandler parameter', async () => {
    let nParam = {
      eventHandler: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_unregisterEventHandler',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('unregisterEventHandler impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'unregisterEventHandler'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      eventHandler: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_unregisterEventHandler',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .unregisterEventHandler
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .unregisterEventHandler
    ).toBeCalledWith('test');
  });
  test('setRemoteUserPriority parameter', async () => {
    let nParam = {
      uid: undefined,
      userPriority: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setRemoteUserPriority',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRemoteUserPriority impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setRemoteUserPriority'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      userPriority: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setRemoteUserPriority',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRemoteUserPriority
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setRemoteUserPriority
    ).toBeCalledWith('test', 'test');
  });
  test('setEncryptionMode parameter', async () => {
    let nParam = {
      encryptionMode: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setEncryptionMode',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setEncryptionMode impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setEncryptionMode'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      encryptionMode: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setEncryptionMode',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setEncryptionMode
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setEncryptionMode
    ).toBeCalledWith('test');
  });
  test('setEncryptionSecret parameter', async () => {
    let nParam = {
      secret: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setEncryptionSecret',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setEncryptionSecret impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setEncryptionSecret'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      secret: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setEncryptionSecret',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setEncryptionSecret
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setEncryptionSecret
    ).toBeCalledWith('test');
  });
  test('enableEncryption parameter', async () => {
    let nParam = {
      enabled: undefined,
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableEncryption',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableEncryption impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableEncryption'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableEncryption',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableEncryption
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.enableEncryption
    ).toBeCalledWith('test', 'test');
  });
  test('createDataStream parameter', async () => {
    let nParam = {
      streamId: undefined,
      reliable: undefined,
      ordered: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_createDataStream',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('createDataStream impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'createDataStream'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      streamId: 'test',
      reliable: 'test',
      ordered: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_createDataStream',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.createDataStream
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.createDataStream
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('createDataStream2 parameter', async () => {
    let nParam = {
      streamId: undefined,
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_createDataStream2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('createDataStream2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'createDataStream2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      streamId: 'test',
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_createDataStream2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.createDataStream2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.createDataStream2
    ).toBeCalledWith('test', 'test');
  });
  test('sendStreamMessage parameter', async () => {
    let nParam = {
      streamId: undefined,
      data: undefined,
      length: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_sendStreamMessage',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('sendStreamMessage impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'sendStreamMessage'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      streamId: 'test',
      data: 'test',
      length: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_sendStreamMessage',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.sendStreamMessage
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.sendStreamMessage
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('addVideoWatermark parameter', async () => {
    let nParam = {
      watermark: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_addVideoWatermark',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('addVideoWatermark impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'addVideoWatermark'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      watermark: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_addVideoWatermark',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.addVideoWatermark
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.addVideoWatermark
    ).toBeCalledWith('test');
  });
  test('addVideoWatermark2 parameter', async () => {
    let nParam = {
      watermarkUrl: undefined,
      options: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_addVideoWatermark2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('addVideoWatermark2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'addVideoWatermark2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      watermarkUrl: 'test',
      options: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_addVideoWatermark2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.addVideoWatermark2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.addVideoWatermark2
    ).toBeCalledWith('test', 'test');
  });

  test('clearVideoWatermarks impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'clearVideoWatermarks'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_clearVideoWatermarks',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .clearVideoWatermarks
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .clearVideoWatermarks
    ).toBeCalledWith();
  });

  test('pauseAudio impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'pauseAudio'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_pauseAudio',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.pauseAudio
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.pauseAudio
    ).toBeCalledWith();
  });

  test('resumeAudio impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'resumeAudio'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_resumeAudio',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.resumeAudio
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.resumeAudio
    ).toBeCalledWith();
  });
  test('enableWebSdkInteroperability parameter', async () => {
    let nParam = {
      enabled: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableWebSdkInteroperability',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableWebSdkInteroperability impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableWebSdkInteroperability'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableWebSdkInteroperability',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableWebSdkInteroperability
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableWebSdkInteroperability
    ).toBeCalledWith('test');
  });
  test('sendCustomReportMessage parameter', async () => {
    let nParam = {
      id: undefined,
      category: undefined,
      event: undefined,
      label: undefined,
      value: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_sendCustomReportMessage',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('sendCustomReportMessage impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'sendCustomReportMessage'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      id: 'test',
      category: 'test',
      event: 'test',
      label: 'test',
      value: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_sendCustomReportMessage',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .sendCustomReportMessage
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .sendCustomReportMessage
    ).toBeCalledWith('test', 'test', 'test', 'test', 'test');
  });
  test('registerMediaMetadataObserver parameter', async () => {
    let nParam = {
      observer: undefined,
      type: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_registerMediaMetadataObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('registerMediaMetadataObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'registerMediaMetadataObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
      type: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_registerMediaMetadataObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .registerMediaMetadataObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .registerMediaMetadataObserver
    ).toBeCalledWith('test', 'test');
  });
  test('unregisterMediaMetadataObserver parameter', async () => {
    let nParam = {
      observer: undefined,
      type: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_unregisterMediaMetadataObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('unregisterMediaMetadataObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'unregisterMediaMetadataObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
      type: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_unregisterMediaMetadataObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .unregisterMediaMetadataObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .unregisterMediaMetadataObserver
    ).toBeCalledWith('test', 'test');
  });
  test('startAudioFrameDump parameter', async () => {
    let nParam = {
      channel_id: undefined,
      user_id: undefined,
      location: undefined,
      uuid: undefined,
      passwd: undefined,
      duration_ms: undefined,
      auto_upload: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startAudioFrameDump',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startAudioFrameDump impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startAudioFrameDump'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      channel_id: 'test',
      user_id: 'test',
      location: 'test',
      uuid: 'test',
      passwd: 'test',
      duration_ms: 'test',
      auto_upload: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startAudioFrameDump',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startAudioFrameDump
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startAudioFrameDump
    ).toBeCalledWith('test', 'test', 'test', 'test', 'test', 'test', 'test');
  });
  test('stopAudioFrameDump parameter', async () => {
    let nParam = {
      channel_id: undefined,
      user_id: undefined,
      location: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_stopAudioFrameDump',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('stopAudioFrameDump impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopAudioFrameDump'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      channel_id: 'test',
      user_id: 'test',
      location: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_stopAudioFrameDump',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopAudioFrameDump
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopAudioFrameDump
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setAINSMode parameter', async () => {
    let nParam = {
      enabled: undefined,
      mode: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setAINSMode',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setAINSMode impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setAINSMode'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      mode: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setAINSMode',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setAINSMode
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setAINSMode
    ).toBeCalledWith('test', 'test');
  });
  test('registerLocalUserAccount parameter', async () => {
    let nParam = {
      appId: undefined,
      userAccount: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_registerLocalUserAccount',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('registerLocalUserAccount impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'registerLocalUserAccount'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      appId: 'test',
      userAccount: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_registerLocalUserAccount',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .registerLocalUserAccount
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .registerLocalUserAccount
    ).toBeCalledWith('test', 'test');
  });
  test('joinChannelWithUserAccount parameter', async () => {
    let nParam = {
      token: undefined,
      channelId: undefined,
      userAccount: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_joinChannelWithUserAccount',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('joinChannelWithUserAccount impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'joinChannelWithUserAccount'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      token: 'test',
      channelId: 'test',
      userAccount: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_joinChannelWithUserAccount',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .joinChannelWithUserAccount
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .joinChannelWithUserAccount
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('joinChannelWithUserAccount2 parameter', async () => {
    let nParam = {
      token: undefined,
      channelId: undefined,
      userAccount: undefined,
      options: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_joinChannelWithUserAccount2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('joinChannelWithUserAccount2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'joinChannelWithUserAccount2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      token: 'test',
      channelId: 'test',
      userAccount: 'test',
      options: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_joinChannelWithUserAccount2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .joinChannelWithUserAccount2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .joinChannelWithUserAccount2
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('joinChannelWithUserAccountEx parameter', async () => {
    let nParam = {
      token: undefined,
      channelId: undefined,
      userAccount: undefined,
      options: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_joinChannelWithUserAccountEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('joinChannelWithUserAccountEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'joinChannelWithUserAccountEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      token: 'test',
      channelId: 'test',
      userAccount: 'test',
      options: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_joinChannelWithUserAccountEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .joinChannelWithUserAccountEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .joinChannelWithUserAccountEx
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('getUserInfoByUserAccount parameter', async () => {
    let nParam = {
      userAccount: undefined,
      userInfo: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_getUserInfoByUserAccount',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getUserInfoByUserAccount impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getUserInfoByUserAccount'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      userAccount: 'test',
      userInfo: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_getUserInfoByUserAccount',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getUserInfoByUserAccount
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getUserInfoByUserAccount
    ).toBeCalledWith('test', 'test');
  });
  test('getUserInfoByUid parameter', async () => {
    let nParam = {
      uid: undefined,
      userInfo: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_getUserInfoByUid',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getUserInfoByUid impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getUserInfoByUid'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      userInfo: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_getUserInfoByUid',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getUserInfoByUid
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getUserInfoByUid
    ).toBeCalledWith('test', 'test');
  });
  test('startOrUpdateChannelMediaRelay parameter', async () => {
    let nParam = {
      configuration: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startOrUpdateChannelMediaRelay',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startOrUpdateChannelMediaRelay impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startOrUpdateChannelMediaRelay'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      configuration: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startOrUpdateChannelMediaRelay',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startOrUpdateChannelMediaRelay
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startOrUpdateChannelMediaRelay
    ).toBeCalledWith('test');
  });
  test('startChannelMediaRelay parameter', async () => {
    let nParam = {
      configuration: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startChannelMediaRelay',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startChannelMediaRelay impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startChannelMediaRelay'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      configuration: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startChannelMediaRelay',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startChannelMediaRelay
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startChannelMediaRelay
    ).toBeCalledWith('test');
  });
  test('updateChannelMediaRelay parameter', async () => {
    let nParam = {
      configuration: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_updateChannelMediaRelay',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('updateChannelMediaRelay impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'updateChannelMediaRelay'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      configuration: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_updateChannelMediaRelay',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updateChannelMediaRelay
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updateChannelMediaRelay
    ).toBeCalledWith('test');
  });

  test('stopChannelMediaRelay impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopChannelMediaRelay'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_stopChannelMediaRelay',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .stopChannelMediaRelay
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .stopChannelMediaRelay
    ).toBeCalledWith();
  });

  test('pauseAllChannelMediaRelay impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'pauseAllChannelMediaRelay'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_pauseAllChannelMediaRelay',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .pauseAllChannelMediaRelay
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .pauseAllChannelMediaRelay
    ).toBeCalledWith();
  });

  test('resumeAllChannelMediaRelay impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'resumeAllChannelMediaRelay'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_resumeAllChannelMediaRelay',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .resumeAllChannelMediaRelay
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .resumeAllChannelMediaRelay
    ).toBeCalledWith();
  });
  test('setDirectCdnStreamingAudioConfiguration parameter', async () => {
    let nParam = {
      profile: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setDirectCdnStreamingAudioConfiguration',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setDirectCdnStreamingAudioConfiguration impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setDirectCdnStreamingAudioConfiguration'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      profile: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setDirectCdnStreamingAudioConfiguration',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setDirectCdnStreamingAudioConfiguration
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setDirectCdnStreamingAudioConfiguration
    ).toBeCalledWith('test');
  });
  test('setDirectCdnStreamingVideoConfiguration parameter', async () => {
    let nParam = {
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setDirectCdnStreamingVideoConfiguration',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setDirectCdnStreamingVideoConfiguration impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setDirectCdnStreamingVideoConfiguration'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setDirectCdnStreamingVideoConfiguration',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setDirectCdnStreamingVideoConfiguration
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setDirectCdnStreamingVideoConfiguration
    ).toBeCalledWith('test');
  });
  test('startDirectCdnStreaming parameter', async () => {
    let nParam = {
      eventHandler: undefined,
      publishUrl: undefined,
      options: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startDirectCdnStreaming',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startDirectCdnStreaming impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startDirectCdnStreaming'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      eventHandler: 'test',
      publishUrl: 'test',
      options: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startDirectCdnStreaming',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startDirectCdnStreaming
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startDirectCdnStreaming
    ).toBeCalledWith('test', 'test', 'test');
  });

  test('stopDirectCdnStreaming impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopDirectCdnStreaming'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_stopDirectCdnStreaming',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .stopDirectCdnStreaming
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .stopDirectCdnStreaming
    ).toBeCalledWith();
  });
  test('updateDirectCdnStreamingMediaOptions parameter', async () => {
    let nParam = {
      options: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_updateDirectCdnStreamingMediaOptions',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('updateDirectCdnStreamingMediaOptions impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'updateDirectCdnStreamingMediaOptions'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      options: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_updateDirectCdnStreamingMediaOptions',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updateDirectCdnStreamingMediaOptions
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .updateDirectCdnStreamingMediaOptions
    ).toBeCalledWith('test');
  });
  test('startRhythmPlayer parameter', async () => {
    let nParam = {
      sound1: undefined,
      sound2: undefined,
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_startRhythmPlayer',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startRhythmPlayer impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startRhythmPlayer'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      sound1: 'test',
      sound2: 'test',
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_startRhythmPlayer',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startRhythmPlayer
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.startRhythmPlayer
    ).toBeCalledWith('test', 'test', 'test');
  });

  test('stopRhythmPlayer impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'stopRhythmPlayer'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_stopRhythmPlayer',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopRhythmPlayer
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.stopRhythmPlayer
    ).toBeCalledWith();
  });
  test('configRhythmPlayer parameter', async () => {
    let nParam = {
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_configRhythmPlayer',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('configRhythmPlayer impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'configRhythmPlayer'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_configRhythmPlayer',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.configRhythmPlayer
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.configRhythmPlayer
    ).toBeCalledWith('test');
  });
  test('takeSnapshot parameter', async () => {
    let nParam = {
      uid: undefined,
      filePath: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_takeSnapshot',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('takeSnapshot impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'takeSnapshot'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      filePath: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_takeSnapshot',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.takeSnapshot
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.takeSnapshot
    ).toBeCalledWith('test', 'test');
  });
  test('enableContentInspect parameter', async () => {
    let nParam = {
      enabled: undefined,
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableContentInspect',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableContentInspect impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableContentInspect'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableContentInspect',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableContentInspect
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableContentInspect
    ).toBeCalledWith('test', 'test');
  });
  test('adjustCustomAudioPublishVolume parameter', async () => {
    let nParam = {
      trackId: undefined,
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_adjustCustomAudioPublishVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('adjustCustomAudioPublishVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'adjustCustomAudioPublishVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      trackId: 'test',
      volume: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_adjustCustomAudioPublishVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustCustomAudioPublishVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustCustomAudioPublishVolume
    ).toBeCalledWith('test', 'test');
  });
  test('adjustCustomAudioPlayoutVolume parameter', async () => {
    let nParam = {
      trackId: undefined,
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_adjustCustomAudioPlayoutVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('adjustCustomAudioPlayoutVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'adjustCustomAudioPlayoutVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      trackId: 'test',
      volume: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_adjustCustomAudioPlayoutVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustCustomAudioPlayoutVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .adjustCustomAudioPlayoutVolume
    ).toBeCalledWith('test', 'test');
  });
  test('setCloudProxy parameter', async () => {
    let nParam = {
      proxyType: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setCloudProxy',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setCloudProxy impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setCloudProxy'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      proxyType: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setCloudProxy',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setCloudProxy
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setCloudProxy
    ).toBeCalledWith('test');
  });
  test('setLocalAccessPoint parameter', async () => {
    let nParam = {
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setLocalAccessPoint',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLocalAccessPoint impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setLocalAccessPoint'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setLocalAccessPoint',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLocalAccessPoint
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setLocalAccessPoint
    ).toBeCalledWith('test');
  });
  test('setAdvancedAudioOptions parameter', async () => {
    let nParam = {
      options: undefined,
      sourceType: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setAdvancedAudioOptions',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setAdvancedAudioOptions impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setAdvancedAudioOptions'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      options: 'test',
      sourceType: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setAdvancedAudioOptions',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setAdvancedAudioOptions
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .setAdvancedAudioOptions
    ).toBeCalledWith('test', 'test');
  });
  test('setAVSyncSource parameter', async () => {
    let nParam = {
      channelId: undefined,
      uid: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setAVSyncSource',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setAVSyncSource impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setAVSyncSource'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      channelId: 'test',
      uid: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setAVSyncSource',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setAVSyncSource
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setAVSyncSource
    ).toBeCalledWith('test', 'test');
  });
  test('enableVideoImageSource parameter', async () => {
    let nParam = {
      enable: undefined,
      options: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableVideoImageSource',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableVideoImageSource impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableVideoImageSource'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enable: 'test',
      options: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableVideoImageSource',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableVideoImageSource
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableVideoImageSource
    ).toBeCalledWith('test', 'test');
  });

  test('getCurrentMonotonicTimeInMs impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getCurrentMonotonicTimeInMs'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_getCurrentMonotonicTimeInMs',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getCurrentMonotonicTimeInMs
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .getCurrentMonotonicTimeInMs
    ).toBeCalledWith();
  });
  test('enableWirelessAccelerate parameter', async () => {
    let nParam = {
      enabled: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_enableWirelessAccelerate',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableWirelessAccelerate impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableWirelessAccelerate'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_enableWirelessAccelerate',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableWirelessAccelerate
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableWirelessAccelerate
    ).toBeCalledWith('test');
  });

  test('getNetworkType impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getNetworkType'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_getNetworkType',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getNetworkType
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getNetworkType
    ).toBeCalledWith();
  });
  test('setParameters parameter', async () => {
    let nParam = {
      parameters: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_setParameters',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setParameters impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'setParameters'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      parameters: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_setParameters',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setParameters
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.setParameters
    ).toBeCalledWith('test');
  });

  test('startMediaRenderingTracing impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'startMediaRenderingTracing'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_startMediaRenderingTracing',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startMediaRenderingTracing
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .startMediaRenderingTracing
    ).toBeCalledWith();
  });

  test('enableInstantMediaRendering impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'enableInstantMediaRendering'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_enableInstantMediaRendering',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableInstantMediaRendering
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .enableInstantMediaRendering
    ).toBeCalledWith();
  });

  test('getNtpWallTimeInMs impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'getNtpWallTimeInMs'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'RtcEngine_getNtpWallTimeInMs',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getNtpWallTimeInMs
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl.getNtpWallTimeInMs
    ).toBeCalledWith();
  });
  test('isFeatureAvailableOnDevice parameter', async () => {
    let nParam = {
      type: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngine_isFeatureAvailableOnDevice',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('isFeatureAvailableOnDevice impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl,
        'isFeatureAvailableOnDevice'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      type: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngine_isFeatureAvailableOnDevice',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isFeatureAvailableOnDevice
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngine')._impl
        .isFeatureAvailableOnDevice
    ).toBeCalledWith('test');
  });
});
