/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  CallIrisApiResult,
  EventParam,
  IrisApiEngine,
  IrisCore,
} from 'iris-web-core';

import { initIrisRtc } from '../../src/index';
import { IrisRtcEngine } from '../engine/IrisRtcEngine';

const bindingAPI = require('../../src/binding/IAudioDeviceManagerDispatch');

let apiEnginePtr: IrisApiEngine;
let irisRtcEngine: IrisRtcEngine;
beforeAll(async () => {
  apiEnginePtr = IrisCore.createIrisApiEngine();
  initIrisRtc(apiEnginePtr);
  irisRtcEngine = apiEnginePtr['apiInterceptors'][0];
  irisRtcEngine.implHelper.createAudioTrack = jest.fn();
  let nParam = {
    context: 'test',
  };
  let apiParam = new EventParam(
    'RtcEngine_initialize',
    JSON.stringify(nParam),
    0,
    '',
    ['test'],
    [],
    1
  );
  await IrisCore.callIrisApi(apiEnginePtr, apiParam);
});

afterAll(() => {
  IrisCore.disposeIrisApiEngine(apiEnginePtr);
});

afterEach(() => {
  jest.clearAllMocks();
});

describe('IAudioDeviceManager', () => {
  test('enumeratePlaybackDevices impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'enumeratePlaybackDevices'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'AudioDeviceManager_enumeratePlaybackDevices',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .enumeratePlaybackDevices
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .enumeratePlaybackDevices
    ).toBeCalledWith();
  });

  test('enumerateRecordingDevices impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'enumerateRecordingDevices'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'AudioDeviceManager_enumerateRecordingDevices',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .enumerateRecordingDevices
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .enumerateRecordingDevices
    ).toBeCalledWith();
  });
  test('setPlaybackDevice parameter', async () => {
    let nParam = {
      deviceId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_setPlaybackDevice',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setPlaybackDevice impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'setPlaybackDevice'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      deviceId: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_setPlaybackDevice',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .setPlaybackDevice
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .setPlaybackDevice
    ).toBeCalledWith('test');
  });

  test('getPlaybackDevice impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'getPlaybackDevice'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'AudioDeviceManager_getPlaybackDevice',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getPlaybackDevice
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getPlaybackDevice
    ).toBeCalledWith();
  });

  test('getPlaybackDeviceInfo impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'getPlaybackDeviceInfo'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'AudioDeviceManager_getPlaybackDeviceInfo',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getPlaybackDeviceInfo
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getPlaybackDeviceInfo
    ).toBeCalledWith();
  });
  test('setPlaybackDeviceVolume parameter', async () => {
    let nParam = {
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_setPlaybackDeviceVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setPlaybackDeviceVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'setPlaybackDeviceVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_setPlaybackDeviceVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .setPlaybackDeviceVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .setPlaybackDeviceVolume
    ).toBeCalledWith('test');
  });

  test('getPlaybackDeviceVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'getPlaybackDeviceVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'AudioDeviceManager_getPlaybackDeviceVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getPlaybackDeviceVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getPlaybackDeviceVolume
    ).toBeCalledWith();
  });
  test('setRecordingDevice parameter', async () => {
    let nParam = {
      deviceId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_setRecordingDevice',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRecordingDevice impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'setRecordingDevice'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      deviceId: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_setRecordingDevice',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .setRecordingDevice
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .setRecordingDevice
    ).toBeCalledWith('test');
  });
  test('getRecordingDevice parameter', async () => {
    let nParam = {
      deviceId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_getRecordingDevice',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getRecordingDevice impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'getRecordingDevice'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      deviceId: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_getRecordingDevice',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getRecordingDevice
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getRecordingDevice
    ).toBeCalledWith('test');
  });

  test('getRecordingDeviceInfo impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'getRecordingDeviceInfo'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'AudioDeviceManager_getRecordingDeviceInfo',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getRecordingDeviceInfo
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getRecordingDeviceInfo
    ).toBeCalledWith();
  });
  test('setRecordingDeviceVolume parameter', async () => {
    let nParam = {
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_setRecordingDeviceVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRecordingDeviceVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'setRecordingDeviceVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_setRecordingDeviceVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .setRecordingDeviceVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .setRecordingDeviceVolume
    ).toBeCalledWith('test');
  });
  test('getRecordingDeviceVolume parameter', async () => {
    let nParam = {
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_getRecordingDeviceVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getRecordingDeviceVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'getRecordingDeviceVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_getRecordingDeviceVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getRecordingDeviceVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getRecordingDeviceVolume
    ).toBeCalledWith('test');
  });
  test('setLoopbackDevice parameter', async () => {
    let nParam = {
      deviceId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_setLoopbackDevice',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLoopbackDevice impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'setLoopbackDevice'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      deviceId: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_setLoopbackDevice',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .setLoopbackDevice
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .setLoopbackDevice
    ).toBeCalledWith('test');
  });
  test('getLoopbackDevice parameter', async () => {
    let nParam = {
      deviceId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_getLoopbackDevice',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getLoopbackDevice impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'getLoopbackDevice'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      deviceId: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_getLoopbackDevice',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getLoopbackDevice
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getLoopbackDevice
    ).toBeCalledWith('test');
  });
  test('setPlaybackDeviceMute parameter', async () => {
    let nParam = {
      mute: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_setPlaybackDeviceMute',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setPlaybackDeviceMute impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'setPlaybackDeviceMute'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_setPlaybackDeviceMute',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .setPlaybackDeviceMute
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .setPlaybackDeviceMute
    ).toBeCalledWith('test');
  });
  test('getPlaybackDeviceMute parameter', async () => {
    let nParam = {
      mute: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_getPlaybackDeviceMute',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getPlaybackDeviceMute impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'getPlaybackDeviceMute'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_getPlaybackDeviceMute',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getPlaybackDeviceMute
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getPlaybackDeviceMute
    ).toBeCalledWith('test');
  });
  test('setRecordingDeviceMute parameter', async () => {
    let nParam = {
      mute: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_setRecordingDeviceMute',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRecordingDeviceMute impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'setRecordingDeviceMute'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_setRecordingDeviceMute',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .setRecordingDeviceMute
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .setRecordingDeviceMute
    ).toBeCalledWith('test');
  });
  test('getRecordingDeviceMute parameter', async () => {
    let nParam = {
      mute: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_getRecordingDeviceMute',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getRecordingDeviceMute impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'getRecordingDeviceMute'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_getRecordingDeviceMute',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getRecordingDeviceMute
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .getRecordingDeviceMute
    ).toBeCalledWith('test');
  });
  test('startPlaybackDeviceTest parameter', async () => {
    let nParam = {
      testAudioFilePath: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_startPlaybackDeviceTest',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startPlaybackDeviceTest impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'startPlaybackDeviceTest'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      testAudioFilePath: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_startPlaybackDeviceTest',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .startPlaybackDeviceTest
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .startPlaybackDeviceTest
    ).toBeCalledWith('test');
  });

  test('stopPlaybackDeviceTest impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'stopPlaybackDeviceTest'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'AudioDeviceManager_stopPlaybackDeviceTest',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .stopPlaybackDeviceTest
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .stopPlaybackDeviceTest
    ).toBeCalledWith();
  });
  test('startRecordingDeviceTest parameter', async () => {
    let nParam = {
      indicationInterval: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_startRecordingDeviceTest',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startRecordingDeviceTest impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'startRecordingDeviceTest'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      indicationInterval: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_startRecordingDeviceTest',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .startRecordingDeviceTest
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .startRecordingDeviceTest
    ).toBeCalledWith('test');
  });

  test('stopRecordingDeviceTest impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'stopRecordingDeviceTest'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'AudioDeviceManager_stopRecordingDeviceTest',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .stopRecordingDeviceTest
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .stopRecordingDeviceTest
    ).toBeCalledWith();
  });
  test('startAudioDeviceLoopbackTest parameter', async () => {
    let nParam = {
      indicationInterval: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_startAudioDeviceLoopbackTest',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startAudioDeviceLoopbackTest impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'startAudioDeviceLoopbackTest'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      indicationInterval: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_startAudioDeviceLoopbackTest',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .startAudioDeviceLoopbackTest
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .startAudioDeviceLoopbackTest
    ).toBeCalledWith('test');
  });

  test('stopAudioDeviceLoopbackTest impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'stopAudioDeviceLoopbackTest'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'AudioDeviceManager_stopAudioDeviceLoopbackTest',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .stopAudioDeviceLoopbackTest
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .stopAudioDeviceLoopbackTest
    ).toBeCalledWith();
  });
  test('followSystemPlaybackDevice parameter', async () => {
    let nParam = {
      enable: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_followSystemPlaybackDevice',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('followSystemPlaybackDevice impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'followSystemPlaybackDevice'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enable: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_followSystemPlaybackDevice',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .followSystemPlaybackDevice
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .followSystemPlaybackDevice
    ).toBeCalledWith('test');
  });
  test('followSystemRecordingDevice parameter', async () => {
    let nParam = {
      enable: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_followSystemRecordingDevice',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('followSystemRecordingDevice impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'followSystemRecordingDevice'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enable: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_followSystemRecordingDevice',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .followSystemRecordingDevice
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .followSystemRecordingDevice
    ).toBeCalledWith('test');
  });
  test('followSystemLoopbackDevice parameter', async () => {
    let nParam = {
      enable: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'AudioDeviceManager_followSystemLoopbackDevice',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('followSystemLoopbackDevice impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'followSystemLoopbackDevice'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enable: 'test',
    };
    let apiParam = new EventParam(
      'AudioDeviceManager_followSystemLoopbackDevice',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .followSystemLoopbackDevice
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl
        .followSystemLoopbackDevice
    ).toBeCalledWith('test');
  });

  test('release impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl,
        'release'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'AudioDeviceManager_release',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl.release
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('AudioDeviceManager')._impl.release
    ).toBeCalledWith();
  });
});
