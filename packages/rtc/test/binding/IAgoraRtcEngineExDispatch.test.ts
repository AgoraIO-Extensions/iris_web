/// Generated by terra, DO NOT MODIFY BY HAND.

import { ApiParam, CallApiReturnType, EventParam } from 'iris-web-core';
import { AgoraConsole } from '../util/AgoraConsole';

export class IRtcEngineEventHandlerEx extends IRtcEngineEventHandler{
  classPrefix: string = "RtcEngineEventHandler_";

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
      super(engine);
      this._engine = engine;
  }

  eventKey(event: string): string {
      return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: EventParam): void {
      this._engine.irisEventHandlerManager.notifyEvent("RtcEngine", param);
  }

    onJoinChannelSuccessEx(connection:RtcConnection ,elapsed:number,): void {
      let _obj = {
        connection,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onJoinChannelSuccessEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onJoinChannelSuccessEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRejoinChannelSuccessEx(connection:RtcConnection ,elapsed:number,): void {
      let _obj = {
        connection,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRejoinChannelSuccessEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRejoinChannelSuccessEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onAudioQualityEx(connection:RtcConnection ,remoteUid:number,quality:number,delay:number,lost:number,): void {
      let _obj = {
        connection,remoteUid,quality,delay,lost,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onAudioQualityEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onAudioQualityEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onAudioVolumeIndicationEx(connection:RtcConnection ,speakers:AudioVolumeInfo [],speakerNumber:number,totalVolume:number,): void {
      let _obj = {
        connection,speakers,speakerNumber,totalVolume,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onAudioVolumeIndicationEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onAudioVolumeIndicationEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onLeaveChannelEx(connection:RtcConnection ,stats:RtcStats ,): void {
      let _obj = {
        connection,stats,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onLeaveChannelEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onLeaveChannelEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRtcStatsEx(connection:RtcConnection ,stats:RtcStats ,): void {
      let _obj = {
        connection,stats,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRtcStatsEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRtcStatsEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onNetworkQualityEx(connection:RtcConnection ,remoteUid:number,txQuality:number,rxQuality:number,): void {
      let _obj = {
        connection,remoteUid,txQuality,rxQuality,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onNetworkQualityEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onNetworkQualityEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onIntraRequestReceivedEx(connection:RtcConnection ,): void {
      let _obj = {
        connection,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onIntraRequestReceivedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onIntraRequestReceivedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onFirstRemoteVideoDecodedEx(connection:RtcConnection ,remoteUid:number,width:number,height:number,elapsed:number,): void {
      let _obj = {
        connection,remoteUid,width,height,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onFirstRemoteVideoDecodedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onFirstRemoteVideoDecodedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onVideoSizeChangedEx(connection:RtcConnection ,sourceType:VIDEO_SOURCE_TYPE,uid:number,width:number,height:number,rotation:number,): void {
      let _obj = {
        connection,sourceType,uid,width,height,rotation,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onVideoSizeChangedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onVideoSizeChangedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRemoteVideoStateChangedEx(connection:RtcConnection ,remoteUid:number,state:REMOTE_VIDEO_STATE,reason:REMOTE_VIDEO_STATE_REASON,elapsed:number,): void {
      let _obj = {
        connection,remoteUid,state,reason,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRemoteVideoStateChangedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRemoteVideoStateChangedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onFirstRemoteVideoFrameEx(connection:RtcConnection ,remoteUid:number,width:number,height:number,elapsed:number,): void {
      let _obj = {
        connection,remoteUid,width,height,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onFirstRemoteVideoFrameEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onFirstRemoteVideoFrameEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserJoinedEx(connection:RtcConnection ,remoteUid:number,elapsed:number,): void {
      let _obj = {
        connection,remoteUid,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserJoinedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserJoinedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserOfflineEx(connection:RtcConnection ,remoteUid:number,reason:USER_OFFLINE_REASON_TYPE,): void {
      let _obj = {
        connection,remoteUid,reason,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserOfflineEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserOfflineEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserMuteAudioEx(connection:RtcConnection ,remoteUid:number,muted:boolean,): void {
      let _obj = {
        connection,remoteUid,muted,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserMuteAudioEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserMuteAudioEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserMuteVideoEx(connection:RtcConnection ,remoteUid:number,muted:boolean,): void {
      let _obj = {
        connection,remoteUid,muted,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserMuteVideoEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserMuteVideoEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserEnableVideoEx(connection:RtcConnection ,remoteUid:number,enabled:boolean,): void {
      let _obj = {
        connection,remoteUid,enabled,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserEnableVideoEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserEnableVideoEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserEnableLocalVideoEx(connection:RtcConnection ,remoteUid:number,enabled:boolean,): void {
      let _obj = {
        connection,remoteUid,enabled,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserEnableLocalVideoEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserEnableLocalVideoEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserStateChangedEx(connection:RtcConnection ,remoteUid:number,state:number,): void {
      let _obj = {
        connection,remoteUid,state,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserStateChangedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserStateChangedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onLocalAudioStatsEx(connection:RtcConnection ,stats:LocalAudioStats ,): void {
      let _obj = {
        connection,stats,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onLocalAudioStatsEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onLocalAudioStatsEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRemoteAudioStatsEx(connection:RtcConnection ,stats:RemoteAudioStats ,): void {
      let _obj = {
        connection,stats,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRemoteAudioStatsEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRemoteAudioStatsEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRemoteVideoStatsEx(connection:RtcConnection ,stats:RemoteVideoStats ,): void {
      let _obj = {
        connection,stats,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRemoteVideoStatsEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRemoteVideoStatsEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onConnectionLostEx(connection:RtcConnection ,): void {
      let _obj = {
        connection,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onConnectionLostEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onConnectionLostEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onConnectionInterruptedEx(connection:RtcConnection ,): void {
      let _obj = {
        connection,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onConnectionInterruptedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onConnectionInterruptedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onConnectionBannedEx(connection:RtcConnection ,): void {
      let _obj = {
        connection,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onConnectionBannedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onConnectionBannedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onStreamMessageEx(connection:RtcConnection ,remoteUid:number,streamId:number,data:string,length:number,sentTs:number,): void {
      let _obj = {
        connection,remoteUid,streamId,data,length,sentTs,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onStreamMessageEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onStreamMessageEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onStreamMessageErrorEx(connection:RtcConnection ,remoteUid:number,streamId:number,code:number,missed:number,cached:number,): void {
      let _obj = {
        connection,remoteUid,streamId,code,missed,cached,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onStreamMessageErrorEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onStreamMessageErrorEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRequestTokenEx(connection:RtcConnection ,): void {
      let _obj = {
        connection,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRequestTokenEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRequestTokenEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onLicenseValidationFailureEx(connection:RtcConnection ,reason:LICENSE_ERROR_TYPE,): void {
      let _obj = {
        connection,reason,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onLicenseValidationFailureEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onLicenseValidationFailureEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onTokenPrivilegeWillExpireEx(connection:RtcConnection ,token:string,): void {
      let _obj = {
        connection,token,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onTokenPrivilegeWillExpireEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onTokenPrivilegeWillExpireEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onFirstLocalAudioFramePublishedEx(connection:RtcConnection ,elapsed:number,): void {
      let _obj = {
        connection,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onFirstLocalAudioFramePublishedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onFirstLocalAudioFramePublishedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onFirstRemoteAudioFrameEx(connection:RtcConnection ,userId:number,elapsed:number,): void {
      let _obj = {
        connection,userId,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onFirstRemoteAudioFrameEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onFirstRemoteAudioFrameEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onFirstRemoteAudioDecodedEx(connection:RtcConnection ,uid:number,elapsed:number,): void {
      let _obj = {
        connection,uid,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onFirstRemoteAudioDecodedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onFirstRemoteAudioDecodedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onLocalAudioStateChangedEx(connection:RtcConnection ,state:LOCAL_AUDIO_STREAM_STATE,error:LOCAL_AUDIO_STREAM_ERROR,): void {
      let _obj = {
        connection,state,error,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onLocalAudioStateChangedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onLocalAudioStateChangedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRemoteAudioStateChangedEx(connection:RtcConnection ,remoteUid:number,state:REMOTE_AUDIO_STATE,reason:REMOTE_AUDIO_STATE_REASON,elapsed:number,): void {
      let _obj = {
        connection,remoteUid,state,reason,elapsed,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRemoteAudioStateChangedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRemoteAudioStateChangedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onActiveSpeakerEx(connection:RtcConnection ,uid:number,): void {
      let _obj = {
        connection,uid,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onActiveSpeakerEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onActiveSpeakerEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onClientRoleChangedEx(connection:RtcConnection ,oldRole:CLIENT_ROLE_TYPE,newRole:CLIENT_ROLE_TYPE,newRoleOptions:ClientRoleOptions ,): void {
      let _obj = {
        connection,oldRole,newRole,newRoleOptions,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onClientRoleChangedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onClientRoleChangedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onClientRoleChangeFailedEx(connection:RtcConnection ,reason:CLIENT_ROLE_CHANGE_FAILED_REASON,currentRole:CLIENT_ROLE_TYPE,): void {
      let _obj = {
        connection,reason,currentRole,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onClientRoleChangeFailedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onClientRoleChangeFailedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRemoteAudioTransportStatsEx(connection:RtcConnection ,remoteUid:number,delay:number,lost:number,rxKBitRate:number,): void {
      let _obj = {
        connection,remoteUid,delay,lost,rxKBitRate,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRemoteAudioTransportStatsEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRemoteAudioTransportStatsEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onRemoteVideoTransportStatsEx(connection:RtcConnection ,remoteUid:number,delay:number,lost:number,rxKBitRate:number,): void {
      let _obj = {
        connection,remoteUid,delay,lost,rxKBitRate,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onRemoteVideoTransportStatsEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onRemoteVideoTransportStatsEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onConnectionStateChangedEx(connection:RtcConnection ,state:CONNECTION_STATE_TYPE,reason:CONNECTION_CHANGED_REASON_TYPE,): void {
      let _obj = {
        connection,state,reason,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onConnectionStateChangedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onConnectionStateChangedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onWlAccMessageEx(connection:RtcConnection ,reason:WLACC_MESSAGE_REASON,action:WLACC_SUGGEST_ACTION,wlAccMsg:string,): void {
      let _obj = {
        connection,reason,action,wlAccMsg,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onWlAccMessageEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onWlAccMessageEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onWlAccStatsEx(connection:RtcConnection ,currentStats:WlAccStats,averageStats:WlAccStats,): void {
      let _obj = {
        connection,currentStats,averageStats,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onWlAccStatsEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onWlAccStatsEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onNetworkTypeChangedEx(connection:RtcConnection ,type:NETWORK_TYPE,): void {
      let _obj = {
        connection,type,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onNetworkTypeChangedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onNetworkTypeChangedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onEncryptionErrorEx(connection:RtcConnection ,errorType:ENCRYPTION_ERROR_TYPE,): void {
      let _obj = {
        connection,errorType,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onEncryptionErrorEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onEncryptionErrorEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUploadLogResultEx(connection:RtcConnection ,requestId:string,success:boolean,reason:UPLOAD_ERROR_REASON,): void {
      let _obj = {
        connection,requestId,success,reason,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUploadLogResultEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUploadLogResultEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onUserAccountUpdatedEx(connection:RtcConnection ,remoteUid:number,userAccount:string,): void {
      let _obj = {
        connection,remoteUid,userAccount,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onUserAccountUpdatedEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onUserAccountUpdatedEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onSnapshotTakenEx(connection:RtcConnection ,uid:number,filePath:string,width:number,height:number,errCode:number,): void {
      let _obj = {
        connection,uid,filePath,width,height,errCode,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onSnapshotTakenEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onSnapshotTakenEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

    onVideoRenderingTracingResultEx(connection:RtcConnection ,uid:number,currentEvent:MEDIA_TRACE_EVENT,tracingInfo:VideoRenderingTracingInfo,): void {
      let _obj = {
        connection,uid,currentEvent,tracingInfo,
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('onVideoRenderingTracingResultEx');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`onVideoRenderingTracingResultEx eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

}

export class IRtcEngineExDispatch{
    _impl: IRtcEngineExImpl;
    
    constructor(engine: IrisRtcEngine) {
      this._impl = new IRtcEngineExImpl(engine);
    }
  joinChannelEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) throw "token is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";

    return this._impl.joinChannelEx(token,connection,options,);
  }

  leaveChannelEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.leaveChannelEx(connection,);
  }

  leaveChannelEx2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";

    return this._impl.leaveChannelEx2(connection,options,);
  }

  updateChannelMediaOptionsEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let options = obj.options;
    if (options === undefined) throw "options is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.updateChannelMediaOptionsEx(options,connection,);
  }

  setVideoEncoderConfigurationEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let config = obj.config;
    if (config === undefined) throw "config is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.setVideoEncoderConfigurationEx(config,connection,);
  }

  setupRemoteVideoEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let canvas = obj.canvas;
    if (canvas === undefined) throw "canvas is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.setupRemoteVideoEx(canvas,connection,);
  }

  muteRemoteAudioStreamEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.muteRemoteAudioStreamEx(uid,mute,connection,);
  }

  muteRemoteVideoStreamEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.muteRemoteVideoStreamEx(uid,mute,connection,);
  }

  setRemoteVideoStreamTypeEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let streamType = obj.streamType;
    if (streamType === undefined) throw "streamType is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.setRemoteVideoStreamTypeEx(uid,streamType,connection,);
  }

  muteLocalAudioStreamEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.muteLocalAudioStreamEx(mute,connection,);
  }

  muteLocalVideoStreamEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.muteLocalVideoStreamEx(mute,connection,);
  }

  muteAllRemoteAudioStreamsEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.muteAllRemoteAudioStreamsEx(mute,connection,);
  }

  muteAllRemoteVideoStreamsEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.muteAllRemoteVideoStreamsEx(mute,connection,);
  }

  setSubscribeAudioBlocklistEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uidList = obj.uidList;
    if (uidList === undefined) throw "uidList is undefined";
    let uidNumber = obj.uidNumber;
    if (uidNumber === undefined) throw "uidNumber is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.setSubscribeAudioBlocklistEx(uidList,uidNumber,connection,);
  }

  setSubscribeAudioAllowlistEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uidList = obj.uidList;
    if (uidList === undefined) throw "uidList is undefined";
    let uidNumber = obj.uidNumber;
    if (uidNumber === undefined) throw "uidNumber is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.setSubscribeAudioAllowlistEx(uidList,uidNumber,connection,);
  }

  setSubscribeVideoBlocklistEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uidList = obj.uidList;
    if (uidList === undefined) throw "uidList is undefined";
    let uidNumber = obj.uidNumber;
    if (uidNumber === undefined) throw "uidNumber is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.setSubscribeVideoBlocklistEx(uidList,uidNumber,connection,);
  }

  setSubscribeVideoAllowlistEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uidList = obj.uidList;
    if (uidList === undefined) throw "uidList is undefined";
    let uidNumber = obj.uidNumber;
    if (uidNumber === undefined) throw "uidNumber is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.setSubscribeVideoAllowlistEx(uidList,uidNumber,connection,);
  }

  setRemoteVideoSubscriptionOptionsEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.setRemoteVideoSubscriptionOptionsEx(uid,options,connection,);
  }

  setRemoteVoicePositionEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let pan = obj.pan;
    if (pan === undefined) throw "pan is undefined";
    let gain = obj.gain;
    if (gain === undefined) throw "gain is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.setRemoteVoicePositionEx(uid,pan,gain,connection,);
  }

  setRemoteUserSpatialAudioParamsEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let params = obj.params;
    if (params === undefined) throw "params is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.setRemoteUserSpatialAudioParamsEx(uid,params,connection,);
  }

  setRemoteRenderModeEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let renderMode = obj.renderMode;
    if (renderMode === undefined) throw "renderMode is undefined";
    let mirrorMode = obj.mirrorMode;
    if (mirrorMode === undefined) throw "mirrorMode is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.setRemoteRenderModeEx(uid,renderMode,mirrorMode,connection,);
  }

  enableLoopbackRecordingEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let deviceName = obj.deviceName;
    if (deviceName === undefined) throw "deviceName is undefined";

    return this._impl.enableLoopbackRecordingEx(connection,enabled,deviceName,);
  }

  adjustRecordingSignalVolumeEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.adjustRecordingSignalVolumeEx(volume,connection,);
  }

  muteRecordingSignalEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mute = obj.mute;
    if (mute === undefined) throw "mute is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.muteRecordingSignalEx(mute,connection,);
  }

  adjustUserPlaybackSignalVolumeEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.adjustUserPlaybackSignalVolumeEx(uid,volume,connection,);
  }

  getConnectionStateEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.getConnectionStateEx(connection,);
  }

  enableEncryptionEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let config = obj.config;
    if (config === undefined) throw "config is undefined";

    return this._impl.enableEncryptionEx(connection,enabled,config,);
  }

  createDataStreamEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let streamId = obj.streamId;
    if (streamId === undefined) throw "streamId is undefined";
    let reliable = obj.reliable;
    if (reliable === undefined) throw "reliable is undefined";
    let ordered = obj.ordered;
    if (ordered === undefined) throw "ordered is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.createDataStreamEx(streamId,reliable,ordered,connection,);
  }

  createDataStreamEx2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let streamId = obj.streamId;
    if (streamId === undefined) throw "streamId is undefined";
    let config = obj.config;
    if (config === undefined) throw "config is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.createDataStreamEx2(streamId,config,connection,);
  }

  sendStreamMessageEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let streamId = obj.streamId;
    if (streamId === undefined) throw "streamId is undefined";
    let data = obj.data;
    if (data === undefined) throw "data is undefined";
    let length = obj.length;
    if (length === undefined) throw "length is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.sendStreamMessageEx(streamId,data,length,connection,);
  }

  addVideoWatermarkEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let watermarkUrl = obj.watermarkUrl;
    if (watermarkUrl === undefined) throw "watermarkUrl is undefined";
    let options = obj.options;
    if (options === undefined) throw "options is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.addVideoWatermarkEx(watermarkUrl,options,connection,);
  }

  clearVideoWatermarkEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.clearVideoWatermarkEx(connection,);
  }

  sendCustomReportMessageEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let id = obj.id;
    if (id === undefined) throw "id is undefined";
    let category = obj.category;
    if (category === undefined) throw "category is undefined";
    let event = obj.event;
    if (event === undefined) throw "event is undefined";
    let label = obj.label;
    if (label === undefined) throw "label is undefined";
    let value = obj.value;
    if (value === undefined) throw "value is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.sendCustomReportMessageEx(id,category,event,label,value,connection,);
  }

  enableAudioVolumeIndicationEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let interval = obj.interval;
    if (interval === undefined) throw "interval is undefined";
    let smooth = obj.smooth;
    if (smooth === undefined) throw "smooth is undefined";
    let reportVad = obj.reportVad;
    if (reportVad === undefined) throw "reportVad is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.enableAudioVolumeIndicationEx(interval,smooth,reportVad,connection,);
  }

  startRtmpStreamWithoutTranscodingEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let url = obj.url;
    if (url === undefined) throw "url is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.startRtmpStreamWithoutTranscodingEx(url,connection,);
  }

  startRtmpStreamWithTranscodingEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let url = obj.url;
    if (url === undefined) throw "url is undefined";
    let transcoding = obj.transcoding;
    if (transcoding === undefined) throw "transcoding is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.startRtmpStreamWithTranscodingEx(url,transcoding,connection,);
  }

  updateRtmpTranscodingEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let transcoding = obj.transcoding;
    if (transcoding === undefined) throw "transcoding is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.updateRtmpTranscodingEx(transcoding,connection,);
  }

  stopRtmpStreamEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let url = obj.url;
    if (url === undefined) throw "url is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.stopRtmpStreamEx(url,connection,);
  }

  startOrUpdateChannelMediaRelayEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let configuration = obj.configuration;
    if (configuration === undefined) throw "configuration is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.startOrUpdateChannelMediaRelayEx(configuration,connection,);
  }

  startChannelMediaRelayEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let configuration = obj.configuration;
    if (configuration === undefined) throw "configuration is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.startChannelMediaRelayEx(configuration,connection,);
  }

  updateChannelMediaRelayEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let configuration = obj.configuration;
    if (configuration === undefined) throw "configuration is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.updateChannelMediaRelayEx(configuration,connection,);
  }

  stopChannelMediaRelayEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.stopChannelMediaRelayEx(connection,);
  }

  pauseAllChannelMediaRelayEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.pauseAllChannelMediaRelayEx(connection,);
  }

  resumeAllChannelMediaRelayEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.resumeAllChannelMediaRelayEx(connection,);
  }

  getUserInfoByUserAccountEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let userAccount = obj.userAccount;
    if (userAccount === undefined) throw "userAccount is undefined";
    let userInfo = obj.userInfo;
    if (userInfo === undefined) throw "userInfo is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.getUserInfoByUserAccountEx(userAccount,userInfo,connection,);
  }

  getUserInfoByUidEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let userInfo = obj.userInfo;
    if (userInfo === undefined) throw "userInfo is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.getUserInfoByUidEx(uid,userInfo,connection,);
  }

  enableDualStreamModeEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let streamConfig = obj.streamConfig;
    if (streamConfig === undefined) throw "streamConfig is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.enableDualStreamModeEx(enabled,streamConfig,connection,);
  }

  setDualStreamModeEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mode = obj.mode;
    if (mode === undefined) throw "mode is undefined";
    let streamConfig = obj.streamConfig;
    if (streamConfig === undefined) throw "streamConfig is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.setDualStreamModeEx(mode,streamConfig,connection,);
  }

  setHighPriorityUserListEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uidList = obj.uidList;
    if (uidList === undefined) throw "uidList is undefined";
    let uidNum = obj.uidNum;
    if (uidNum === undefined) throw "uidNum is undefined";
    let option = obj.option;
    if (option === undefined) throw "option is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.setHighPriorityUserListEx(uidList,uidNum,option,connection,);
  }

  takeSnapshotEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";
    let uid = obj.uid;
    if (uid === undefined) throw "uid is undefined";
    let filePath = obj.filePath;
    if (filePath === undefined) throw "filePath is undefined";

    return this._impl.takeSnapshotEx(connection,uid,filePath,);
  }

  enableContentInspectEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enabled = obj.enabled;
    if (enabled === undefined) throw "enabled is undefined";
    let config = obj.config;
    if (config === undefined) throw "config is undefined";
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.enableContentInspectEx(enabled,config,connection,);
  }

  startMediaRenderingTracingEx(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let connection = obj.connection;
    if (connection === undefined) throw "connection is undefined";

    return this._impl.startMediaRenderingTracingEx(connection,);
  }

}

