/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  CallIrisApiResult,
  EventParam,
  IrisApiEngine,
  IrisCore,
} from 'iris-web-core';

import { initIrisRtc } from '../../src/index';
import { IrisRtcEngine } from '../engine/IrisRtcEngine';

const bindingAPI = require('../../src/binding/IAgoraRtcEngineExDispatch');

let apiEnginePtr: IrisApiEngine;
let irisRtcEngine: IrisRtcEngine;
beforeAll(() => {
  apiEnginePtr = IrisCore.createIrisApiEngine();
  initIrisRtc(apiEnginePtr);
  irisRtcEngine = apiEnginePtr['apiInterceptors'][0];
});

afterAll(() => {
  IrisCore.disposeIrisApiEngine(apiEnginePtr);
});

afterEach(() => {
  jest.clearAllMocks();
});

describe('IRtcEngineEventHandlerEx', () => {
  test('onJoinChannelSuccessEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onJoinChannelSuccessEx(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onJoinChannelSuccessEx');
  });
  test('onRejoinChannelSuccessEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onRejoinChannelSuccessEx(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onRejoinChannelSuccessEx');
  });
  test('onAudioQualityEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onAudioQualityEx(
      undefined,
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onAudioQualityEx');
  });
  test('onAudioVolumeIndicationEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onAudioVolumeIndicationEx(
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onAudioVolumeIndicationEx');
  });
  test('onLeaveChannelEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onLeaveChannelEx(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onLeaveChannelEx');
  });
  test('onRtcStatsEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onRtcStatsEx(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onRtcStatsEx');
  });
  test('onNetworkQualityEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onNetworkQualityEx(undefined, undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onNetworkQualityEx');
  });
  test('onIntraRequestReceivedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onIntraRequestReceivedEx(undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onIntraRequestReceivedEx');
  });
  test('onFirstRemoteVideoDecodedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onFirstRemoteVideoDecodedEx(
      undefined,
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onFirstRemoteVideoDecodedEx');
  });
  test('onVideoSizeChangedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onVideoSizeChangedEx(
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onVideoSizeChangedEx');
  });
  test('onRemoteVideoStateChangedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onRemoteVideoStateChangedEx(
      undefined,
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onRemoteVideoStateChangedEx');
  });
  test('onFirstRemoteVideoFrameEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onFirstRemoteVideoFrameEx(
      undefined,
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onFirstRemoteVideoFrameEx');
  });
  test('onUserJoinedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onUserJoinedEx(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onUserJoinedEx');
  });
  test('onUserOfflineEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onUserOfflineEx(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onUserOfflineEx');
  });
  test('onUserMuteAudioEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onUserMuteAudioEx(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onUserMuteAudioEx');
  });
  test('onUserMuteVideoEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onUserMuteVideoEx(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onUserMuteVideoEx');
  });
  test('onUserEnableVideoEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onUserEnableVideoEx(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onUserEnableVideoEx');
  });
  test('onUserEnableLocalVideoEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onUserEnableLocalVideoEx(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onUserEnableLocalVideoEx');
  });
  test('onUserStateChangedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onUserStateChangedEx(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onUserStateChangedEx');
  });
  test('onLocalAudioStatsEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onLocalAudioStatsEx(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onLocalAudioStatsEx');
  });
  test('onRemoteAudioStatsEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onRemoteAudioStatsEx(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onRemoteAudioStatsEx');
  });
  test('onRemoteVideoStatsEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onRemoteVideoStatsEx(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onRemoteVideoStatsEx');
  });
  test('onConnectionLostEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onConnectionLostEx(undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onConnectionLostEx');
  });
  test('onConnectionInterruptedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onConnectionInterruptedEx(undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onConnectionInterruptedEx');
  });
  test('onConnectionBannedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onConnectionBannedEx(undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onConnectionBannedEx');
  });
  test('onStreamMessageEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onStreamMessageEx(
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onStreamMessageEx');
  });
  test('onStreamMessageErrorEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onStreamMessageErrorEx(
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onStreamMessageErrorEx');
  });
  test('onRequestTokenEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onRequestTokenEx(undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onRequestTokenEx');
  });
  test('onLicenseValidationFailureEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onLicenseValidationFailureEx(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith(
      'onLicenseValidationFailureEx'
    );
  });
  test('onTokenPrivilegeWillExpireEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onTokenPrivilegeWillExpireEx(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith(
      'onTokenPrivilegeWillExpireEx'
    );
  });
  test('onFirstLocalAudioFramePublishedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onFirstLocalAudioFramePublishedEx(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith(
      'onFirstLocalAudioFramePublishedEx'
    );
  });
  test('onFirstRemoteAudioFrameEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onFirstRemoteAudioFrameEx(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onFirstRemoteAudioFrameEx');
  });
  test('onFirstRemoteAudioDecodedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onFirstRemoteAudioDecodedEx(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onFirstRemoteAudioDecodedEx');
  });
  test('onLocalAudioStateChangedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onLocalAudioStateChangedEx(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onLocalAudioStateChangedEx');
  });
  test('onRemoteAudioStateChangedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onRemoteAudioStateChangedEx(
      undefined,
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onRemoteAudioStateChangedEx');
  });
  test('onActiveSpeakerEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onActiveSpeakerEx(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onActiveSpeakerEx');
  });
  test('onClientRoleChangedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onClientRoleChangedEx(
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onClientRoleChangedEx');
  });
  test('onClientRoleChangeFailedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onClientRoleChangeFailedEx(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onClientRoleChangeFailedEx');
  });
  test('onRemoteAudioTransportStatsEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onRemoteAudioTransportStatsEx(
      undefined,
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith(
      'onRemoteAudioTransportStatsEx'
    );
  });
  test('onRemoteVideoTransportStatsEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onRemoteVideoTransportStatsEx(
      undefined,
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith(
      'onRemoteVideoTransportStatsEx'
    );
  });
  test('onConnectionStateChangedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onConnectionStateChangedEx(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onConnectionStateChangedEx');
  });
  test('onWlAccMessageEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onWlAccMessageEx(undefined, undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onWlAccMessageEx');
  });
  test('onWlAccStatsEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onWlAccStatsEx(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onWlAccStatsEx');
  });
  test('onNetworkTypeChangedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onNetworkTypeChangedEx(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onNetworkTypeChangedEx');
  });
  test('onEncryptionErrorEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onEncryptionErrorEx(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onEncryptionErrorEx');
  });
  test('onUploadLogResultEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onUploadLogResultEx(
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onUploadLogResultEx');
  });
  test('onUserAccountUpdatedEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onUserAccountUpdatedEx(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onUserAccountUpdatedEx');
  });
  test('onSnapshotTakenEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onSnapshotTakenEx(
      undefined,
      undefined,
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onSnapshotTakenEx');
  });
  test('onVideoRenderingTracingResultEx impl call', async () => {
    let eventHandler = new bindingAPI.IRtcEngineEventHandlerEx(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onVideoRenderingTracingResultEx(
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith(
      'onVideoRenderingTracingResultEx'
    );
  });
});
describe('IRtcEngineEx', () => {
  test('joinChannelEx parameter', async () => {
    let nParam = {
      token: undefined,
      connection: undefined,
      options: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_joinChannelEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('joinChannelEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'joinChannelEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      token: 'test',
      connection: 'test',
      options: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_joinChannelEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl.joinChannelEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl.joinChannelEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('leaveChannelEx parameter', async () => {
    let nParam = {
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_leaveChannelEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('leaveChannelEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'leaveChannelEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_leaveChannelEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl.leaveChannelEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl.leaveChannelEx
    ).toBeCalledWith('test');
  });
  test('leaveChannelEx2 parameter', async () => {
    let nParam = {
      connection: undefined,
      options: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_leaveChannelEx2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('leaveChannelEx2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'leaveChannelEx2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
      options: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_leaveChannelEx2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl.leaveChannelEx2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl.leaveChannelEx2
    ).toBeCalledWith('test', 'test');
  });
  test('updateChannelMediaOptionsEx parameter', async () => {
    let nParam = {
      options: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_updateChannelMediaOptionsEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('updateChannelMediaOptionsEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'updateChannelMediaOptionsEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      options: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_updateChannelMediaOptionsEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .updateChannelMediaOptionsEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .updateChannelMediaOptionsEx
    ).toBeCalledWith('test', 'test');
  });
  test('setVideoEncoderConfigurationEx parameter', async () => {
    let nParam = {
      config: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_setVideoEncoderConfigurationEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setVideoEncoderConfigurationEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'setVideoEncoderConfigurationEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      config: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_setVideoEncoderConfigurationEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setVideoEncoderConfigurationEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setVideoEncoderConfigurationEx
    ).toBeCalledWith('test', 'test');
  });
  test('setupRemoteVideoEx parameter', async () => {
    let nParam = {
      canvas: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_setupRemoteVideoEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setupRemoteVideoEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'setupRemoteVideoEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      canvas: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_setupRemoteVideoEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setupRemoteVideoEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setupRemoteVideoEx
    ).toBeCalledWith('test', 'test');
  });
  test('muteRemoteAudioStreamEx parameter', async () => {
    let nParam = {
      uid: undefined,
      mute: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_muteRemoteAudioStreamEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('muteRemoteAudioStreamEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'muteRemoteAudioStreamEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      mute: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_muteRemoteAudioStreamEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteRemoteAudioStreamEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteRemoteAudioStreamEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('muteRemoteVideoStreamEx parameter', async () => {
    let nParam = {
      uid: undefined,
      mute: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_muteRemoteVideoStreamEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('muteRemoteVideoStreamEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'muteRemoteVideoStreamEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      mute: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_muteRemoteVideoStreamEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteRemoteVideoStreamEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteRemoteVideoStreamEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setRemoteVideoStreamTypeEx parameter', async () => {
    let nParam = {
      uid: undefined,
      streamType: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_setRemoteVideoStreamTypeEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRemoteVideoStreamTypeEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'setRemoteVideoStreamTypeEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      streamType: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_setRemoteVideoStreamTypeEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setRemoteVideoStreamTypeEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setRemoteVideoStreamTypeEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('muteLocalAudioStreamEx parameter', async () => {
    let nParam = {
      mute: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_muteLocalAudioStreamEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('muteLocalAudioStreamEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'muteLocalAudioStreamEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_muteLocalAudioStreamEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteLocalAudioStreamEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteLocalAudioStreamEx
    ).toBeCalledWith('test', 'test');
  });
  test('muteLocalVideoStreamEx parameter', async () => {
    let nParam = {
      mute: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_muteLocalVideoStreamEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('muteLocalVideoStreamEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'muteLocalVideoStreamEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_muteLocalVideoStreamEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteLocalVideoStreamEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteLocalVideoStreamEx
    ).toBeCalledWith('test', 'test');
  });
  test('muteAllRemoteAudioStreamsEx parameter', async () => {
    let nParam = {
      mute: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_muteAllRemoteAudioStreamsEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('muteAllRemoteAudioStreamsEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'muteAllRemoteAudioStreamsEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_muteAllRemoteAudioStreamsEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteAllRemoteAudioStreamsEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteAllRemoteAudioStreamsEx
    ).toBeCalledWith('test', 'test');
  });
  test('muteAllRemoteVideoStreamsEx parameter', async () => {
    let nParam = {
      mute: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_muteAllRemoteVideoStreamsEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('muteAllRemoteVideoStreamsEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'muteAllRemoteVideoStreamsEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_muteAllRemoteVideoStreamsEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteAllRemoteVideoStreamsEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteAllRemoteVideoStreamsEx
    ).toBeCalledWith('test', 'test');
  });
  test('setSubscribeAudioBlocklistEx parameter', async () => {
    let nParam = {
      uidList: undefined,
      uidNumber: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_setSubscribeAudioBlocklistEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setSubscribeAudioBlocklistEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'setSubscribeAudioBlocklistEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uidList: 'test',
      uidNumber: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_setSubscribeAudioBlocklistEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setSubscribeAudioBlocklistEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setSubscribeAudioBlocklistEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setSubscribeAudioAllowlistEx parameter', async () => {
    let nParam = {
      uidList: undefined,
      uidNumber: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_setSubscribeAudioAllowlistEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setSubscribeAudioAllowlistEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'setSubscribeAudioAllowlistEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uidList: 'test',
      uidNumber: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_setSubscribeAudioAllowlistEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setSubscribeAudioAllowlistEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setSubscribeAudioAllowlistEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setSubscribeVideoBlocklistEx parameter', async () => {
    let nParam = {
      uidList: undefined,
      uidNumber: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_setSubscribeVideoBlocklistEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setSubscribeVideoBlocklistEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'setSubscribeVideoBlocklistEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uidList: 'test',
      uidNumber: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_setSubscribeVideoBlocklistEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setSubscribeVideoBlocklistEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setSubscribeVideoBlocklistEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setSubscribeVideoAllowlistEx parameter', async () => {
    let nParam = {
      uidList: undefined,
      uidNumber: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_setSubscribeVideoAllowlistEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setSubscribeVideoAllowlistEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'setSubscribeVideoAllowlistEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uidList: 'test',
      uidNumber: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_setSubscribeVideoAllowlistEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setSubscribeVideoAllowlistEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setSubscribeVideoAllowlistEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setRemoteVideoSubscriptionOptionsEx parameter', async () => {
    let nParam = {
      uid: undefined,
      options: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_setRemoteVideoSubscriptionOptionsEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRemoteVideoSubscriptionOptionsEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'setRemoteVideoSubscriptionOptionsEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      options: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_setRemoteVideoSubscriptionOptionsEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setRemoteVideoSubscriptionOptionsEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setRemoteVideoSubscriptionOptionsEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setRemoteVoicePositionEx parameter', async () => {
    let nParam = {
      uid: undefined,
      pan: undefined,
      gain: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_setRemoteVoicePositionEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRemoteVoicePositionEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'setRemoteVoicePositionEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      pan: 'test',
      gain: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_setRemoteVoicePositionEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setRemoteVoicePositionEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setRemoteVoicePositionEx
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('setRemoteUserSpatialAudioParamsEx parameter', async () => {
    let nParam = {
      uid: undefined,
      params: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_setRemoteUserSpatialAudioParamsEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRemoteUserSpatialAudioParamsEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'setRemoteUserSpatialAudioParamsEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      params: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_setRemoteUserSpatialAudioParamsEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setRemoteUserSpatialAudioParamsEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setRemoteUserSpatialAudioParamsEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setRemoteRenderModeEx parameter', async () => {
    let nParam = {
      uid: undefined,
      renderMode: undefined,
      mirrorMode: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_setRemoteRenderModeEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRemoteRenderModeEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'setRemoteRenderModeEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      renderMode: 'test',
      mirrorMode: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_setRemoteRenderModeEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setRemoteRenderModeEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setRemoteRenderModeEx
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('enableLoopbackRecordingEx parameter', async () => {
    let nParam = {
      connection: undefined,
      enabled: undefined,
      deviceName: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_enableLoopbackRecordingEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableLoopbackRecordingEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'enableLoopbackRecordingEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
      enabled: 'test',
      deviceName: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_enableLoopbackRecordingEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .enableLoopbackRecordingEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .enableLoopbackRecordingEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('adjustRecordingSignalVolumeEx parameter', async () => {
    let nParam = {
      volume: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_adjustRecordingSignalVolumeEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('adjustRecordingSignalVolumeEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'adjustRecordingSignalVolumeEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_adjustRecordingSignalVolumeEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .adjustRecordingSignalVolumeEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .adjustRecordingSignalVolumeEx
    ).toBeCalledWith('test', 'test');
  });
  test('muteRecordingSignalEx parameter', async () => {
    let nParam = {
      mute: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_muteRecordingSignalEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('muteRecordingSignalEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'muteRecordingSignalEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_muteRecordingSignalEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteRecordingSignalEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteRecordingSignalEx
    ).toBeCalledWith('test', 'test');
  });
  test('adjustUserPlaybackSignalVolumeEx parameter', async () => {
    let nParam = {
      uid: undefined,
      volume: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_adjustUserPlaybackSignalVolumeEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('adjustUserPlaybackSignalVolumeEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'adjustUserPlaybackSignalVolumeEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      volume: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_adjustUserPlaybackSignalVolumeEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .adjustUserPlaybackSignalVolumeEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .adjustUserPlaybackSignalVolumeEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('getConnectionStateEx parameter', async () => {
    let nParam = {
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_getConnectionStateEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getConnectionStateEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'getConnectionStateEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_getConnectionStateEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .getConnectionStateEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .getConnectionStateEx
    ).toBeCalledWith('test');
  });
  test('enableEncryptionEx parameter', async () => {
    let nParam = {
      connection: undefined,
      enabled: undefined,
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_enableEncryptionEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableEncryptionEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'enableEncryptionEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
      enabled: 'test',
      config: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_enableEncryptionEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .enableEncryptionEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .enableEncryptionEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('createDataStreamEx parameter', async () => {
    let nParam = {
      streamId: undefined,
      reliable: undefined,
      ordered: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_createDataStreamEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('createDataStreamEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'createDataStreamEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      streamId: 'test',
      reliable: 'test',
      ordered: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_createDataStreamEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .createDataStreamEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .createDataStreamEx
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('createDataStreamEx2 parameter', async () => {
    let nParam = {
      streamId: undefined,
      config: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_createDataStreamEx2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('createDataStreamEx2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'createDataStreamEx2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      streamId: 'test',
      config: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_createDataStreamEx2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .createDataStreamEx2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .createDataStreamEx2
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('sendStreamMessageEx parameter', async () => {
    let nParam = {
      streamId: undefined,
      data: undefined,
      length: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_sendStreamMessageEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('sendStreamMessageEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'sendStreamMessageEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      streamId: 'test',
      data: 'test',
      length: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_sendStreamMessageEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .sendStreamMessageEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .sendStreamMessageEx
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('addVideoWatermarkEx parameter', async () => {
    let nParam = {
      watermarkUrl: undefined,
      options: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_addVideoWatermarkEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('addVideoWatermarkEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'addVideoWatermarkEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      watermarkUrl: 'test',
      options: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_addVideoWatermarkEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .addVideoWatermarkEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .addVideoWatermarkEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('clearVideoWatermarkEx parameter', async () => {
    let nParam = {
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_clearVideoWatermarkEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('clearVideoWatermarkEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'clearVideoWatermarkEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_clearVideoWatermarkEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .clearVideoWatermarkEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .clearVideoWatermarkEx
    ).toBeCalledWith('test');
  });
  test('sendCustomReportMessageEx parameter', async () => {
    let nParam = {
      id: undefined,
      category: undefined,
      event: undefined,
      label: undefined,
      value: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_sendCustomReportMessageEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('sendCustomReportMessageEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'sendCustomReportMessageEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      id: 'test',
      category: 'test',
      event: 'test',
      label: 'test',
      value: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_sendCustomReportMessageEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .sendCustomReportMessageEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .sendCustomReportMessageEx
    ).toBeCalledWith('test', 'test', 'test', 'test', 'test', 'test');
  });
  test('enableAudioVolumeIndicationEx parameter', async () => {
    let nParam = {
      interval: undefined,
      smooth: undefined,
      reportVad: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_enableAudioVolumeIndicationEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableAudioVolumeIndicationEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'enableAudioVolumeIndicationEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      interval: 'test',
      smooth: 'test',
      reportVad: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_enableAudioVolumeIndicationEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .enableAudioVolumeIndicationEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .enableAudioVolumeIndicationEx
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('startRtmpStreamWithoutTranscodingEx parameter', async () => {
    let nParam = {
      url: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_startRtmpStreamWithoutTranscodingEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startRtmpStreamWithoutTranscodingEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'startRtmpStreamWithoutTranscodingEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      url: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_startRtmpStreamWithoutTranscodingEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .startRtmpStreamWithoutTranscodingEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .startRtmpStreamWithoutTranscodingEx
    ).toBeCalledWith('test', 'test');
  });
  test('startRtmpStreamWithTranscodingEx parameter', async () => {
    let nParam = {
      url: undefined,
      transcoding: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_startRtmpStreamWithTranscodingEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startRtmpStreamWithTranscodingEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'startRtmpStreamWithTranscodingEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      url: 'test',
      transcoding: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_startRtmpStreamWithTranscodingEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .startRtmpStreamWithTranscodingEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .startRtmpStreamWithTranscodingEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('updateRtmpTranscodingEx parameter', async () => {
    let nParam = {
      transcoding: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_updateRtmpTranscodingEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('updateRtmpTranscodingEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'updateRtmpTranscodingEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      transcoding: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_updateRtmpTranscodingEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .updateRtmpTranscodingEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .updateRtmpTranscodingEx
    ).toBeCalledWith('test', 'test');
  });
  test('stopRtmpStreamEx parameter', async () => {
    let nParam = {
      url: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_stopRtmpStreamEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('stopRtmpStreamEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'stopRtmpStreamEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      url: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_stopRtmpStreamEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl.stopRtmpStreamEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl.stopRtmpStreamEx
    ).toBeCalledWith('test', 'test');
  });
  test('startOrUpdateChannelMediaRelayEx parameter', async () => {
    let nParam = {
      configuration: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_startOrUpdateChannelMediaRelayEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startOrUpdateChannelMediaRelayEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'startOrUpdateChannelMediaRelayEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      configuration: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_startOrUpdateChannelMediaRelayEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .startOrUpdateChannelMediaRelayEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .startOrUpdateChannelMediaRelayEx
    ).toBeCalledWith('test', 'test');
  });
  test('startChannelMediaRelayEx parameter', async () => {
    let nParam = {
      configuration: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_startChannelMediaRelayEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startChannelMediaRelayEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'startChannelMediaRelayEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      configuration: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_startChannelMediaRelayEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .startChannelMediaRelayEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .startChannelMediaRelayEx
    ).toBeCalledWith('test', 'test');
  });
  test('updateChannelMediaRelayEx parameter', async () => {
    let nParam = {
      configuration: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_updateChannelMediaRelayEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('updateChannelMediaRelayEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'updateChannelMediaRelayEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      configuration: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_updateChannelMediaRelayEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .updateChannelMediaRelayEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .updateChannelMediaRelayEx
    ).toBeCalledWith('test', 'test');
  });
  test('stopChannelMediaRelayEx parameter', async () => {
    let nParam = {
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_stopChannelMediaRelayEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('stopChannelMediaRelayEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'stopChannelMediaRelayEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_stopChannelMediaRelayEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .stopChannelMediaRelayEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .stopChannelMediaRelayEx
    ).toBeCalledWith('test');
  });
  test('pauseAllChannelMediaRelayEx parameter', async () => {
    let nParam = {
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_pauseAllChannelMediaRelayEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('pauseAllChannelMediaRelayEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'pauseAllChannelMediaRelayEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_pauseAllChannelMediaRelayEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .pauseAllChannelMediaRelayEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .pauseAllChannelMediaRelayEx
    ).toBeCalledWith('test');
  });
  test('resumeAllChannelMediaRelayEx parameter', async () => {
    let nParam = {
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_resumeAllChannelMediaRelayEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('resumeAllChannelMediaRelayEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'resumeAllChannelMediaRelayEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_resumeAllChannelMediaRelayEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .resumeAllChannelMediaRelayEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .resumeAllChannelMediaRelayEx
    ).toBeCalledWith('test');
  });
  test('getUserInfoByUserAccountEx parameter', async () => {
    let nParam = {
      userAccount: undefined,
      userInfo: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_getUserInfoByUserAccountEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getUserInfoByUserAccountEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'getUserInfoByUserAccountEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      userAccount: 'test',
      userInfo: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_getUserInfoByUserAccountEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .getUserInfoByUserAccountEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .getUserInfoByUserAccountEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('getUserInfoByUidEx parameter', async () => {
    let nParam = {
      uid: undefined,
      userInfo: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_getUserInfoByUidEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getUserInfoByUidEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'getUserInfoByUidEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      userInfo: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_getUserInfoByUidEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .getUserInfoByUidEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .getUserInfoByUidEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('enableDualStreamModeEx parameter', async () => {
    let nParam = {
      enabled: undefined,
      streamConfig: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_enableDualStreamModeEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableDualStreamModeEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'enableDualStreamModeEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      streamConfig: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_enableDualStreamModeEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .enableDualStreamModeEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .enableDualStreamModeEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setDualStreamModeEx parameter', async () => {
    let nParam = {
      mode: undefined,
      streamConfig: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_setDualStreamModeEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setDualStreamModeEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'setDualStreamModeEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mode: 'test',
      streamConfig: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_setDualStreamModeEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setDualStreamModeEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setDualStreamModeEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('setHighPriorityUserListEx parameter', async () => {
    let nParam = {
      uidList: undefined,
      uidNum: undefined,
      option: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_setHighPriorityUserListEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setHighPriorityUserListEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'setHighPriorityUserListEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uidList: 'test',
      uidNum: 'test',
      option: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_setHighPriorityUserListEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setHighPriorityUserListEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setHighPriorityUserListEx
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('takeSnapshotEx parameter', async () => {
    let nParam = {
      connection: undefined,
      uid: undefined,
      filePath: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_takeSnapshotEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('takeSnapshotEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'takeSnapshotEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
      uid: 'test',
      filePath: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_takeSnapshotEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl.takeSnapshotEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl.takeSnapshotEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('enableContentInspectEx parameter', async () => {
    let nParam = {
      enabled: undefined,
      config: undefined,
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_enableContentInspectEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableContentInspectEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'enableContentInspectEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      config: 'test',
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_enableContentInspectEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .enableContentInspectEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .enableContentInspectEx
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('startMediaRenderingTracingEx parameter', async () => {
    let nParam = {
      connection: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'RtcEngineEx_startMediaRenderingTracingEx',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('startMediaRenderingTracingEx impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'startMediaRenderingTracingEx'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
    };
    let apiParam = new EventParam(
      'RtcEngineEx_startMediaRenderingTracingEx',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .startMediaRenderingTracingEx
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .startMediaRenderingTracingEx
    ).toBeCalledWith('test');
  });
});
