/// Generated by terra, DO NOT MODIFY BY HAND.

import * as NATIVE_RTC from '@iris/native-rtc';
import { CallIrisApiResult, IrisApiEngine, IrisCore } from 'iris-web-core';

import { IrisWebRtc } from '../../src/IrisRtcApi';
import * as bufferExtensions from '../../src/extensions/CallApiBufferExtensions';
import { IrisRtcEngine } from '../engine/IrisRtcEngine';

const bindingAPI = require('../../src/binding/IAgoraRtcEngineExDispatch');

let apiEnginePtr: IrisApiEngine;
let irisRtcEngine: IrisRtcEngine;
beforeAll(async () => {
  apiEnginePtr = IrisCore.createIrisApiEngine();
  IrisWebRtc.initIrisRtc(apiEnginePtr);
  irisRtcEngine = apiEnginePtr['apiInterceptors'][0];
  irisRtcEngine.implHelper.createAudioTrack = jest.fn();
  let nParam = {
    context: 'test',
  };
  let apiParam = new IrisCore.EventParam(
    'RtcEngine_initialize_0320339',
    JSON.stringify(nParam),
    0,
    '',
    ['test'],
    [],
    1
  );
  await IrisCore.callIrisApi(apiEnginePtr, apiParam);
});

afterAll(() => {
  IrisCore.disposeIrisApiEngine(apiEnginePtr);
});

afterEach(() => {
  jest.clearAllMocks();
});

describe('IRtcEngineEx', () => {
  test('RtcEngineEx_joinChannelEx_a3cd08c parameter', async () => {
    let nParam = {
      token: undefined,
      connection: undefined,
      options: undefined,
    };
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_joinChannelEx_a3cd08c',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('token is undefined');
    }
    //@ts-ignore
    nParam.token = 'test';
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_joinChannelEx_a3cd08c',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('connection is undefined');
    }
    //@ts-ignore
    nParam.connection = 'test';
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_joinChannelEx_a3cd08c',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('options is undefined');
    }
    //@ts-ignore
    nParam.options = 'test';
  });

  test('RtcEngineEx_joinChannelEx_a3cd08c impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'joinChannelEx_a3cd08c'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      token: 'test',
      connection: 'test',
      options: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_joinChannelEx_a3cd08c',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .joinChannelEx_a3cd08c
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .joinChannelEx_a3cd08c
    ).toBeCalledWith('test', 'test', 'test');
  });

  test('RtcEngineEx_leaveChannelEx_c81e1a4 parameter', async () => {
    let nParam = {
      connection: undefined,
    };
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_leaveChannelEx_c81e1a4',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('connection is undefined');
    }
    //@ts-ignore
    nParam.connection = 'test';
  });

  test('RtcEngineEx_leaveChannelEx_c81e1a4 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'leaveChannelEx_c81e1a4'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_leaveChannelEx_c81e1a4',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .leaveChannelEx_c81e1a4
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .leaveChannelEx_c81e1a4
    ).toBeCalledWith('test');
  });

  test('RtcEngineEx_leaveChannelEx_b03ee9a parameter', async () => {
    let nParam = {
      connection: undefined,
      options: undefined,
    };
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_leaveChannelEx_b03ee9a',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('connection is undefined');
    }
    //@ts-ignore
    nParam.connection = 'test';
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_leaveChannelEx_b03ee9a',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('options is undefined');
    }
    //@ts-ignore
    nParam.options = 'test';
  });

  test('RtcEngineEx_leaveChannelEx_b03ee9a impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'leaveChannelEx_b03ee9a'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
      options: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_leaveChannelEx_b03ee9a',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .leaveChannelEx_b03ee9a
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .leaveChannelEx_b03ee9a
    ).toBeCalledWith('test', 'test');
  });

  test('RtcEngineEx_updateChannelMediaOptionsEx_457bb35 parameter', async () => {
    let nParam = {
      options: undefined,
      connection: undefined,
    };
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_updateChannelMediaOptionsEx_457bb35',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('options is undefined');
    }
    //@ts-ignore
    nParam.options = 'test';
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_updateChannelMediaOptionsEx_457bb35',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('connection is undefined');
    }
    //@ts-ignore
    nParam.connection = 'test';
  });

  test('RtcEngineEx_updateChannelMediaOptionsEx_457bb35 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'updateChannelMediaOptionsEx_457bb35'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      options: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_updateChannelMediaOptionsEx_457bb35',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .updateChannelMediaOptionsEx_457bb35
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .updateChannelMediaOptionsEx_457bb35
    ).toBeCalledWith('test', 'test');
  });

  test('RtcEngineEx_setVideoEncoderConfigurationEx_4670c1e impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      config: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_setVideoEncoderConfigurationEx_4670c1e',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.setVideoEncoderConfigurationEx_4670c1e
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_setupRemoteVideoEx_522a409 parameter', async () => {
    let nParam = {
      canvas: undefined,
      connection: undefined,
    };
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_setupRemoteVideoEx_522a409',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('canvas is undefined');
    }
    //@ts-ignore
    nParam.canvas = 'test';
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_setupRemoteVideoEx_522a409',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('connection is undefined');
    }
    //@ts-ignore
    nParam.connection = 'test';
  });

  test('RtcEngineEx_setupRemoteVideoEx_522a409 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'setupRemoteVideoEx_522a409'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      canvas: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_setupRemoteVideoEx_522a409',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setupRemoteVideoEx_522a409
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .setupRemoteVideoEx_522a409
    ).toBeCalledWith('test', 'test');
  });

  test('RtcEngineEx_muteRemoteAudioStreamEx_6d93082 parameter', async () => {
    let nParam = {
      uid: undefined,
      mute: undefined,
      connection: undefined,
    };
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_muteRemoteAudioStreamEx_6d93082',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('uid is undefined');
    }
    //@ts-ignore
    nParam.uid = 'test';
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_muteRemoteAudioStreamEx_6d93082',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('mute is undefined');
    }
    //@ts-ignore
    nParam.mute = 'test';
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_muteRemoteAudioStreamEx_6d93082',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('connection is undefined');
    }
    //@ts-ignore
    nParam.connection = 'test';
  });

  test('RtcEngineEx_muteRemoteAudioStreamEx_6d93082 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'muteRemoteAudioStreamEx_6d93082'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      mute: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_muteRemoteAudioStreamEx_6d93082',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteRemoteAudioStreamEx_6d93082
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteRemoteAudioStreamEx_6d93082
    ).toBeCalledWith('test', 'test', 'test');
  });

  test('RtcEngineEx_muteRemoteVideoStreamEx_6d93082 parameter', async () => {
    let nParam = {
      uid: undefined,
      mute: undefined,
      connection: undefined,
    };
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_muteRemoteVideoStreamEx_6d93082',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('uid is undefined');
    }
    //@ts-ignore
    nParam.uid = 'test';
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_muteRemoteVideoStreamEx_6d93082',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('mute is undefined');
    }
    //@ts-ignore
    nParam.mute = 'test';
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_muteRemoteVideoStreamEx_6d93082',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('connection is undefined');
    }
    //@ts-ignore
    nParam.connection = 'test';
  });

  test('RtcEngineEx_muteRemoteVideoStreamEx_6d93082 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'muteRemoteVideoStreamEx_6d93082'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      mute: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_muteRemoteVideoStreamEx_6d93082',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteRemoteVideoStreamEx_6d93082
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteRemoteVideoStreamEx_6d93082
    ).toBeCalledWith('test', 'test', 'test');
  });

  test('RtcEngineEx_setRemoteVideoStreamTypeEx_01dc428 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      streamType: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_setRemoteVideoStreamTypeEx_01dc428',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.setRemoteVideoStreamTypeEx_01dc428
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_muteLocalAudioStreamEx_3cf17a4 parameter', async () => {
    let nParam = {
      mute: undefined,
      connection: undefined,
    };
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_muteLocalAudioStreamEx_3cf17a4',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('mute is undefined');
    }
    //@ts-ignore
    nParam.mute = 'test';
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_muteLocalAudioStreamEx_3cf17a4',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('connection is undefined');
    }
    //@ts-ignore
    nParam.connection = 'test';
  });

  test('RtcEngineEx_muteLocalAudioStreamEx_3cf17a4 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'muteLocalAudioStreamEx_3cf17a4'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_muteLocalAudioStreamEx_3cf17a4',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteLocalAudioStreamEx_3cf17a4
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteLocalAudioStreamEx_3cf17a4
    ).toBeCalledWith('test', 'test');
  });

  test('RtcEngineEx_muteLocalVideoStreamEx_3cf17a4 parameter', async () => {
    let nParam = {
      mute: undefined,
      connection: undefined,
    };
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_muteLocalVideoStreamEx_3cf17a4',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('mute is undefined');
    }
    //@ts-ignore
    nParam.mute = 'test';
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_muteLocalVideoStreamEx_3cf17a4',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('connection is undefined');
    }
    //@ts-ignore
    nParam.connection = 'test';
  });

  test('RtcEngineEx_muteLocalVideoStreamEx_3cf17a4 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'muteLocalVideoStreamEx_3cf17a4'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_muteLocalVideoStreamEx_3cf17a4',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteLocalVideoStreamEx_3cf17a4
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteLocalVideoStreamEx_3cf17a4
    ).toBeCalledWith('test', 'test');
  });

  test('RtcEngineEx_muteAllRemoteAudioStreamsEx_3cf17a4 parameter', async () => {
    let nParam = {
      mute: undefined,
      connection: undefined,
    };
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_muteAllRemoteAudioStreamsEx_3cf17a4',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('mute is undefined');
    }
    //@ts-ignore
    nParam.mute = 'test';
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_muteAllRemoteAudioStreamsEx_3cf17a4',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('connection is undefined');
    }
    //@ts-ignore
    nParam.connection = 'test';
  });

  test('RtcEngineEx_muteAllRemoteAudioStreamsEx_3cf17a4 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'muteAllRemoteAudioStreamsEx_3cf17a4'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_muteAllRemoteAudioStreamsEx_3cf17a4',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteAllRemoteAudioStreamsEx_3cf17a4
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteAllRemoteAudioStreamsEx_3cf17a4
    ).toBeCalledWith('test', 'test');
  });

  test('RtcEngineEx_muteAllRemoteVideoStreamsEx_3cf17a4 parameter', async () => {
    let nParam = {
      mute: undefined,
      connection: undefined,
    };
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_muteAllRemoteVideoStreamsEx_3cf17a4',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('mute is undefined');
    }
    //@ts-ignore
    nParam.mute = 'test';
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_muteAllRemoteVideoStreamsEx_3cf17a4',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('connection is undefined');
    }
    //@ts-ignore
    nParam.connection = 'test';
  });

  test('RtcEngineEx_muteAllRemoteVideoStreamsEx_3cf17a4 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'muteAllRemoteVideoStreamsEx_3cf17a4'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_muteAllRemoteVideoStreamsEx_3cf17a4',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteAllRemoteVideoStreamsEx_3cf17a4
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .muteAllRemoteVideoStreamsEx_3cf17a4
    ).toBeCalledWith('test', 'test');
  });

  test('RtcEngineEx_setSubscribeAudioBlocklistEx_9f1e85c impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uidList: 'test',
      uidNumber: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_setSubscribeAudioBlocklistEx_9f1e85c',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.setSubscribeAudioBlocklistEx_9f1e85c
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_setSubscribeAudioAllowlistEx_9f1e85c impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uidList: 'test',
      uidNumber: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_setSubscribeAudioAllowlistEx_9f1e85c',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.setSubscribeAudioAllowlistEx_9f1e85c
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_setSubscribeVideoBlocklistEx_9f1e85c impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uidList: 'test',
      uidNumber: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_setSubscribeVideoBlocklistEx_9f1e85c',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.setSubscribeVideoBlocklistEx_9f1e85c
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_setSubscribeVideoAllowlistEx_9f1e85c impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uidList: 'test',
      uidNumber: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_setSubscribeVideoAllowlistEx_9f1e85c',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.setSubscribeVideoAllowlistEx_9f1e85c
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_setRemoteVideoSubscriptionOptionsEx_3cd36bc impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      options: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_setRemoteVideoSubscriptionOptionsEx_3cd36bc',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.setRemoteVideoSubscriptionOptionsEx_3cd36bc
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_setRemoteVoicePositionEx_fc0471c impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      pan: 'test',
      gain: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_setRemoteVoicePositionEx_fc0471c',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.setRemoteVoicePositionEx_fc0471c
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_setRemoteUserSpatialAudioParamsEx_40ca9fb impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      params: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_setRemoteUserSpatialAudioParamsEx_40ca9fb',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.setRemoteUserSpatialAudioParamsEx_40ca9fb
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_setRemoteRenderModeEx_a72fe4e impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      renderMode: 'test',
      mirrorMode: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_setRemoteRenderModeEx_a72fe4e',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.setRemoteRenderModeEx_a72fe4e
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_enableLoopbackRecordingEx_4f41542 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
      enabled: 'test',
      deviceName: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_enableLoopbackRecordingEx_4f41542',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.enableLoopbackRecordingEx_4f41542
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_adjustRecordingSignalVolumeEx_e84d10e impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_adjustRecordingSignalVolumeEx_e84d10e',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.adjustRecordingSignalVolumeEx_e84d10e
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_muteRecordingSignalEx_3cf17a4 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mute: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_muteRecordingSignalEx_3cf17a4',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.muteRecordingSignalEx_3cf17a4
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_adjustUserPlaybackSignalVolumeEx_adbd29c impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      volume: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_adjustUserPlaybackSignalVolumeEx_adbd29c',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.adjustUserPlaybackSignalVolumeEx_adbd29c
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_getConnectionStateEx_c81e1a4 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_getConnectionStateEx_c81e1a4',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.getConnectionStateEx_c81e1a4
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_enableEncryptionEx_10cd872 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
      enabled: 'test',
      config: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_enableEncryptionEx_10cd872',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.enableEncryptionEx_10cd872
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_createDataStreamEx_1767167 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      reliable: 'test',
      ordered: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_createDataStreamEx_1767167',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.createDataStreamEx_1767167
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_createDataStreamEx_9f641b6 parameter', async () => {
    let nParam = {
      config: undefined,
      connection: undefined,
    };
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_createDataStreamEx_9f641b6',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('config is undefined');
    }
    //@ts-ignore
    nParam.config = 'test';
    try {
      await IrisCore.callIrisApi(
        apiEnginePtr,
        new IrisCore.EventParam(
          'RtcEngineEx_createDataStreamEx_9f641b6',
          JSON.stringify(nParam),
          0,
          '',
          ['test'],
          [],
          1
        )
      );
    } catch (e) {
      expect(e).toEqual('connection is undefined');
    }
    //@ts-ignore
    nParam.connection = 'test';
  });

  test('RtcEngineEx_createDataStreamEx_9f641b6 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'createDataStreamEx_9f641b6'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      config: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_createDataStreamEx_9f641b6',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .createDataStreamEx_9f641b6
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .createDataStreamEx_9f641b6
    ).toBeCalledWith('test', 'test');
  });

  test('RtcEngineEx_sendStreamMessageEx_0c34857 parameter', async () => {
    let nParam = {
      streamId: 'test',
      data: 'test',
      length: 'test',
      connection: 'test',
    };
    jest.spyOn(bufferExtensions, 'callApiBufferExtension');
    await IrisCore.callIrisApi(
      apiEnginePtr,
      new IrisCore.EventParam(
        'RtcEngineEx_sendStreamMessageEx_0c34857',
        JSON.stringify(nParam),
        0,
        '',
        ['test'],
        [],
        1
      )
    );
    expect(bufferExtensions.callApiBufferExtension).toBeCalledTimes(1);
  });

  test('RtcEngineEx_sendStreamMessageEx_0c34857 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl,
        'sendStreamMessageEx_0c34857'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      streamId: 'test',
      data: 'test',
      length: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_sendStreamMessageEx_0c34857',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .sendStreamMessageEx_0c34857
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        .sendStreamMessageEx_0c34857
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });

  test('RtcEngineEx_addVideoWatermarkEx_ad7daa3 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      watermarkUrl: 'test',
      options: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_addVideoWatermarkEx_ad7daa3',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.addVideoWatermarkEx_ad7daa3
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_clearVideoWatermarkEx_c81e1a4 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_clearVideoWatermarkEx_c81e1a4',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.clearVideoWatermarkEx_c81e1a4
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_sendCustomReportMessageEx_833b8a5 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      id: 'test',
      category: 'test',
      event: 'test',
      label: 'test',
      value: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_sendCustomReportMessageEx_833b8a5',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.sendCustomReportMessageEx_833b8a5
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_enableAudioVolumeIndicationEx_ac84f2a impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      interval: 'test',
      smooth: 'test',
      reportVad: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_enableAudioVolumeIndicationEx_ac84f2a',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.enableAudioVolumeIndicationEx_ac84f2a
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_startRtmpStreamWithoutTranscodingEx_e405325 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      url: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_startRtmpStreamWithoutTranscodingEx_e405325',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.startRtmpStreamWithoutTranscodingEx_e405325
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_startRtmpStreamWithTranscodingEx_ab121b5 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      url: 'test',
      transcoding: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_startRtmpStreamWithTranscodingEx_ab121b5',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.startRtmpStreamWithTranscodingEx_ab121b5
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_updateRtmpTranscodingEx_77f3ee8 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      transcoding: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_updateRtmpTranscodingEx_77f3ee8',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.updateRtmpTranscodingEx_77f3ee8
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_stopRtmpStreamEx_e405325 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      url: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_stopRtmpStreamEx_e405325',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.stopRtmpStreamEx_e405325
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_startOrUpdateChannelMediaRelayEx_4ad39a8 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      configuration: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_startOrUpdateChannelMediaRelayEx_4ad39a8',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.startOrUpdateChannelMediaRelayEx_4ad39a8
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_stopChannelMediaRelayEx_c81e1a4 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_stopChannelMediaRelayEx_c81e1a4',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.stopChannelMediaRelayEx_c81e1a4
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_pauseAllChannelMediaRelayEx_c81e1a4 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_pauseAllChannelMediaRelayEx_c81e1a4',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.pauseAllChannelMediaRelayEx_c81e1a4
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_resumeAllChannelMediaRelayEx_c81e1a4 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_resumeAllChannelMediaRelayEx_c81e1a4',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.resumeAllChannelMediaRelayEx_c81e1a4
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_getUserInfoByUserAccountEx_ca39cc6 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      userAccount: 'test',
      userInfo: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_getUserInfoByUserAccountEx_ca39cc6',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.getUserInfoByUserAccountEx_ca39cc6
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_getUserInfoByUidEx_1e78da1 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uid: 'test',
      userInfo: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_getUserInfoByUidEx_1e78da1',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.getUserInfoByUidEx_1e78da1
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_enableDualStreamModeEx_4b18f41 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      streamConfig: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_enableDualStreamModeEx_4b18f41',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.enableDualStreamModeEx_4b18f41
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_setDualStreamModeEx_622d0f3 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mode: 'test',
      streamConfig: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_setDualStreamModeEx_622d0f3',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.setDualStreamModeEx_622d0f3
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_setSimulcastConfigEx_bd8d7d0 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      simulcastConfig: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_setSimulcastConfigEx_bd8d7d0',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.setSimulcastConfigEx_bd8d7d0
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_setHighPriorityUserListEx_8736b5c impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uidList: 'test',
      uidNum: 'test',
      option: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_setHighPriorityUserListEx_8736b5c',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.setHighPriorityUserListEx_8736b5c
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_takeSnapshotEx_de1c015 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
      uid: 'test',
      filePath: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_takeSnapshotEx_de1c015',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.takeSnapshotEx_de1c015
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_enableContentInspectEx_c4e7f69 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      config: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_enableContentInspectEx_c4e7f69',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.enableContentInspectEx_c4e7f69
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_startMediaRenderingTracingEx_c81e1a4 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_startMediaRenderingTracingEx_c81e1a4',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.startMediaRenderingTracingEx_c81e1a4
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_setParametersEx_8225ea3 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
      parameters: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_setParametersEx_8225ea3',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.setParametersEx_8225ea3
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_getCallIdEx_b13f7c4 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      callId: 'test',
      connection: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_getCallIdEx_b13f7c4',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.getCallIdEx_b13f7c4
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });

  test('RtcEngineEx_sendAudioMetadataEx_e2bf1c4 impl call', async () => {
    jest
      .spyOn(irisRtcEngine, 'returnResult')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      connection: 'test',
      metadata: 'test',
      length: 'test',
    };
    let apiParam = new IrisCore.EventParam(
      'RtcEngineEx_sendAudioMetadataEx_e2bf1c4',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('RtcEngineEx')._impl
        ?.sendAudioMetadataEx_e2bf1c4
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });
});
