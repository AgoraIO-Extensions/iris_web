/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  CallIrisApiResult,
  EventParam,
  IrisApiEngine,
  IrisCore,
} from 'iris-web-core';

import { initIrisRtc } from '../../src/index';
import { IrisRtcEngine } from '../engine/IrisRtcEngine';

let apiEnginePtr: IrisApiEngine;
let irisRtcEngine: IrisRtcEngine;
beforeAll(() => {
  apiEnginePtr = IrisCore.createIrisApiEngine();
  initIrisRtc(apiEnginePtr);
  irisRtcEngine = apiEnginePtr['apiInterceptors'][0];
});

afterAll(() => {
  IrisCore.disposeIrisApiEngine(apiEnginePtr);
});

describe('IMediaEngine', () => {
  test('registerAudioFrameObserver parameter', async () => {
    let nParam = {
      observer: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaEngine_registerAudioFrameObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('registerAudioFrameObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl,
        'registerAudioFrameObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
    };
    let apiParam = new EventParam(
      'MediaEngine_registerAudioFrameObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .registerAudioFrameObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .registerAudioFrameObserver
    ).toBeCalledWith('test');
  });
  test('registerVideoFrameObserver parameter', async () => {
    let nParam = {
      observer: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaEngine_registerVideoFrameObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('registerVideoFrameObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl,
        'registerVideoFrameObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
    };
    let apiParam = new EventParam(
      'MediaEngine_registerVideoFrameObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .registerVideoFrameObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .registerVideoFrameObserver
    ).toBeCalledWith('test');
  });
  test('registerVideoEncodedFrameObserver parameter', async () => {
    let nParam = {
      observer: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaEngine_registerVideoEncodedFrameObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('registerVideoEncodedFrameObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl,
        'registerVideoEncodedFrameObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
    };
    let apiParam = new EventParam(
      'MediaEngine_registerVideoEncodedFrameObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .registerVideoEncodedFrameObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .registerVideoEncodedFrameObserver
    ).toBeCalledWith('test');
  });
  test('pushAudioFrame parameter', async () => {
    let nParam = {
      frame: undefined,
      trackId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaEngine_pushAudioFrame',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('pushAudioFrame impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl,
        'pushAudioFrame'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      frame: 'test',
      trackId: 'test',
    };
    let apiParam = new EventParam(
      'MediaEngine_pushAudioFrame',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl.pushAudioFrame
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl.pushAudioFrame
    ).toBeCalledWith('test', 'test');
  });
  test('pullAudioFrame parameter', async () => {
    let nParam = {
      frame: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaEngine_pullAudioFrame',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('pullAudioFrame impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl,
        'pullAudioFrame'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      frame: 'test',
    };
    let apiParam = new EventParam(
      'MediaEngine_pullAudioFrame',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl.pullAudioFrame
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl.pullAudioFrame
    ).toBeCalledWith('test');
  });
  test('setExternalVideoSource parameter', async () => {
    let nParam = {
      enabled: undefined,
      useTexture: undefined,
      sourceType: undefined,
      encodedVideoOption: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaEngine_setExternalVideoSource',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setExternalVideoSource impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl,
        'setExternalVideoSource'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      useTexture: 'test',
      sourceType: 'test',
      encodedVideoOption: 'test',
    };
    let apiParam = new EventParam(
      'MediaEngine_setExternalVideoSource',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .setExternalVideoSource
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .setExternalVideoSource
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });
  test('setExternalAudioSource parameter', async () => {
    let nParam = {
      enabled: undefined,
      sampleRate: undefined,
      channels: undefined,
      localPlayback: undefined,
      publish: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaEngine_setExternalAudioSource',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setExternalAudioSource impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl,
        'setExternalAudioSource'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      sampleRate: 'test',
      channels: 'test',
      localPlayback: 'test',
      publish: 'test',
    };
    let apiParam = new EventParam(
      'MediaEngine_setExternalAudioSource',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .setExternalAudioSource
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .setExternalAudioSource
    ).toBeCalledWith('test', 'test', 'test', 'test', 'test');
  });
  test('createCustomAudioTrack parameter', async () => {
    let nParam = {
      trackType: undefined,
      config: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaEngine_createCustomAudioTrack',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('createCustomAudioTrack impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl,
        'createCustomAudioTrack'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      trackType: 'test',
      config: 'test',
    };
    let apiParam = new EventParam(
      'MediaEngine_createCustomAudioTrack',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .createCustomAudioTrack
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .createCustomAudioTrack
    ).toBeCalledWith('test', 'test');
  });
  test('destroyCustomAudioTrack parameter', async () => {
    let nParam = {
      trackId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaEngine_destroyCustomAudioTrack',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('destroyCustomAudioTrack impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl,
        'destroyCustomAudioTrack'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      trackId: 'test',
    };
    let apiParam = new EventParam(
      'MediaEngine_destroyCustomAudioTrack',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .destroyCustomAudioTrack
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .destroyCustomAudioTrack
    ).toBeCalledWith('test');
  });
  test('setExternalAudioSink parameter', async () => {
    let nParam = {
      enabled: undefined,
      sampleRate: undefined,
      channels: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaEngine_setExternalAudioSink',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setExternalAudioSink impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl,
        'setExternalAudioSink'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enabled: 'test',
      sampleRate: 'test',
      channels: 'test',
    };
    let apiParam = new EventParam(
      'MediaEngine_setExternalAudioSink',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .setExternalAudioSink
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .setExternalAudioSink
    ).toBeCalledWith('test', 'test', 'test');
  });
  test('enableCustomAudioLocalPlayback parameter', async () => {
    let nParam = {
      trackId: undefined,
      enabled: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaEngine_enableCustomAudioLocalPlayback',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableCustomAudioLocalPlayback impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl,
        'enableCustomAudioLocalPlayback'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      trackId: 'test',
      enabled: 'test',
    };
    let apiParam = new EventParam(
      'MediaEngine_enableCustomAudioLocalPlayback',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .enableCustomAudioLocalPlayback
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .enableCustomAudioLocalPlayback
    ).toBeCalledWith('test', 'test');
  });
  test('pushVideoFrame parameter', async () => {
    let nParam = {
      frame: undefined,
      videoTrackId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaEngine_pushVideoFrame',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('pushVideoFrame impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl,
        'pushVideoFrame'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      frame: 'test',
      videoTrackId: 'test',
    };
    let apiParam = new EventParam(
      'MediaEngine_pushVideoFrame',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl.pushVideoFrame
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl.pushVideoFrame
    ).toBeCalledWith('test', 'test');
  });
  test('pushEncodedVideoImage parameter', async () => {
    let nParam = {
      imageBuffer: undefined,
      length: undefined,
      videoEncodedFrameInfo: undefined,
      videoTrackId: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaEngine_pushEncodedVideoImage',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('pushEncodedVideoImage impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl,
        'pushEncodedVideoImage'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      imageBuffer: 'test',
      length: 'test',
      videoEncodedFrameInfo: 'test',
      videoTrackId: 'test',
    };
    let apiParam = new EventParam(
      'MediaEngine_pushEncodedVideoImage',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .pushEncodedVideoImage
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl
        .pushEncodedVideoImage
    ).toBeCalledWith('test', 'test', 'test', 'test');
  });

  test('release impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl,
        'release'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaEngine_release',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl.release
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaEngine')._impl.release
    ).toBeCalledWith();
  });
});
