/// Generated by terra, DO NOT MODIFY BY HAND.

import { ApiParam, CallApiReturnType, EventParam } from 'iris-web-core';
import { AgoraConsole } from '../util/AgoraConsole';

export class IMediaPlayerDispatch{
    _impl: IMediaPlayerImpl;
    
    constructor(engine: IrisRtcEngine) {
      this._impl = new IMediaPlayerImpl(engine);
    }
  getMediaPlayerId(
    
    
    ): CallApiReturnType {

    return this._impl.getMediaPlayerId();
  }

  open(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let url = obj.url;
    if (url === undefined) throw "url is undefined";
    let startPos = obj.startPos;
    if (startPos === undefined) throw "startPos is undefined";

    return this._impl.open(url,startPos,);
  }

  openWithMediaSource(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let source = obj.source;
    if (source === undefined) throw "source is undefined";

    return this._impl.openWithMediaSource(source,);
  }

  play(
    
    
    ): CallApiReturnType {

    return this._impl.play();
  }

  pause(
    
    
    ): CallApiReturnType {

    return this._impl.pause();
  }

  stop(
    
    
    ): CallApiReturnType {

    return this._impl.stop();
  }

  resume(
    
    
    ): CallApiReturnType {

    return this._impl.resume();
  }

  seek(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let newPos = obj.newPos;
    if (newPos === undefined) throw "newPos is undefined";

    return this._impl.seek(newPos,);
  }

  setAudioPitch(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let pitch = obj.pitch;
    if (pitch === undefined) throw "pitch is undefined";

    return this._impl.setAudioPitch(pitch,);
  }

  getDuration(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let duration = obj.duration;
    if (duration === undefined) throw "duration is undefined";

    return this._impl.getDuration(duration,);
  }

  getPlayPosition(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let pos = obj.pos;
    if (pos === undefined) throw "pos is undefined";

    return this._impl.getPlayPosition(pos,);
  }

  getStreamCount(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let count = obj.count;
    if (count === undefined) throw "count is undefined";

    return this._impl.getStreamCount(count,);
  }

  getStreamInfo(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let index = obj.index;
    if (index === undefined) throw "index is undefined";
    let info = obj.info;
    if (info === undefined) throw "info is undefined";

    return this._impl.getStreamInfo(index,info,);
  }

  setLoopCount(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let loopCount = obj.loopCount;
    if (loopCount === undefined) throw "loopCount is undefined";

    return this._impl.setLoopCount(loopCount,);
  }

  setPlaybackSpeed(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let speed = obj.speed;
    if (speed === undefined) throw "speed is undefined";

    return this._impl.setPlaybackSpeed(speed,);
  }

  selectAudioTrack(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let index = obj.index;
    if (index === undefined) throw "index is undefined";

    return this._impl.selectAudioTrack(index,);
  }

  setPlayerOption(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let key = obj.key;
    if (key === undefined) throw "key is undefined";
    let value = obj.value;
    if (value === undefined) throw "value is undefined";

    return this._impl.setPlayerOption(key,value,);
  }

  setPlayerOption2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let key = obj.key;
    if (key === undefined) throw "key is undefined";
    let value = obj.value;
    if (value === undefined) throw "value is undefined";

    return this._impl.setPlayerOption2(key,value,);
  }

  takeScreenshot(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let filename = obj.filename;
    if (filename === undefined) throw "filename is undefined";

    return this._impl.takeScreenshot(filename,);
  }

  selectInternalSubtitle(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let index = obj.index;
    if (index === undefined) throw "index is undefined";

    return this._impl.selectInternalSubtitle(index,);
  }

  setExternalSubtitle(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let url = obj.url;
    if (url === undefined) throw "url is undefined";

    return this._impl.setExternalSubtitle(url,);
  }

  getState(
    
    
    ): CallApiReturnType {

    return this._impl.getState();
  }

  mute(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let muted = obj.muted;
    if (muted === undefined) throw "muted is undefined";

    return this._impl.mute(muted,);
  }

  getMute(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let muted = obj.muted;
    if (muted === undefined) throw "muted is undefined";

    return this._impl.getMute(muted,);
  }

  adjustPlayoutVolume(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.adjustPlayoutVolume(volume,);
  }

  getPlayoutVolume(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.getPlayoutVolume(volume,);
  }

  adjustPublishSignalVolume(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.adjustPublishSignalVolume(volume,);
  }

  getPublishSignalVolume(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let volume = obj.volume;
    if (volume === undefined) throw "volume is undefined";

    return this._impl.getPublishSignalVolume(volume,);
  }

  setView(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let view = obj.view;
    if (view === undefined) throw "view is undefined";

    return this._impl.setView(view,);
  }

  setRenderMode(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let renderMode = obj.renderMode;
    if (renderMode === undefined) throw "renderMode is undefined";

    return this._impl.setRenderMode(renderMode,);
  }

  registerPlayerSourceObserver(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let observer = obj.observer;
    if (observer === undefined) throw "observer is undefined";

    return this._impl.registerPlayerSourceObserver(observer,);
  }

  unregisterPlayerSourceObserver(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let observer = obj.observer;
    if (observer === undefined) throw "observer is undefined";

    return this._impl.unregisterPlayerSourceObserver(observer,);
  }

  registerAudioFrameObserver(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let observer = obj.observer;
    if (observer === undefined) throw "observer is undefined";

    return this._impl.registerAudioFrameObserver(observer,);
  }

  registerAudioFrameObserver2(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let observer = obj.observer;
    if (observer === undefined) throw "observer is undefined";
    let mode = obj.mode;
    if (mode === undefined) throw "mode is undefined";

    return this._impl.registerAudioFrameObserver2(observer,mode,);
  }

  unregisterAudioFrameObserver(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let observer = obj.observer;
    if (observer === undefined) throw "observer is undefined";

    return this._impl.unregisterAudioFrameObserver(observer,);
  }

  registerVideoFrameObserver(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let observer = obj.observer;
    if (observer === undefined) throw "observer is undefined";

    return this._impl.registerVideoFrameObserver(observer,);
  }

  unregisterVideoFrameObserver(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let observer = obj.observer;
    if (observer === undefined) throw "observer is undefined";

    return this._impl.unregisterVideoFrameObserver(observer,);
  }

  registerMediaPlayerAudioSpectrumObserver(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let observer = obj.observer;
    if (observer === undefined) throw "observer is undefined";
    let intervalInMS = obj.intervalInMS;
    if (intervalInMS === undefined) throw "intervalInMS is undefined";

    return this._impl.registerMediaPlayerAudioSpectrumObserver(observer,intervalInMS,);
  }

  unregisterMediaPlayerAudioSpectrumObserver(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let observer = obj.observer;
    if (observer === undefined) throw "observer is undefined";

    return this._impl.unregisterMediaPlayerAudioSpectrumObserver(observer,);
  }

  setAudioDualMonoMode(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let mode = obj.mode;
    if (mode === undefined) throw "mode is undefined";

    return this._impl.setAudioDualMonoMode(mode,);
  }

  getPlayerSdkVersion(
    
    
    ): CallApiReturnType {

    return this._impl.getPlayerSdkVersion();
  }

  getPlaySrc(
    
    
    ): CallApiReturnType {

    return this._impl.getPlaySrc();
  }

  openWithAgoraCDNSrc(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let src = obj.src;
    if (src === undefined) throw "src is undefined";
    let startPos = obj.startPos;
    if (startPos === undefined) throw "startPos is undefined";

    return this._impl.openWithAgoraCDNSrc(src,startPos,);
  }

  getAgoraCDNLineCount(
    
    
    ): CallApiReturnType {

    return this._impl.getAgoraCDNLineCount();
  }

  switchAgoraCDNLineByIndex(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let index = obj.index;
    if (index === undefined) throw "index is undefined";

    return this._impl.switchAgoraCDNLineByIndex(index,);
  }

  getCurrentAgoraCDNIndex(
    
    
    ): CallApiReturnType {

    return this._impl.getCurrentAgoraCDNIndex();
  }

  enableAutoSwitchAgoraCDN(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enable = obj.enable;
    if (enable === undefined) throw "enable is undefined";

    return this._impl.enableAutoSwitchAgoraCDN(enable,);
  }

  renewAgoraCDNSrcToken(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let token = obj.token;
    if (token === undefined) throw "token is undefined";
    let ts = obj.ts;
    if (ts === undefined) throw "ts is undefined";

    return this._impl.renewAgoraCDNSrcToken(token,ts,);
  }

  switchAgoraCDNSrc(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let src = obj.src;
    if (src === undefined) throw "src is undefined";
    let syncPts = obj.syncPts;
    if (syncPts === undefined) throw "syncPts is undefined";

    return this._impl.switchAgoraCDNSrc(src,syncPts,);
  }

  switchSrc(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let src = obj.src;
    if (src === undefined) throw "src is undefined";
    let syncPts = obj.syncPts;
    if (syncPts === undefined) throw "syncPts is undefined";

    return this._impl.switchSrc(src,syncPts,);
  }

  preloadSrc(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let src = obj.src;
    if (src === undefined) throw "src is undefined";
    let startPos = obj.startPos;
    if (startPos === undefined) throw "startPos is undefined";

    return this._impl.preloadSrc(src,startPos,);
  }

  playPreloadedSrc(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let src = obj.src;
    if (src === undefined) throw "src is undefined";

    return this._impl.playPreloadedSrc(src,);
  }

  unloadSrc(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let src = obj.src;
    if (src === undefined) throw "src is undefined";

    return this._impl.unloadSrc(src,);
  }

  setSpatialAudioParams(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let params = obj.params;
    if (params === undefined) throw "params is undefined";

    return this._impl.setSpatialAudioParams(params,);
  }

  setSoundPositionParams(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let pan = obj.pan;
    if (pan === undefined) throw "pan is undefined";
    let gain = obj.gain;
    if (gain === undefined) throw "gain is undefined";

    return this._impl.setSoundPositionParams(pan,gain,);
  }

}

export class IMediaPlayerCacheManagerDispatch{
    _impl: IMediaPlayerCacheManagerImpl;
    
    constructor(engine: IrisRtcEngine) {
      this._impl = new IMediaPlayerCacheManagerImpl(engine);
    }
  removeAllCaches(
    
    
    ): CallApiReturnType {

    return this._impl.removeAllCaches();
  }

  removeOldCache(
    
    
    ): CallApiReturnType {

    return this._impl.removeOldCache();
  }

  removeCacheByUri(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let uri = obj.uri;
    if (uri === undefined) throw "uri is undefined";

    return this._impl.removeCacheByUri(uri,);
  }

  setCacheDir(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let path = obj.path;
    if (path === undefined) throw "path is undefined";

    return this._impl.setCacheDir(path,);
  }

  setMaxCacheFileCount(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let count = obj.count;
    if (count === undefined) throw "count is undefined";

    return this._impl.setMaxCacheFileCount(count,);
  }

  setMaxCacheFileSize(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let cacheSize = obj.cacheSize;
    if (cacheSize === undefined) throw "cacheSize is undefined";

    return this._impl.setMaxCacheFileSize(cacheSize,);
  }

  enableAutoRemoveCache(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let enable = obj.enable;
    if (enable === undefined) throw "enable is undefined";

    return this._impl.enableAutoRemoveCache(enable,);
  }

  getCacheDir(
    
    apiParam: ApiParam
    ): CallApiReturnType {
    let obj = JSON.parse(apiParam.data) as any;
    let path = obj.path;
    if (path === undefined) throw "path is undefined";
    let length = obj.length;
    if (length === undefined) throw "length is undefined";

    return this._impl.getCacheDir(path,length,);
  }

  getMaxCacheFileCount(
    
    
    ): CallApiReturnType {

    return this._impl.getMaxCacheFileCount();
  }

  getMaxCacheFileSize(
    
    
    ): CallApiReturnType {

    return this._impl.getMaxCacheFileSize();
  }

  getCacheFileCount(
    
    
    ): CallApiReturnType {

    return this._impl.getCacheFileCount();
  }

}

