/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  CallIrisApiResult,
  EventParam,
  IrisApiEngine,
  IrisCore,
} from 'iris-web-core';

import { initIrisRtc } from '../../src/index';
import { IrisRtcEngine } from '../engine/IrisRtcEngine';

const bindingAPI = require('../../src/binding/IAgoraMediaPlayerDispatch');

let apiEnginePtr: IrisApiEngine;
let irisRtcEngine: IrisRtcEngine;
beforeAll(async () => {
  apiEnginePtr = IrisCore.createIrisApiEngine();
  initIrisRtc(apiEnginePtr);
  irisRtcEngine = apiEnginePtr['apiInterceptors'][0];
  irisRtcEngine.implHelper.createAudioTrack = jest.fn();
  let nParam = {
    context: 'test',
  };
  let apiParam = new EventParam(
    'RtcEngine_initialize',
    JSON.stringify(nParam),
    0,
    '',
    ['test'],
    [],
    1
  );
  await IrisCore.callIrisApi(apiEnginePtr, apiParam);
});

afterAll(() => {
  IrisCore.disposeIrisApiEngine(apiEnginePtr);
});

afterEach(() => {
  jest.clearAllMocks();
});

describe('IMediaPlayer', () => {
  test('getMediaPlayerId impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'getMediaPlayerId'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaPlayer_getMediaPlayerId',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getMediaPlayerId
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getMediaPlayerId
    ).toBeCalledWith();
  });
  test('open parameter', async () => {
    let nParam = {
      url: undefined,
      startPos: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_open',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('open impl call', async () => {
    jest
      .spyOn(irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl, 'open')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      url: 'test',
      startPos: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_open',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.open
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.open
    ).toBeCalledWith('test', 'test');
  });
  test('openWithMediaSource parameter', async () => {
    let nParam = {
      source: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_openWithMediaSource',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('openWithMediaSource impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'openWithMediaSource'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      source: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_openWithMediaSource',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .openWithMediaSource
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .openWithMediaSource
    ).toBeCalledWith('test');
  });

  test('play impl call', async () => {
    jest
      .spyOn(irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl, 'play')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaPlayer_play',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.play
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.play
    ).toBeCalledWith();
  });

  test('pause impl call', async () => {
    jest
      .spyOn(irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl, 'pause')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaPlayer_pause',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.pause
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.pause
    ).toBeCalledWith();
  });

  test('stop impl call', async () => {
    jest
      .spyOn(irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl, 'stop')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaPlayer_stop',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.stop
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.stop
    ).toBeCalledWith();
  });

  test('resume impl call', async () => {
    jest
      .spyOn(irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl, 'resume')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaPlayer_resume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.resume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.resume
    ).toBeCalledWith();
  });
  test('seek parameter', async () => {
    let nParam = {
      newPos: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_seek',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('seek impl call', async () => {
    jest
      .spyOn(irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl, 'seek')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      newPos: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_seek',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.seek
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.seek
    ).toBeCalledWith('test');
  });
  test('setAudioPitch parameter', async () => {
    let nParam = {
      pitch: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_setAudioPitch',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setAudioPitch impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'setAudioPitch'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      pitch: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_setAudioPitch',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.setAudioPitch
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.setAudioPitch
    ).toBeCalledWith('test');
  });
  test('getDuration parameter', async () => {
    let nParam = {
      duration: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_getDuration',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getDuration impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'getDuration'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      duration: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_getDuration',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getDuration
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getDuration
    ).toBeCalledWith('test');
  });
  test('getPlayPosition parameter', async () => {
    let nParam = {
      pos: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_getPlayPosition',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getPlayPosition impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'getPlayPosition'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      pos: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_getPlayPosition',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getPlayPosition
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getPlayPosition
    ).toBeCalledWith('test');
  });
  test('getStreamCount parameter', async () => {
    let nParam = {
      count: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_getStreamCount',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getStreamCount impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'getStreamCount'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      count: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_getStreamCount',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getStreamCount
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getStreamCount
    ).toBeCalledWith('test');
  });
  test('getStreamInfo parameter', async () => {
    let nParam = {
      index: undefined,
      info: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_getStreamInfo',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getStreamInfo impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'getStreamInfo'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      index: 'test',
      info: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_getStreamInfo',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getStreamInfo
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getStreamInfo
    ).toBeCalledWith('test', 'test');
  });
  test('setLoopCount parameter', async () => {
    let nParam = {
      loopCount: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_setLoopCount',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setLoopCount impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'setLoopCount'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      loopCount: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_setLoopCount',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.setLoopCount
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.setLoopCount
    ).toBeCalledWith('test');
  });
  test('setPlaybackSpeed parameter', async () => {
    let nParam = {
      speed: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_setPlaybackSpeed',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setPlaybackSpeed impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'setPlaybackSpeed'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      speed: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_setPlaybackSpeed',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.setPlaybackSpeed
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.setPlaybackSpeed
    ).toBeCalledWith('test');
  });
  test('selectAudioTrack parameter', async () => {
    let nParam = {
      index: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_selectAudioTrack',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('selectAudioTrack impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'selectAudioTrack'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      index: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_selectAudioTrack',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.selectAudioTrack
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.selectAudioTrack
    ).toBeCalledWith('test');
  });
  test('setPlayerOption parameter', async () => {
    let nParam = {
      key: undefined,
      value: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_setPlayerOption',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setPlayerOption impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'setPlayerOption'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      key: 'test',
      value: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_setPlayerOption',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.setPlayerOption
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.setPlayerOption
    ).toBeCalledWith('test', 'test');
  });
  test('setPlayerOption2 parameter', async () => {
    let nParam = {
      key: undefined,
      value: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_setPlayerOption2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setPlayerOption2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'setPlayerOption2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      key: 'test',
      value: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_setPlayerOption2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.setPlayerOption2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.setPlayerOption2
    ).toBeCalledWith('test', 'test');
  });
  test('takeScreenshot parameter', async () => {
    let nParam = {
      filename: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_takeScreenshot',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('takeScreenshot impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'takeScreenshot'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      filename: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_takeScreenshot',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.takeScreenshot
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.takeScreenshot
    ).toBeCalledWith('test');
  });
  test('selectInternalSubtitle parameter', async () => {
    let nParam = {
      index: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_selectInternalSubtitle',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('selectInternalSubtitle impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'selectInternalSubtitle'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      index: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_selectInternalSubtitle',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .selectInternalSubtitle
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .selectInternalSubtitle
    ).toBeCalledWith('test');
  });
  test('setExternalSubtitle parameter', async () => {
    let nParam = {
      url: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_setExternalSubtitle',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setExternalSubtitle impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'setExternalSubtitle'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      url: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_setExternalSubtitle',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .setExternalSubtitle
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .setExternalSubtitle
    ).toBeCalledWith('test');
  });

  test('getState impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'getState'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaPlayer_getState',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getState
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getState
    ).toBeCalledWith();
  });
  test('mute parameter', async () => {
    let nParam = {
      muted: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_mute',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('mute impl call', async () => {
    jest
      .spyOn(irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl, 'mute')
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      muted: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_mute',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.mute
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.mute
    ).toBeCalledWith('test');
  });
  test('getMute parameter', async () => {
    let nParam = {
      muted: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_getMute',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getMute impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'getMute'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      muted: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_getMute',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getMute
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getMute
    ).toBeCalledWith('test');
  });
  test('adjustPlayoutVolume parameter', async () => {
    let nParam = {
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_adjustPlayoutVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('adjustPlayoutVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'adjustPlayoutVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_adjustPlayoutVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .adjustPlayoutVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .adjustPlayoutVolume
    ).toBeCalledWith('test');
  });
  test('getPlayoutVolume parameter', async () => {
    let nParam = {
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_getPlayoutVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getPlayoutVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'getPlayoutVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_getPlayoutVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getPlayoutVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getPlayoutVolume
    ).toBeCalledWith('test');
  });
  test('adjustPublishSignalVolume parameter', async () => {
    let nParam = {
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_adjustPublishSignalVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('adjustPublishSignalVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'adjustPublishSignalVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_adjustPublishSignalVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .adjustPublishSignalVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .adjustPublishSignalVolume
    ).toBeCalledWith('test');
  });
  test('getPublishSignalVolume parameter', async () => {
    let nParam = {
      volume: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_getPublishSignalVolume',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getPublishSignalVolume impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'getPublishSignalVolume'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      volume: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_getPublishSignalVolume',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .getPublishSignalVolume
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .getPublishSignalVolume
    ).toBeCalledWith('test');
  });
  test('setView parameter', async () => {
    let nParam = {
      view: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_setView',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setView impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'setView'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      view: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_setView',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.setView
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.setView
    ).toBeCalledWith('test');
  });
  test('setRenderMode parameter', async () => {
    let nParam = {
      renderMode: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_setRenderMode',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setRenderMode impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'setRenderMode'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      renderMode: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_setRenderMode',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.setRenderMode
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.setRenderMode
    ).toBeCalledWith('test');
  });
  test('registerPlayerSourceObserver parameter', async () => {
    let nParam = {
      observer: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_registerPlayerSourceObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('registerPlayerSourceObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'registerPlayerSourceObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_registerPlayerSourceObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .registerPlayerSourceObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .registerPlayerSourceObserver
    ).toBeCalledWith('test');
  });
  test('unregisterPlayerSourceObserver parameter', async () => {
    let nParam = {
      observer: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_unregisterPlayerSourceObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('unregisterPlayerSourceObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'unregisterPlayerSourceObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_unregisterPlayerSourceObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .unregisterPlayerSourceObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .unregisterPlayerSourceObserver
    ).toBeCalledWith('test');
  });
  test('registerAudioFrameObserver parameter', async () => {
    let nParam = {
      observer: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_registerAudioFrameObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('registerAudioFrameObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'registerAudioFrameObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_registerAudioFrameObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .registerAudioFrameObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .registerAudioFrameObserver
    ).toBeCalledWith('test');
  });
  test('registerAudioFrameObserver2 parameter', async () => {
    let nParam = {
      observer: undefined,
      mode: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_registerAudioFrameObserver2',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('registerAudioFrameObserver2 impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'registerAudioFrameObserver2'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
      mode: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_registerAudioFrameObserver2',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .registerAudioFrameObserver2
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .registerAudioFrameObserver2
    ).toBeCalledWith('test', 'test');
  });
  test('unregisterAudioFrameObserver parameter', async () => {
    let nParam = {
      observer: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_unregisterAudioFrameObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('unregisterAudioFrameObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'unregisterAudioFrameObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_unregisterAudioFrameObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .unregisterAudioFrameObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .unregisterAudioFrameObserver
    ).toBeCalledWith('test');
  });
  test('registerVideoFrameObserver parameter', async () => {
    let nParam = {
      observer: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_registerVideoFrameObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('registerVideoFrameObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'registerVideoFrameObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_registerVideoFrameObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .registerVideoFrameObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .registerVideoFrameObserver
    ).toBeCalledWith('test');
  });
  test('unregisterVideoFrameObserver parameter', async () => {
    let nParam = {
      observer: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_unregisterVideoFrameObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('unregisterVideoFrameObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'unregisterVideoFrameObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_unregisterVideoFrameObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .unregisterVideoFrameObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .unregisterVideoFrameObserver
    ).toBeCalledWith('test');
  });
  test('registerMediaPlayerAudioSpectrumObserver parameter', async () => {
    let nParam = {
      observer: undefined,
      intervalInMS: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_registerMediaPlayerAudioSpectrumObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('registerMediaPlayerAudioSpectrumObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'registerMediaPlayerAudioSpectrumObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
      intervalInMS: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_registerMediaPlayerAudioSpectrumObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .registerMediaPlayerAudioSpectrumObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .registerMediaPlayerAudioSpectrumObserver
    ).toBeCalledWith('test', 'test');
  });
  test('unregisterMediaPlayerAudioSpectrumObserver parameter', async () => {
    let nParam = {
      observer: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_unregisterMediaPlayerAudioSpectrumObserver',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('unregisterMediaPlayerAudioSpectrumObserver impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'unregisterMediaPlayerAudioSpectrumObserver'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      observer: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_unregisterMediaPlayerAudioSpectrumObserver',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .unregisterMediaPlayerAudioSpectrumObserver
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .unregisterMediaPlayerAudioSpectrumObserver
    ).toBeCalledWith('test');
  });
  test('setAudioDualMonoMode parameter', async () => {
    let nParam = {
      mode: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_setAudioDualMonoMode',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setAudioDualMonoMode impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'setAudioDualMonoMode'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      mode: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_setAudioDualMonoMode',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .setAudioDualMonoMode
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .setAudioDualMonoMode
    ).toBeCalledWith('test');
  });

  test('getPlayerSdkVersion impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'getPlayerSdkVersion'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaPlayer_getPlayerSdkVersion',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .getPlayerSdkVersion
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .getPlayerSdkVersion
    ).toBeCalledWith();
  });

  test('getPlaySrc impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'getPlaySrc'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaPlayer_getPlaySrc',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getPlaySrc
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.getPlaySrc
    ).toBeCalledWith();
  });
  test('openWithAgoraCDNSrc parameter', async () => {
    let nParam = {
      src: undefined,
      startPos: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_openWithAgoraCDNSrc',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('openWithAgoraCDNSrc impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'openWithAgoraCDNSrc'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      src: 'test',
      startPos: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_openWithAgoraCDNSrc',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .openWithAgoraCDNSrc
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .openWithAgoraCDNSrc
    ).toBeCalledWith('test', 'test');
  });

  test('getAgoraCDNLineCount impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'getAgoraCDNLineCount'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaPlayer_getAgoraCDNLineCount',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .getAgoraCDNLineCount
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .getAgoraCDNLineCount
    ).toBeCalledWith();
  });
  test('switchAgoraCDNLineByIndex parameter', async () => {
    let nParam = {
      index: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_switchAgoraCDNLineByIndex',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('switchAgoraCDNLineByIndex impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'switchAgoraCDNLineByIndex'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      index: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_switchAgoraCDNLineByIndex',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .switchAgoraCDNLineByIndex
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .switchAgoraCDNLineByIndex
    ).toBeCalledWith('test');
  });

  test('getCurrentAgoraCDNIndex impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'getCurrentAgoraCDNIndex'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaPlayer_getCurrentAgoraCDNIndex',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .getCurrentAgoraCDNIndex
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .getCurrentAgoraCDNIndex
    ).toBeCalledWith();
  });
  test('enableAutoSwitchAgoraCDN parameter', async () => {
    let nParam = {
      enable: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_enableAutoSwitchAgoraCDN',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableAutoSwitchAgoraCDN impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'enableAutoSwitchAgoraCDN'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enable: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_enableAutoSwitchAgoraCDN',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .enableAutoSwitchAgoraCDN
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .enableAutoSwitchAgoraCDN
    ).toBeCalledWith('test');
  });
  test('renewAgoraCDNSrcToken parameter', async () => {
    let nParam = {
      token: undefined,
      ts: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_renewAgoraCDNSrcToken',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('renewAgoraCDNSrcToken impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'renewAgoraCDNSrcToken'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      token: 'test',
      ts: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_renewAgoraCDNSrcToken',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .renewAgoraCDNSrcToken
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .renewAgoraCDNSrcToken
    ).toBeCalledWith('test', 'test');
  });
  test('switchAgoraCDNSrc parameter', async () => {
    let nParam = {
      src: undefined,
      syncPts: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_switchAgoraCDNSrc',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('switchAgoraCDNSrc impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'switchAgoraCDNSrc'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      src: 'test',
      syncPts: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_switchAgoraCDNSrc',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.switchAgoraCDNSrc
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.switchAgoraCDNSrc
    ).toBeCalledWith('test', 'test');
  });
  test('switchSrc parameter', async () => {
    let nParam = {
      src: undefined,
      syncPts: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_switchSrc',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('switchSrc impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'switchSrc'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      src: 'test',
      syncPts: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_switchSrc',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.switchSrc
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.switchSrc
    ).toBeCalledWith('test', 'test');
  });
  test('preloadSrc parameter', async () => {
    let nParam = {
      src: undefined,
      startPos: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_preloadSrc',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('preloadSrc impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'preloadSrc'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      src: 'test',
      startPos: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_preloadSrc',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.preloadSrc
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.preloadSrc
    ).toBeCalledWith('test', 'test');
  });
  test('playPreloadedSrc parameter', async () => {
    let nParam = {
      src: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_playPreloadedSrc',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('playPreloadedSrc impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'playPreloadedSrc'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      src: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_playPreloadedSrc',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.playPreloadedSrc
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.playPreloadedSrc
    ).toBeCalledWith('test');
  });
  test('unloadSrc parameter', async () => {
    let nParam = {
      src: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_unloadSrc',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('unloadSrc impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'unloadSrc'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      src: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_unloadSrc',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.unloadSrc
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl.unloadSrc
    ).toBeCalledWith('test');
  });
  test('setSpatialAudioParams parameter', async () => {
    let nParam = {
      params: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_setSpatialAudioParams',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setSpatialAudioParams impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'setSpatialAudioParams'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      params: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_setSpatialAudioParams',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .setSpatialAudioParams
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .setSpatialAudioParams
    ).toBeCalledWith('test');
  });
  test('setSoundPositionParams parameter', async () => {
    let nParam = {
      pan: undefined,
      gain: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayer_setSoundPositionParams',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setSoundPositionParams impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl,
        'setSoundPositionParams'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      pan: 'test',
      gain: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayer_setSoundPositionParams',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .setSoundPositionParams
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayer')._impl
        .setSoundPositionParams
    ).toBeCalledWith('test', 'test');
  });
});
describe('IMediaPlayerCacheManager', () => {
  test('removeAllCaches impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl,
        'removeAllCaches'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaPlayerCacheManager_removeAllCaches',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .removeAllCaches
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .removeAllCaches
    ).toBeCalledWith();
  });

  test('removeOldCache impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl,
        'removeOldCache'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaPlayerCacheManager_removeOldCache',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .removeOldCache
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .removeOldCache
    ).toBeCalledWith();
  });
  test('removeCacheByUri parameter', async () => {
    let nParam = {
      uri: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayerCacheManager_removeCacheByUri',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('removeCacheByUri impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl,
        'removeCacheByUri'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      uri: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayerCacheManager_removeCacheByUri',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .removeCacheByUri
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .removeCacheByUri
    ).toBeCalledWith('test');
  });
  test('setCacheDir parameter', async () => {
    let nParam = {
      path: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayerCacheManager_setCacheDir',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setCacheDir impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl,
        'setCacheDir'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      path: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayerCacheManager_setCacheDir',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .setCacheDir
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .setCacheDir
    ).toBeCalledWith('test');
  });
  test('setMaxCacheFileCount parameter', async () => {
    let nParam = {
      count: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayerCacheManager_setMaxCacheFileCount',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setMaxCacheFileCount impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl,
        'setMaxCacheFileCount'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      count: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayerCacheManager_setMaxCacheFileCount',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .setMaxCacheFileCount
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .setMaxCacheFileCount
    ).toBeCalledWith('test');
  });
  test('setMaxCacheFileSize parameter', async () => {
    let nParam = {
      cacheSize: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayerCacheManager_setMaxCacheFileSize',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('setMaxCacheFileSize impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl,
        'setMaxCacheFileSize'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      cacheSize: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayerCacheManager_setMaxCacheFileSize',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .setMaxCacheFileSize
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .setMaxCacheFileSize
    ).toBeCalledWith('test');
  });
  test('enableAutoRemoveCache parameter', async () => {
    let nParam = {
      enable: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayerCacheManager_enableAutoRemoveCache',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('enableAutoRemoveCache impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl,
        'enableAutoRemoveCache'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      enable: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayerCacheManager_enableAutoRemoveCache',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .enableAutoRemoveCache
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .enableAutoRemoveCache
    ).toBeCalledWith('test');
  });
  test('getCacheDir parameter', async () => {
    let nParam = {
      path: undefined,
      length: undefined,
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new EventParam(
            'MediaPlayerCacheManager_getCacheDir',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });

  test('getCacheDir impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl,
        'getCacheDir'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      path: 'test',
      length: 'test',
    };
    let apiParam = new EventParam(
      'MediaPlayerCacheManager_getCacheDir',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .getCacheDir
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .getCacheDir
    ).toBeCalledWith('test', 'test');
  });

  test('getMaxCacheFileCount impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl,
        'getMaxCacheFileCount'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaPlayerCacheManager_getMaxCacheFileCount',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .getMaxCacheFileCount
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .getMaxCacheFileCount
    ).toBeCalledWith();
  });

  test('getMaxCacheFileSize impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl,
        'getMaxCacheFileSize'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaPlayerCacheManager_getMaxCacheFileSize',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .getMaxCacheFileSize
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .getMaxCacheFileSize
    ).toBeCalledWith();
  });

  test('getCacheFileCount impl call', async () => {
    jest
      .spyOn(
        irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl,
        'getCacheFileCount'
      )
      .mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {};
    let apiParam = new EventParam(
      'MediaPlayerCacheManager_getCacheFileCount',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .getCacheFileCount
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('MediaPlayerCacheManager')._impl
        .getCacheFileCount
    ).toBeCalledWith();
  });
});
