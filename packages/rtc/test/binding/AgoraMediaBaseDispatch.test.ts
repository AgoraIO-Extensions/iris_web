/// Generated by terra, DO NOT MODIFY BY HAND.

import {
  CallIrisApiResult,
  EventParam,
  IrisApiEngine,
  IrisCore,
} from 'iris-web-core';

import { initIrisRtc } from '../../src/index';
import { IrisRtcEngine } from '../engine/IrisRtcEngine';

const bindingAPI = require('../../src/binding/AgoraMediaBaseDispatch');

let apiEnginePtr: IrisApiEngine;
let irisRtcEngine: IrisRtcEngine;
beforeAll(() => {
  apiEnginePtr = IrisCore.createIrisApiEngine();
  initIrisRtc(apiEnginePtr);
  irisRtcEngine = apiEnginePtr['apiInterceptors'][0];
});

afterAll(() => {
  IrisCore.disposeIrisApiEngine(apiEnginePtr);
});

afterEach(() => {
  jest.clearAllMocks();
});

describe('IAudioPcmFrameSink', () => {
  test('onFrame impl call', async () => {
    let eventHandler = new bindingAPI.IAudioPcmFrameSink(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onFrame(undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onFrame');
  });
});
describe('IAudioFrameObserverBase', () => {
  test('onRecordAudioFrame impl call', async () => {
    let eventHandler = new bindingAPI.IAudioFrameObserverBase(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onRecordAudioFrame(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onRecordAudioFrame');
  });
  test('onPlaybackAudioFrame impl call', async () => {
    let eventHandler = new bindingAPI.IAudioFrameObserverBase(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onPlaybackAudioFrame(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onPlaybackAudioFrame');
  });
  test('onMixedAudioFrame impl call', async () => {
    let eventHandler = new bindingAPI.IAudioFrameObserverBase(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onMixedAudioFrame(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onMixedAudioFrame');
  });
  test('onEarMonitoringAudioFrame impl call', async () => {
    let eventHandler = new bindingAPI.IAudioFrameObserverBase(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onEarMonitoringAudioFrame(undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onEarMonitoringAudioFrame');
  });
});
describe('IAudioFrameObserver', () => {
  test('onPlaybackAudioFrameBeforeMixing impl call', async () => {
    let eventHandler = new bindingAPI.IAudioFrameObserver(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onPlaybackAudioFrameBeforeMixing(
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith(
      'onPlaybackAudioFrameBeforeMixing'
    );
  });
});
describe('IAudioSpectrumObserver', () => {
  test('onLocalAudioSpectrum impl call', async () => {
    let eventHandler = new bindingAPI.IAudioSpectrumObserver(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onLocalAudioSpectrum(undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onLocalAudioSpectrum');
  });
  test('onRemoteAudioSpectrum impl call', async () => {
    let eventHandler = new bindingAPI.IAudioSpectrumObserver(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onRemoteAudioSpectrum(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onRemoteAudioSpectrum');
  });
});
describe('IVideoEncodedFrameObserver', () => {
  test('onEncodedVideoFrameReceived impl call', async () => {
    let eventHandler = new bindingAPI.IVideoEncodedFrameObserver(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onEncodedVideoFrameReceived(
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onEncodedVideoFrameReceived');
  });
});
describe('IVideoFrameObserver', () => {
  test('onCaptureVideoFrame impl call', async () => {
    let eventHandler = new bindingAPI.IVideoFrameObserver(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onCaptureVideoFrame(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onCaptureVideoFrame');
  });
  test('onPreEncodeVideoFrame impl call', async () => {
    let eventHandler = new bindingAPI.IVideoFrameObserver(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onPreEncodeVideoFrame(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onPreEncodeVideoFrame');
  });
  test('onMediaPlayerVideoFrame impl call', async () => {
    let eventHandler = new bindingAPI.IVideoFrameObserver(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onMediaPlayerVideoFrame(undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onMediaPlayerVideoFrame');
  });
  test('onRenderVideoFrame impl call', async () => {
    let eventHandler = new bindingAPI.IVideoFrameObserver(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onRenderVideoFrame(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onRenderVideoFrame');
  });
  test('onTranscodedVideoFrame impl call', async () => {
    let eventHandler = new bindingAPI.IVideoFrameObserver(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onTranscodedVideoFrame(undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onTranscodedVideoFrame');
  });
});
describe('IMediaRecorderObserver', () => {
  test('onRecorderStateChanged impl call', async () => {
    let eventHandler = new bindingAPI.IMediaRecorderObserver(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onRecorderStateChanged(
      undefined,
      undefined,
      undefined,
      undefined
    );
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onRecorderStateChanged');
  });
  test('onRecorderInfoUpdated impl call', async () => {
    let eventHandler = new bindingAPI.IMediaRecorderObserver(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(eventHandler, 'eventKey');
    eventHandler.onRecorderInfoUpdated(undefined, undefined, undefined);
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledTimes(1);
    expect(eventHandler.eventKey).toBeCalledWith('onRecorderInfoUpdated');
  });
});
