/// Generated by terra, DO NOT MODIFY BY HAND.

import { ApiParam, CallApiReturnType, EventParam } from 'iris-web-core';
import { AgoraConsole } from '../util/AgoraConsole';

{{#nodes}}
{{#user_data.isCallback}}
export class {{name}} {{#base_clazzs}}extends {{.}}{{/base_clazzs}}{
  classPrefix: string = "{{user_data.classPrefix}}";

  _engine: IrisRtcEngine = null;

  constructor(engine: IrisRtcEngine) {
      {{#user_data.hasBaseClazzs}}
      super(engine);
      {{/user_data.hasBaseClazzs}}
      this._engine = engine;
  }

  eventKey(event: string): string {
      return `${this.classPrefix}${event}`;
  }

  notifyEvent(param: EventParam): void {
      this._engine.irisEventHandlerManager.notifyEvent("RtcEngine", param);
  }

  {{#methods}}
    {{name}}{{user_data._prefix}}({{#parameters}}{{name}}:{{type.source}},{{/parameters}}): void {
      let _obj = {
        {{#parameters}}{{name}},{{/parameters}}
      };
      let _json = JSON.stringify(_obj);
      let _key = this.eventKey('{{name}}{{user_data._prefix}}');

      let eventParam = new EventParam(_key, _json, 0, '', [], [], 0);
      AgoraConsole.log(`{{name}}{{user_data._prefix}} eventParam ${JSON.stringify(eventParam)}`);
      this.notifyEvent(eventParam);
    }

  {{/methods}}
}

{{/user_data.isCallback}}
{{^user_data.isCallback}}
export class {{name}}Dispatch{
    _impl: {{name}}Impl;
    
    constructor(engine: IrisRtcEngine) {
      this._impl = new {{name}}Impl(engine);
    }
{{#methods}}
  {{name}}(
    {{#user_data.isRegisterMethod}}apiParam: ApiParam{{/user_data.isRegisterMethod}}
    {{^user_data.isRegisterMethod}}{{#user_data.hasParameters}}apiParam: ApiParam{{/user_data.hasParameters}}{{/user_data.isRegisterMethod}}
    ): CallApiReturnType {
    {{#user_data.isRegisterMethod}}
    let eventHandler = apiParam.buffer[0]; //obj.eventHandler;
    if (eventHandler === undefined) throw 'eventHandler is undefined';
    {{/user_data.isRegisterMethod}}
    {{^user_data.isRegisterMethod}}
    {{#user_data.hasParameters}}
    let obj = JSON.parse(apiParam.data) as any;
    {{#user_data.bindingExtensionList}}
    {{{.}}}
    {{/user_data.bindingExtensionList}}
    {{/user_data.hasParameters}}
    {{#parameters}}
    let {{name}} = obj.{{name}};
    if ({{name}} === undefined) throw "{{name}} is undefined";
    {{/parameters}}

    {{/user_data.isRegisterMethod}}
    return this._impl.{{name}}({{#parameters}}{{name}},{{/parameters}});
  }

{{/methods}}
}

{{/user_data.isCallback}}
{{/nodes}}
