/// Generated by terra, DO NOT MODIFY BY HAND.

import * as NATIVE_RTC from '@iris/native-rtc';
import { CallIrisApiResult, IrisApiEngine, IrisCore } from 'iris-web-core';

const bindingAPI = require('../../src/binding/{{&user_data.fileName}}Dispatch');

import { IrisWebRtc } from '../../src/IrisRtcApi';
import { IrisRtcEngine } from '../engine/IrisRtcEngine';

let apiEnginePtr: IrisApiEngine;
let irisRtcEngine: IrisRtcEngine;
beforeAll(async () => {
  apiEnginePtr = IrisCore.createIrisApiEngine();
  IrisWebRtc.initIrisRtc(apiEnginePtr);
  irisRtcEngine = apiEnginePtr['apiInterceptors'][0];
  irisRtcEngine.implHelper.createAudioTrack = jest.fn();
  let nParam = {
    context: 'test',
  };
  let apiParam = new IrisCore.EventParam(
    'RtcEngine_initialize_0320339',
    JSON.stringify(nParam),
    0,
    '',
    ['test'],
    [],
    1
  );
  await IrisCore.callIrisApi(apiEnginePtr, apiParam);
});

afterAll(() => {
  IrisCore.disposeIrisApiEngine(apiEnginePtr);
});

afterEach(() => {
  jest.clearAllMocks();
});

{{#nodes}}
describe('{{name}}', () => {
{{#user_data.isCallback}}
  {{#methods}}
  {{#user_data.isSupport}}
  test('{{{user_data.IrisApiIdParser.value}}} impl call', async () => {
    let eventHandler = new bindingAPI.{{parent.name}}(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    eventHandler.{{name}}({{#parameters}}undefined,{{/parameters}});
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(1);
  });
  {{/user_data.isSupport}}
  {{^user_data.isSupport}}
  test('{{{user_data.IrisApiIdParser.value}}} impl call', async () => {
    let eventHandler = new bindingAPI.{{parent.name}}(irisRtcEngine);
    jest.spyOn(eventHandler._engine.irisEventHandlerManager, 'notifyEvent');
    jest.spyOn(irisRtcEngine, 'returnResult').mockResolvedValue(new CallIrisApiResult(0, ''));
    eventHandler.{{name}}({{#parameters}}undefined,{{/parameters}});
    expect(
      eventHandler._engine.irisEventHandlerManager.notifyEvent
    ).toBeCalledTimes(0);
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });
  {{/user_data.isSupport}}
  {{/methods}}
{{/user_data.isCallback}}
{{^user_data.isCallback}}
  {{#methods}}
  {{#user_data.isSupport}}
  {{#user_data.hasParameters}}
  test('{{{user_data.IrisApiIdParser.value}}} parameter', async () => {
    let nParam = {
      {{#parameters}}
      {{name}}: undefined,
      {{/parameters}}
    };
    for (let i in nParam) {
      try {
        await IrisCore.callIrisApi(
          apiEnginePtr,
          new IrisCore.EventParam(
            '{{{user_data.IrisApiIdParser.value}}}',
            JSON.stringify(nParam),
            0,
            '',
            ['test'],
            [],
            1
          )
        );
      } catch (e) {
        expect(e).toEqual(i + ' is undefined');
      }
      nParam[i] = 'test';
    }
  });
  {{/user_data.hasParameters}}

  test('{{{user_data.IrisApiIdParser.value}}} impl call', async () => {
    jest.spyOn(
      irisRtcEngine.implDispatchesMap.get('{{user_data.prefix_name}}')._impl,
      '{{name}}'
    ).mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      {{#parameters}}
      {{name}}: 'test',
      {{/parameters}}
    };
    let apiParam = new IrisCore.EventParam(
      '{{{user_data.IrisApiIdParser.value}}}',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('{{user_data.prefix_name}}')._impl
        .{{name}}
    ).toBeCalledTimes(1);
    expect(
      irisRtcEngine.implDispatchesMap.get('{{user_data.prefix_name}}')._impl
        .{{name}}
    ).toBeCalledWith({{#parameters}}'test',{{/parameters}});
  });
  {{/user_data.isSupport}}
  {{^user_data.isSupport}}
    test('{{{user_data.IrisApiIdParser.value}}} impl call', async () => {
    jest.spyOn(irisRtcEngine, 'returnResult').mockResolvedValue(new CallIrisApiResult(0, ''));
    let nParam = {
      {{#parameters}}
      {{name}}: 'test',
      {{/parameters}}
    };
    let apiParam = new IrisCore.EventParam(
      '{{{user_data.IrisApiIdParser.value}}}',
      JSON.stringify(nParam),
      0,
      '',
      ['test'],
      [],
      1
    );
    await IrisCore.callIrisApi(apiEnginePtr, apiParam);
    expect(
      irisRtcEngine.implDispatchesMap.get('{{user_data.prefix_name}}')._impl?.{{name}}
    ).toBeUndefined();
    expect(irisRtcEngine.returnResult).toBeCalledTimes(1);
    expect(irisRtcEngine.returnResult).toBeCalledWith(
      false,
      -NATIVE_RTC.ERROR_CODE_TYPE.ERR_NOT_SUPPORTED
    );
  });
  {{/user_data.isSupport}}

  {{/methods}}
{{/user_data.isCallback}}
});
{{/nodes}}
